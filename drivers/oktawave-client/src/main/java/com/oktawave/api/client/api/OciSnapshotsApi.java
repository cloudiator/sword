/*
 * Oktawave API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.oktawave.api.client.api;

import com.google.gson.reflect.TypeToken;
import com.oktawave.api.client.*;
import com.oktawave.api.client.model.ApiCollectionSnapshot;
import com.oktawave.api.client.model.CreateUpdateSnapshotCommand;
import com.oktawave.api.client.model.Snapshot;
import com.oktawave.api.client.model.Ticket;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OciSnapshotsApi {
    private ApiClient apiClient;

    public OciSnapshotsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OciSnapshotsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for instancesGetSnapshots
     *
     * @param id                      Instance identifier (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesGetSnapshotsCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{id}/snapshots"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesGetSnapshotsValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesGetSnapshots(Async)");
        }


        com.squareup.okhttp.Call call = instancesGetSnapshotsCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns instance snapshots
     *
     * @param id     Instance identifier (required)
     * @param fields Response fields filter (optional)
     * @return ApiCollectionSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionSnapshot instancesGetSnapshots(Integer id, String fields) throws ApiException {
        ApiResponse<ApiCollectionSnapshot> resp = instancesGetSnapshotsWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns instance snapshots
     *
     * @param id     Instance identifier (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionSnapshot> instancesGetSnapshotsWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = instancesGetSnapshotsValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionSnapshot>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns instance snapshots (asynchronously)
     *
     * @param id       Instance identifier (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesGetSnapshotsAsync(Integer id, String fields, final ApiCallback<ApiCollectionSnapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesGetSnapshotsValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionSnapshot>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for instancesPostSnapshot
     *
     * @param id                      Instance id (required)
     * @param command                 Create snapshot command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesPostSnapshotCall(Integer id, CreateUpdateSnapshotCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/instances/{id}/snapshots"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesPostSnapshotValidateBeforeCall(Integer id, CreateUpdateSnapshotCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesPostSnapshot(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling instancesPostSnapshot(Async)");
        }


        com.squareup.okhttp.Call call = instancesPostSnapshotCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates snapshot
     *
     * @param id      Instance id (required)
     * @param command Create snapshot command (required)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket instancesPostSnapshot(Integer id, CreateUpdateSnapshotCommand command) throws ApiException {
        ApiResponse<Ticket> resp = instancesPostSnapshotWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Creates snapshot
     *
     * @param id      Instance id (required)
     * @param command Create snapshot command (required)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> instancesPostSnapshotWithHttpInfo(Integer id, CreateUpdateSnapshotCommand command) throws ApiException {
        com.squareup.okhttp.Call call = instancesPostSnapshotValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<Ticket>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates snapshot (asynchronously)
     *
     * @param id       Instance id (required)
     * @param command  Create snapshot command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesPostSnapshotAsync(Integer id, CreateUpdateSnapshotCommand command, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesPostSnapshotValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for snapshotsDelete
     *
     * @param id                      Snapshot id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call snapshotsDeleteCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/snapshots/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call snapshotsDeleteValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling snapshotsDelete(Async)");
        }


        com.squareup.okhttp.Call call = snapshotsDeleteCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete snapshot
     *
     * @param id Snapshot id (required)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket snapshotsDelete(Integer id) throws ApiException {
        ApiResponse<Ticket> resp = snapshotsDeleteWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete snapshot
     *
     * @param id Snapshot id (required)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> snapshotsDeleteWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = snapshotsDeleteValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Ticket>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete snapshot (asynchronously)
     *
     * @param id       Snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call snapshotsDeleteAsync(Integer id, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = snapshotsDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for snapshotsGet
     *
     * @param instanceId              Instance id (optional)
     * @param query                   Query (optional)
     * @param pageSize                Page size (optional)
     * @param pageNumber              Page number (optional)
     * @param orderBy                 Order by (optional)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call snapshotsGetCall(Integer instanceId, String query, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/snapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (instanceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("instanceId", instanceId));
        if (query != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (pageSize != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageNumber != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (orderBy != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call snapshotsGetValidateBeforeCall(Integer instanceId, String query, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = snapshotsGetCall(instanceId, query, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns snapshot collection
     * Acceptable order values are: CreationDate, Description, IsCurrent, Name, Instance.
     *
     * @param instanceId Instance id (optional)
     * @param query      Query (optional)
     * @param pageSize   Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy    Order by (optional)
     * @param fields     Response fields filter (optional)
     * @return ApiCollectionSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionSnapshot snapshotsGet(Integer instanceId, String query, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        ApiResponse<ApiCollectionSnapshot> resp = snapshotsGetWithHttpInfo(instanceId, query, pageSize, pageNumber, orderBy, fields);
        return resp.getData();
    }

    /**
     * Returns snapshot collection
     * Acceptable order values are: CreationDate, Description, IsCurrent, Name, Instance.
     *
     * @param instanceId Instance id (optional)
     * @param query      Query (optional)
     * @param pageSize   Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy    Order by (optional)
     * @param fields     Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionSnapshot> snapshotsGetWithHttpInfo(Integer instanceId, String query, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        com.squareup.okhttp.Call call = snapshotsGetValidateBeforeCall(instanceId, query, pageSize, pageNumber, orderBy, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionSnapshot>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns snapshot collection (asynchronously)
     * Acceptable order values are: CreationDate, Description, IsCurrent, Name, Instance.
     *
     * @param instanceId Instance id (optional)
     * @param query      Query (optional)
     * @param pageSize   Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy    Order by (optional)
     * @param fields     Response fields filter (optional)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call snapshotsGetAsync(Integer instanceId, String query, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ApiCallback<ApiCollectionSnapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = snapshotsGetValidateBeforeCall(instanceId, query, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionSnapshot>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for snapshotsGet_0
     *
     * @param id                      Snapshot id (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call snapshotsGet_0Call(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/snapshots/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call snapshotsGet_0ValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling snapshotsGet_0(Async)");
        }


        com.squareup.okhttp.Call call = snapshotsGet_0Call(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets snapshot
     *
     * @param id     Snapshot id (required)
     * @param fields Response fields filter (optional)
     * @return Snapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Snapshot snapshotsGet_0(Integer id, String fields) throws ApiException {
        ApiResponse<Snapshot> resp = snapshotsGet_0WithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Gets snapshot
     *
     * @param id     Snapshot id (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;Snapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Snapshot> snapshotsGet_0WithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = snapshotsGet_0ValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<Snapshot>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets snapshot (asynchronously)
     *
     * @param id       Snapshot id (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call snapshotsGet_0Async(Integer id, String fields, final ApiCallback<Snapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = snapshotsGet_0ValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Snapshot>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for snapshotsPut
     *
     * @param id                      Snapshot id (required)
     * @param command                 Update snapshot command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call snapshotsPutCall(Integer id, CreateUpdateSnapshotCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/snapshots/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call snapshotsPutValidateBeforeCall(Integer id, CreateUpdateSnapshotCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling snapshotsPut(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling snapshotsPut(Async)");
        }


        com.squareup.okhttp.Call call = snapshotsPutCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update snapshot
     *
     * @param id      Snapshot id (required)
     * @param command Update snapshot command (required)
     * @return Snapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Snapshot snapshotsPut(Integer id, CreateUpdateSnapshotCommand command) throws ApiException {
        ApiResponse<Snapshot> resp = snapshotsPutWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Update snapshot
     *
     * @param id      Snapshot id (required)
     * @param command Update snapshot command (required)
     * @return ApiResponse&lt;Snapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Snapshot> snapshotsPutWithHttpInfo(Integer id, CreateUpdateSnapshotCommand command) throws ApiException {
        com.squareup.okhttp.Call call = snapshotsPutValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<Snapshot>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update snapshot (asynchronously)
     *
     * @param id       Snapshot id (required)
     * @param command  Update snapshot command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call snapshotsPutAsync(Integer id, CreateUpdateSnapshotCommand command, final ApiCallback<Snapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = snapshotsPutValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Snapshot>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for snapshotsRestore
     *
     * @param id                      Snapshot id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call snapshotsRestoreCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/snapshots/{id}/restore_ticket"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call snapshotsRestoreValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling snapshotsRestore(Async)");
        }


        com.squareup.okhttp.Call call = snapshotsRestoreCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Restore snapshot
     *
     * @param id Snapshot id (required)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket snapshotsRestore(Integer id) throws ApiException {
        ApiResponse<Ticket> resp = snapshotsRestoreWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Restore snapshot
     *
     * @param id Snapshot id (required)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> snapshotsRestoreWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = snapshotsRestoreValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Ticket>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restore snapshot (asynchronously)
     *
     * @param id       Snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call snapshotsRestoreAsync(Integer id, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = snapshotsRestoreValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
