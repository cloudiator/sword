/*
 * Oktawave API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.oktawave.api.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Convert instance to template command
 */
@ApiModel(description = "Convert instance to template command")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-25T12:05:03.973+02:00")
public class ConvertInstanceToTemplateCommand {
  @SerializedName("TemplateName")
  private String templateName = null;

  @SerializedName("TemplateDescriptions")
  private List<TemplateDescription> templateDescriptions = new ArrayList<TemplateDescription>();

  @SerializedName("TemplateIcon")
  private TemplateIcon templateIcon = null;

  @SerializedName("TemplateVersion")
  private String templateVersion = null;

  @SerializedName("TemplateSystemCategoryId")
  private Integer templateSystemCategoryId = null;

  @SerializedName("TemplateWindowsTypeId")
  private Integer templateWindowsTypeId = null;

  @SerializedName("TemplateDefaultTypeId")
  private Integer templateDefaultTypeId = null;

  @SerializedName("TemplateMinimumTypeId")
  private Integer templateMinimumTypeId = null;

  @SerializedName("TemplateWithInitialization")
  private Boolean templateWithInitialization = null;

  @SerializedName("TechSupportPassword")
  private String techSupportPassword = null;

  public ConvertInstanceToTemplateCommand templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

   /**
   * Template name
   * @return templateName
  **/
  @ApiModelProperty(required = true, value = "Template name")
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }

  public ConvertInstanceToTemplateCommand templateDescriptions(List<TemplateDescription> templateDescriptions) {
    this.templateDescriptions = templateDescriptions;
    return this;
  }

  public ConvertInstanceToTemplateCommand addTemplateDescriptionsItem(TemplateDescription templateDescriptionsItem) {
    this.templateDescriptions.add(templateDescriptionsItem);
    return this;
  }

   /**
   * Template descriptions
   * @return templateDescriptions
  **/
  @ApiModelProperty(required = true, value = "Template descriptions")
  public List<TemplateDescription> getTemplateDescriptions() {
    return templateDescriptions;
  }

  public void setTemplateDescriptions(List<TemplateDescription> templateDescriptions) {
    this.templateDescriptions = templateDescriptions;
  }

  public ConvertInstanceToTemplateCommand templateIcon(TemplateIcon templateIcon) {
    this.templateIcon = templateIcon;
    return this;
  }

   /**
   * Template icon
   * @return templateIcon
  **/
  @ApiModelProperty(value = "Template icon")
  public TemplateIcon getTemplateIcon() {
    return templateIcon;
  }

  public void setTemplateIcon(TemplateIcon templateIcon) {
    this.templateIcon = templateIcon;
  }

  public ConvertInstanceToTemplateCommand templateVersion(String templateVersion) {
    this.templateVersion = templateVersion;
    return this;
  }

   /**
   * Template version
   * @return templateVersion
  **/
  @ApiModelProperty(required = true, value = "Template version")
  public String getTemplateVersion() {
    return templateVersion;
  }

  public void setTemplateVersion(String templateVersion) {
    this.templateVersion = templateVersion;
  }

  public ConvertInstanceToTemplateCommand templateSystemCategoryId(Integer templateSystemCategoryId) {
    this.templateSystemCategoryId = templateSystemCategoryId;
    return this;
  }

   /**
   * Template system category id
   * @return templateSystemCategoryId
  **/
  @ApiModelProperty(required = true, value = "Template system category id")
  public Integer getTemplateSystemCategoryId() {
    return templateSystemCategoryId;
  }

  public void setTemplateSystemCategoryId(Integer templateSystemCategoryId) {
    this.templateSystemCategoryId = templateSystemCategoryId;
  }

  public ConvertInstanceToTemplateCommand templateWindowsTypeId(Integer templateWindowsTypeId) {
    this.templateWindowsTypeId = templateWindowsTypeId;
    return this;
  }

   /**
   * Template windows type id
   * @return templateWindowsTypeId
  **/
  @ApiModelProperty(value = "Template windows type id")
  public Integer getTemplateWindowsTypeId() {
    return templateWindowsTypeId;
  }

  public void setTemplateWindowsTypeId(Integer templateWindowsTypeId) {
    this.templateWindowsTypeId = templateWindowsTypeId;
  }

  public ConvertInstanceToTemplateCommand templateDefaultTypeId(Integer templateDefaultTypeId) {
    this.templateDefaultTypeId = templateDefaultTypeId;
    return this;
  }

   /**
   * Template default type id
   * @return templateDefaultTypeId
  **/
  @ApiModelProperty(required = true, value = "Template default type id")
  public Integer getTemplateDefaultTypeId() {
    return templateDefaultTypeId;
  }

  public void setTemplateDefaultTypeId(Integer templateDefaultTypeId) {
    this.templateDefaultTypeId = templateDefaultTypeId;
  }

  public ConvertInstanceToTemplateCommand templateMinimumTypeId(Integer templateMinimumTypeId) {
    this.templateMinimumTypeId = templateMinimumTypeId;
    return this;
  }

   /**
   * Template minimum type id
   * @return templateMinimumTypeId
  **/
  @ApiModelProperty(required = true, value = "Template minimum type id")
  public Integer getTemplateMinimumTypeId() {
    return templateMinimumTypeId;
  }

  public void setTemplateMinimumTypeId(Integer templateMinimumTypeId) {
    this.templateMinimumTypeId = templateMinimumTypeId;
  }

  public ConvertInstanceToTemplateCommand templateWithInitialization(Boolean templateWithInitialization) {
    this.templateWithInitialization = templateWithInitialization;
    return this;
  }

   /**
   * Template with initialization
   * @return templateWithInitialization
  **/
  @ApiModelProperty(required = true, value = "Template with initialization")
  public Boolean isTemplateWithInitialization() {
    return templateWithInitialization;
  }

  public void setTemplateWithInitialization(Boolean templateWithInitialization) {
    this.templateWithInitialization = templateWithInitialization;
  }

  public ConvertInstanceToTemplateCommand techSupportPassword(String techSupportPassword) {
    this.techSupportPassword = techSupportPassword;
    return this;
  }

   /**
   * Account &#39;tech-support&#39; password. Required for templates with initialization
   * @return techSupportPassword
  **/
  @ApiModelProperty(value = "Account 'tech-support' password. Required for templates with initialization")
  public String getTechSupportPassword() {
    return techSupportPassword;
  }

  public void setTechSupportPassword(String techSupportPassword) {
    this.techSupportPassword = techSupportPassword;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertInstanceToTemplateCommand convertInstanceToTemplateCommand = (ConvertInstanceToTemplateCommand) o;
    return Objects.equals(this.templateName, convertInstanceToTemplateCommand.templateName) &&
        Objects.equals(this.templateDescriptions, convertInstanceToTemplateCommand.templateDescriptions) &&
        Objects.equals(this.templateIcon, convertInstanceToTemplateCommand.templateIcon) &&
        Objects.equals(this.templateVersion, convertInstanceToTemplateCommand.templateVersion) &&
        Objects.equals(this.templateSystemCategoryId, convertInstanceToTemplateCommand.templateSystemCategoryId) &&
        Objects.equals(this.templateWindowsTypeId, convertInstanceToTemplateCommand.templateWindowsTypeId) &&
        Objects.equals(this.templateDefaultTypeId, convertInstanceToTemplateCommand.templateDefaultTypeId) &&
        Objects.equals(this.templateMinimumTypeId, convertInstanceToTemplateCommand.templateMinimumTypeId) &&
        Objects.equals(this.templateWithInitialization, convertInstanceToTemplateCommand.templateWithInitialization) &&
        Objects.equals(this.techSupportPassword, convertInstanceToTemplateCommand.techSupportPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateName, templateDescriptions, templateIcon, templateVersion, templateSystemCategoryId, templateWindowsTypeId, templateDefaultTypeId, templateMinimumTypeId, templateWithInitialization, techSupportPassword);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertInstanceToTemplateCommand {\n");
    
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    templateDescriptions: ").append(toIndentedString(templateDescriptions)).append("\n");
    sb.append("    templateIcon: ").append(toIndentedString(templateIcon)).append("\n");
    sb.append("    templateVersion: ").append(toIndentedString(templateVersion)).append("\n");
    sb.append("    templateSystemCategoryId: ").append(toIndentedString(templateSystemCategoryId)).append("\n");
    sb.append("    templateWindowsTypeId: ").append(toIndentedString(templateWindowsTypeId)).append("\n");
    sb.append("    templateDefaultTypeId: ").append(toIndentedString(templateDefaultTypeId)).append("\n");
    sb.append("    templateMinimumTypeId: ").append(toIndentedString(templateMinimumTypeId)).append("\n");
    sb.append("    templateWithInitialization: ").append(toIndentedString(templateWithInitialization)).append("\n");
    sb.append("    techSupportPassword: ").append(toIndentedString(techSupportPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

