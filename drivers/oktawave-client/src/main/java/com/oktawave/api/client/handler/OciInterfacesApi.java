/*
 * Oktawave API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.oktawave.api.client.handler;

import com.google.gson.reflect.TypeToken;
import com.oktawave.api.client.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.Object;

public class OciInterfacesApi {
    private ApiClient apiClient;

    public OciInterfacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OciInterfacesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for instancesAttachOpn
     * @param id Instance identifier (required)
     * @param command Attach instance to OPN command (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesAttachOpnCall(Integer id, AttachInstanceToOpnCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/instances/{id}/attach_opn_ticket"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesAttachOpnValidateBeforeCall(Integer id, AttachInstanceToOpnCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesAttachOpn(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling instancesAttachOpn(Async)");
        }


        com.squareup.okhttp.Call call = instancesAttachOpnCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach instance to OPN
     *
     * @param id Instance identifier (required)
     * @param command Attach instance to OPN command (required)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket instancesAttachOpn(Integer id, AttachInstanceToOpnCommand command) throws ApiException {
        ApiResponse<Ticket> resp = instancesAttachOpnWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Attach instance to OPN
     *
     * @param id Instance identifier (required)
     * @param command Attach instance to OPN command (required)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> instancesAttachOpnWithHttpInfo(Integer id, AttachInstanceToOpnCommand command) throws ApiException {
        com.squareup.okhttp.Call call = instancesAttachOpnValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Attach instance to OPN (asynchronously)
     *
     * @param id Instance identifier (required)
     * @param command Attach instance to OPN command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesAttachOpnAsync(Integer id, AttachInstanceToOpnCommand command, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesAttachOpnValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesBookNewIp
     * @param command  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesBookNewIpCall(BookIpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/instances/ip_addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesBookNewIpValidateBeforeCall(BookIpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling instancesBookNewIp(Async)");
        }


        com.squareup.okhttp.Call call = instancesBookNewIpCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Book new IP address
     *
     * @param command  (required)
     * @return Ip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ip instancesBookNewIp(BookIpCommand command) throws ApiException {
        ApiResponse<Ip> resp = instancesBookNewIpWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Book new IP address
     *
     * @param command  (required)
     * @return ApiResponse&lt;Ip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ip> instancesBookNewIpWithHttpInfo(BookIpCommand command) throws ApiException {
        com.squareup.okhttp.Call call = instancesBookNewIpValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<Ip>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Book new IP address (asynchronously)
     *
     * @param command  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesBookNewIpAsync(BookIpCommand command, final ApiCallback<Ip> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesBookNewIpValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ip>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesChangeOpn
     * @param id Instance identifier (required)
     * @param command Change OPN command (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesChangeOpnCall(Integer id, ChangeOpnCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/instances/{id}/change_opn_ticket"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesChangeOpnValidateBeforeCall(Integer id, ChangeOpnCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesChangeOpn(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling instancesChangeOpn(Async)");
        }


        com.squareup.okhttp.Call call = instancesChangeOpnCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change OPN on network interface
     *
     * @param id Instance identifier (required)
     * @param command Change OPN command (required)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket instancesChangeOpn(Integer id, ChangeOpnCommand command) throws ApiException {
        ApiResponse<Ticket> resp = instancesChangeOpnWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Change OPN on network interface
     *
     * @param id Instance identifier (required)
     * @param command Change OPN command (required)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> instancesChangeOpnWithHttpInfo(Integer id, ChangeOpnCommand command) throws ApiException {
        com.squareup.okhttp.Call call = instancesChangeOpnValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change OPN on network interface (asynchronously)
     *
     * @param id Instance identifier (required)
     * @param command Change OPN command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesChangeOpnAsync(Integer id, ChangeOpnCommand command, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesChangeOpnValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesDeleteIp
     * @param id IP address identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesDeleteIpCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/ip_addresses/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesDeleteIpValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesDeleteIp(Async)");
        }


        com.squareup.okhttp.Call call = instancesDeleteIpCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes IP address
     *
     * @param id IP address identifier (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object instancesDeleteIp(Integer id) throws ApiException {
        ApiResponse<Object> resp = instancesDeleteIpWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Deletes IP address
     *
     * @param id IP address identifier (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> instancesDeleteIpWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = instancesDeleteIpValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes IP address (asynchronously)
     *
     * @param id IP address identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesDeleteIpAsync(Integer id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesDeleteIpValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesDetachFromOpn
     * @param id Instance identifier (required)
     * @param command Detach instance from OPN command (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesDetachFromOpnCall(Integer id, DetachInstanceFromOpnCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/instances/{id}/detach_opn_ticket"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesDetachFromOpnValidateBeforeCall(Integer id, DetachInstanceFromOpnCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesDetachFromOpn(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling instancesDetachFromOpn(Async)");
        }


        com.squareup.okhttp.Call call = instancesDetachFromOpnCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Detach instance from OPN
     *
     * @param id Instance identifier (required)
     * @param command Detach instance from OPN command (required)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket instancesDetachFromOpn(Integer id, DetachInstanceFromOpnCommand command) throws ApiException {
        ApiResponse<Ticket> resp = instancesDetachFromOpnWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Detach instance from OPN
     *
     * @param id Instance identifier (required)
     * @param command Detach instance from OPN command (required)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> instancesDetachFromOpnWithHttpInfo(Integer id, DetachInstanceFromOpnCommand command) throws ApiException {
        com.squareup.okhttp.Call call = instancesDetachFromOpnValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Detach instance from OPN (asynchronously)
     *
     * @param id Instance identifier (required)
     * @param command Detach instance from OPN command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesDetachFromOpnAsync(Integer id, DetachInstanceFromOpnCommand command, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesDetachFromOpnValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesGetAllNetworkInterfaces
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesGetAllNetworkInterfacesCall(Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/interfaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesGetAllNetworkInterfacesValidateBeforeCall(Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = instancesGetAllNetworkInterfacesCall(pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns all network interfaces
     * Acceptable order values are: MacAddress, Instance, Opn, Address
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return NetworkInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkInterface instancesGetAllNetworkInterfaces(Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        ApiResponse<NetworkInterface> resp = instancesGetAllNetworkInterfacesWithHttpInfo(pageSize, pageNumber, orderBy, fields);
        return resp.getData();
    }

    /**
     * Returns all network interfaces
     * Acceptable order values are: MacAddress, Instance, Opn, Address
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;NetworkInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkInterface> instancesGetAllNetworkInterfacesWithHttpInfo(Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        com.squareup.okhttp.Call call = instancesGetAllNetworkInterfacesValidateBeforeCall(pageSize, pageNumber, orderBy, fields, null, null);
        Type localVarReturnType = new TypeToken<NetworkInterface>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all network interfaces (asynchronously)
     * Acceptable order values are: MacAddress, Instance, Opn, Address
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesGetAllNetworkInterfacesAsync(Integer pageSize, Integer pageNumber, String orderBy, String fields, final ApiCallback<NetworkInterface> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesGetAllNetworkInterfacesValidateBeforeCall(pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkInterface>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesGetInstanceIp
     * @param id  (required)
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesGetInstanceIpCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/ip_addresses/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesGetInstanceIpValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesGetInstanceIp(Async)");
        }


        com.squareup.okhttp.Call call = instancesGetInstanceIpCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns IP by id
     *
     * @param id  (required)
     * @param fields Response fields filter (optional)
     * @return Ip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ip instancesGetInstanceIp(Integer id, String fields) throws ApiException {
        ApiResponse<Ip> resp = instancesGetInstanceIpWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns IP by id
     *
     * @param id  (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;Ip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ip> instancesGetInstanceIpWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = instancesGetInstanceIpValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<Ip>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns IP by id (asynchronously)
     *
     * @param id  (required)
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesGetInstanceIpAsync(Integer id, String fields, final ApiCallback<Ip> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesGetInstanceIpValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ip>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesGetInstanceIps
     * @param id Instance id (required)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesGetInstanceIpsCall(Integer id, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{id}/ip_addresses"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesGetInstanceIpsValidateBeforeCall(Integer id, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesGetInstanceIps(Async)");
        }


        com.squareup.okhttp.Call call = instancesGetInstanceIpsCall(id, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns instance public ip list
     * Acceptable order values are: Address, Subregion, Comment, Type
     * @param id Instance id (required)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiCollectionIp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionIp instancesGetInstanceIps(Integer id, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        ApiResponse<ApiCollectionIp> resp = instancesGetInstanceIpsWithHttpInfo(id, pageSize, pageNumber, orderBy, fields);
        return resp.getData();
    }

    /**
     * Returns instance public ip list
     * Acceptable order values are: Address, Subregion, Comment, Type
     * @param id Instance id (required)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionIp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionIp> instancesGetInstanceIpsWithHttpInfo(Integer id, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        com.squareup.okhttp.Call call = instancesGetInstanceIpsValidateBeforeCall(id, pageSize, pageNumber, orderBy, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionIp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns instance public ip list (asynchronously)
     * Acceptable order values are: Address, Subregion, Comment, Type
     * @param id Instance id (required)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesGetInstanceIpsAsync(Integer id, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ApiCallback<ApiCollectionIp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesGetInstanceIpsValidateBeforeCall(id, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionIp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesGetInstanceNetworkInterfaces
     * @param id Instance id (required)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesGetInstanceNetworkInterfacesCall(Integer id, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{id}/interfaces"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesGetInstanceNetworkInterfacesValidateBeforeCall(Integer id, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesGetInstanceNetworkInterfaces(Async)");
        }


        com.squareup.okhttp.Call call = instancesGetInstanceNetworkInterfacesCall(id, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns instance network interfaces
     * Acceptable order values are: MacAddress, Instance, Opn, Address
     * @param id Instance id (required)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return NetworkInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkInterface instancesGetInstanceNetworkInterfaces(Integer id, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        ApiResponse<NetworkInterface> resp = instancesGetInstanceNetworkInterfacesWithHttpInfo(id, pageSize, pageNumber, orderBy, fields);
        return resp.getData();
    }

    /**
     * Returns instance network interfaces
     * Acceptable order values are: MacAddress, Instance, Opn, Address
     * @param id Instance id (required)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;NetworkInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkInterface> instancesGetInstanceNetworkInterfacesWithHttpInfo(Integer id, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        com.squareup.okhttp.Call call = instancesGetInstanceNetworkInterfacesValidateBeforeCall(id, pageSize, pageNumber, orderBy, fields, null, null);
        Type localVarReturnType = new TypeToken<NetworkInterface>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns instance network interfaces (asynchronously)
     * Acceptable order values are: MacAddress, Instance, Opn, Address
     * @param id Instance id (required)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesGetInstanceNetworkInterfacesAsync(Integer id, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ApiCallback<NetworkInterface> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesGetInstanceNetworkInterfacesValidateBeforeCall(id, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkInterface>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesGetIps
     * @param instanceId Instance id (optional)
     * @param onlyFree Only free (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesGetIpsCall(Integer instanceId, Boolean onlyFree, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/ip_addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (instanceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instanceId", instanceId));
        if (onlyFree != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyFree", onlyFree));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesGetIpsValidateBeforeCall(Integer instanceId, Boolean onlyFree, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = instancesGetIpsCall(instanceId, onlyFree, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns public ip list
     * Acceptable order values are: Address, Subregion, Comment, Type.
     * @param instanceId Instance id (optional)
     * @param onlyFree Only free (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiCollectionIp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionIp instancesGetIps(Integer instanceId, Boolean onlyFree, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        ApiResponse<ApiCollectionIp> resp = instancesGetIpsWithHttpInfo(instanceId, onlyFree, pageSize, pageNumber, orderBy, fields);
        return resp.getData();
    }

    /**
     * Returns public ip list
     * Acceptable order values are: Address, Subregion, Comment, Type.
     * @param instanceId Instance id (optional)
     * @param onlyFree Only free (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionIp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionIp> instancesGetIpsWithHttpInfo(Integer instanceId, Boolean onlyFree, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        com.squareup.okhttp.Call call = instancesGetIpsValidateBeforeCall(instanceId, onlyFree, pageSize, pageNumber, orderBy, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionIp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns public ip list (asynchronously)
     * Acceptable order values are: Address, Subregion, Comment, Type.
     * @param instanceId Instance id (optional)
     * @param onlyFree Only free (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesGetIpsAsync(Integer instanceId, Boolean onlyFree, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ApiCallback<ApiCollectionIp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesGetIpsValidateBeforeCall(instanceId, onlyFree, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionIp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesGetOpns
     * @param id Instance id (required)
     * @param query Query (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesGetOpnsCall(Integer id, String query, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{id}/opns"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesGetOpnsValidateBeforeCall(Integer id, String query, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesGetOpns(Async)");
        }


        com.squareup.okhttp.Call call = instancesGetOpnsCall(id, query, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns instance OPN&#39;s
     * Acceptable order values are: Name
     * @param id Instance id (required)
     * @param query Query (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiCollectionOpn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionOpn instancesGetOpns(Integer id, String query, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        ApiResponse<ApiCollectionOpn> resp = instancesGetOpnsWithHttpInfo(id, query, pageSize, pageNumber, orderBy, fields);
        return resp.getData();
    }

    /**
     * Returns instance OPN&#39;s
     * Acceptable order values are: Name
     * @param id Instance id (required)
     * @param query Query (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionOpn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionOpn> instancesGetOpnsWithHttpInfo(Integer id, String query, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        com.squareup.okhttp.Call call = instancesGetOpnsValidateBeforeCall(id, query, pageSize, pageNumber, orderBy, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionOpn>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns instance OPN&#39;s (asynchronously)
     * Acceptable order values are: Name
     * @param id Instance id (required)
     * @param query Query (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesGetOpnsAsync(Integer id, String query, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ApiCallback<ApiCollectionOpn> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesGetOpnsValidateBeforeCall(id, query, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionOpn>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesPostAttachIpTicket
     * @param id Instance identifier (required)
     * @param ipId IP address identifier. Optional value, if null random ip will be attached. (optional)
     * @param ipV6 If attach IPv6 only. Optional value, if null IPv4 and IPv6 will be attached. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesPostAttachIpTicketCall(Integer id, Integer ipId, Boolean ipV6, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{id}/attach_ip_ticket"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ipId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ipId", ipId));
        if (ipV6 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ipV6", ipV6));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesPostAttachIpTicketValidateBeforeCall(Integer id, Integer ipId, Boolean ipV6, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesPostAttachIpTicket(Async)");
        }


        com.squareup.okhttp.Call call = instancesPostAttachIpTicketCall(id, ipId, ipV6, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach public IP to instance
     *
     * @param id Instance identifier (required)
     * @param ipId IP address identifier. Optional value, if null random ip will be attached. (optional)
     * @param ipV6 If attach IPv6 only. Optional value, if null IPv4 and IPv6 will be attached. (optional)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket instancesPostAttachIpTicket(Integer id, Integer ipId, Boolean ipV6) throws ApiException {
        ApiResponse<Ticket> resp = instancesPostAttachIpTicketWithHttpInfo(id, ipId, ipV6);
        return resp.getData();
    }

    /**
     * Attach public IP to instance
     *
     * @param id Instance identifier (required)
     * @param ipId IP address identifier. Optional value, if null random ip will be attached. (optional)
     * @param ipV6 If attach IPv6 only. Optional value, if null IPv4 and IPv6 will be attached. (optional)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> instancesPostAttachIpTicketWithHttpInfo(Integer id, Integer ipId, Boolean ipV6) throws ApiException {
        com.squareup.okhttp.Call call = instancesPostAttachIpTicketValidateBeforeCall(id, ipId, ipV6, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Attach public IP to instance (asynchronously)
     *
     * @param id Instance identifier (required)
     * @param ipId IP address identifier. Optional value, if null random ip will be attached. (optional)
     * @param ipV6 If attach IPv6 only. Optional value, if null IPv4 and IPv6 will be attached. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesPostAttachIpTicketAsync(Integer id, Integer ipId, Boolean ipV6, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesPostAttachIpTicketValidateBeforeCall(id, ipId, ipV6, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesPostDetachIpTicket
     * @param id Instance identifier (required)
     * @param ipId IP address identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesPostDetachIpTicketCall(Integer id, Integer ipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{id}/detach_ip_ticket"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ipId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ipId", ipId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesPostDetachIpTicketValidateBeforeCall(Integer id, Integer ipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesPostDetachIpTicket(Async)");
        }

        // verify the required parameter 'ipId' is set
        if (ipId == null) {
            throw new ApiException("Missing the required parameter 'ipId' when calling instancesPostDetachIpTicket(Async)");
        }


        com.squareup.okhttp.Call call = instancesPostDetachIpTicketCall(id, ipId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Detach public IP from instance
     *
     * @param id Instance identifier (required)
     * @param ipId IP address identifier (required)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket instancesPostDetachIpTicket(Integer id, Integer ipId) throws ApiException {
        ApiResponse<Ticket> resp = instancesPostDetachIpTicketWithHttpInfo(id, ipId);
        return resp.getData();
    }

    /**
     * Detach public IP from instance
     *
     * @param id Instance identifier (required)
     * @param ipId IP address identifier (required)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> instancesPostDetachIpTicketWithHttpInfo(Integer id, Integer ipId) throws ApiException {
        com.squareup.okhttp.Call call = instancesPostDetachIpTicketValidateBeforeCall(id, ipId, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Detach public IP from instance (asynchronously)
     *
     * @param id Instance identifier (required)
     * @param ipId IP address identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesPostDetachIpTicketAsync(Integer id, Integer ipId, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesPostDetachIpTicketValidateBeforeCall(id, ipId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesUpdateIp
     * @param id  (required)
     * @param command  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesUpdateIpCall(Integer id, UpdateIpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/instances/ip_addresses/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesUpdateIpValidateBeforeCall(Integer id, UpdateIpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesUpdateIp(Async)");
        }
        
        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling instancesUpdateIp(Async)");
        }
        

        com.squareup.okhttp.Call call = instancesUpdateIpCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates IP address
     * 
     * @param id  (required)
     * @param command  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object instancesUpdateIp(Integer id, UpdateIpCommand command) throws ApiException {
        ApiResponse<Object> resp = instancesUpdateIpWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates IP address
     * 
     * @param id  (required)
     * @param command  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> instancesUpdateIpWithHttpInfo(Integer id, UpdateIpCommand command) throws ApiException {
        com.squareup.okhttp.Call call = instancesUpdateIpValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates IP address (asynchronously)
     * 
     * @param id  (required)
     * @param command  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesUpdateIpAsync(Integer id, UpdateIpCommand command, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesUpdateIpValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
