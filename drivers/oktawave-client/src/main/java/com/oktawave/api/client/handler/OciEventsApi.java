/*
 * Oktawave API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.oktawave.api.client.handler;

import com.google.gson.reflect.TypeToken;
import com.oktawave.api.client.model.ApiCollectionInstanceEvent;
import com.oktawave.api.client.model.DeleteEventsCommand;
import org.threeten.bp.OffsetDateTime;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OciEventsApi {
    private ApiClient apiClient;

    public OciEventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OciEventsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for eventsDelete
     * @param id Event id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsDeleteCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsDeleteValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventsDelete(Async)");
        }


        com.squareup.okhttp.Call call = eventsDeleteCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes event
     *
     * @param id Event id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void eventsDelete(Integer id) throws ApiException {
        eventsDeleteWithHttpInfo(id);
    }

    /**
     * Deletes event
     *
     * @param id Event id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> eventsDeleteWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = eventsDeleteValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes event (asynchronously)
     *
     * @param id Event id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsDeleteAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for eventsGetEvent
     * @param id Event id (required)
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsGetEventCall(Long id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsGetEventValidateBeforeCall(Long id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventsGetEvent(Async)");
        }


        com.squareup.okhttp.Call call = eventsGetEventCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns instance event
     *
     * @param id Event id (required)
     * @param fields Response fields filter (optional)
     * @return ApiCollectionInstanceEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionInstanceEvent eventsGetEvent(Long id, String fields) throws ApiException {
        ApiResponse<ApiCollectionInstanceEvent> resp = eventsGetEventWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns instance event
     *
     * @param id Event id (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionInstanceEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionInstanceEvent> eventsGetEventWithHttpInfo(Long id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = eventsGetEventValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionInstanceEvent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns instance event (asynchronously)
     *
     * @param id Event id (required)
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsGetEventAsync(Long id, String fields, final ApiCallback<ApiCollectionInstanceEvent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsGetEventValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionInstanceEvent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsGetEvents
     * @param typeIds Type IDs (optional)
     * @param statusIds Status IDs (optional)
     * @param dateFrom Date from (optional)
     * @param dateTo Date to (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsGetEventsCall(String typeIds, String statusIds, OffsetDateTime dateFrom, OffsetDateTime dateTo, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (typeIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("typeIds", typeIds));
        if (statusIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statusIds", statusIds));
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateFrom", dateFrom));
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateTo", dateTo));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsGetEventsValidateBeforeCall(String typeIds, String statusIds, OffsetDateTime dateFrom, OffsetDateTime dateTo, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = eventsGetEventsCall(typeIds, statusIds, dateFrom, dateTo, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns all instances events
     *
     * @param typeIds Type IDs (optional)
     * @param statusIds Status IDs (optional)
     * @param dateFrom Date from (optional)
     * @param dateTo Date to (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiCollectionInstanceEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionInstanceEvent eventsGetEvents(String typeIds, String statusIds, OffsetDateTime dateFrom, OffsetDateTime dateTo, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        ApiResponse<ApiCollectionInstanceEvent> resp = eventsGetEventsWithHttpInfo(typeIds, statusIds, dateFrom, dateTo, pageSize, pageNumber, orderBy, fields);
        return resp.getData();
    }

    /**
     * Returns all instances events
     *
     * @param typeIds Type IDs (optional)
     * @param statusIds Status IDs (optional)
     * @param dateFrom Date from (optional)
     * @param dateTo Date to (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionInstanceEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionInstanceEvent> eventsGetEventsWithHttpInfo(String typeIds, String statusIds, OffsetDateTime dateFrom, OffsetDateTime dateTo, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        com.squareup.okhttp.Call call = eventsGetEventsValidateBeforeCall(typeIds, statusIds, dateFrom, dateTo, pageSize, pageNumber, orderBy, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionInstanceEvent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all instances events (asynchronously)
     *
     * @param typeIds Type IDs (optional)
     * @param statusIds Status IDs (optional)
     * @param dateFrom Date from (optional)
     * @param dateTo Date to (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsGetEventsAsync(String typeIds, String statusIds, OffsetDateTime dateFrom, OffsetDateTime dateTo, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ApiCallback<ApiCollectionInstanceEvent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsGetEventsValidateBeforeCall(typeIds, statusIds, dateFrom, dateTo, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionInstanceEvent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instancesDeleteEvents
     * @param id Instance id (required)
     * @param command Delete events command (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesDeleteEventsCall(Integer id, DeleteEventsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/instances/{id}/events"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesDeleteEventsValidateBeforeCall(Integer id, DeleteEventsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesDeleteEvents(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling instancesDeleteEvents(Async)");
        }


        com.squareup.okhttp.Call call = instancesDeleteEventsCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes instance events
     *
     * @param id Instance id (required)
     * @param command Delete events command (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void instancesDeleteEvents(Integer id, DeleteEventsCommand command) throws ApiException {
        instancesDeleteEventsWithHttpInfo(id, command);
    }

    /**
     * Deletes instance events
     *
     * @param id Instance id (required)
     * @param command Delete events command (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> instancesDeleteEventsWithHttpInfo(Integer id, DeleteEventsCommand command) throws ApiException {
        com.squareup.okhttp.Call call = instancesDeleteEventsValidateBeforeCall(id, command, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes instance events (asynchronously)
     *
     * @param id Instance id (required)
     * @param command Delete events command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesDeleteEventsAsync(Integer id, DeleteEventsCommand command, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesDeleteEventsValidateBeforeCall(id, command, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for instancesGetEvents
     * @param id Instance identifier (required)
     * @param userId User id (optional)
     * @param dateFrom Date from (optional)
     * @param dateTo Date to (optional)
     * @param operationTypeId Operation type id (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instancesGetEventsCall(Integer id, Integer userId, OffsetDateTime dateFrom, OffsetDateTime dateTo, Integer operationTypeId, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{id}/events"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateFrom", dateFrom));
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateTo", dateTo));
        if (operationTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operationTypeId", operationTypeId));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instancesGetEventsValidateBeforeCall(Integer id, Integer userId, OffsetDateTime dateFrom, OffsetDateTime dateTo, Integer operationTypeId, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling instancesGetEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = instancesGetEventsCall(id, userId, dateFrom, dateTo, operationTypeId, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns instance events
     * Acceptable order values are: OperationType, User, Date, Instance, OperationStatus
     * @param id Instance identifier (required)
     * @param userId User id (optional)
     * @param dateFrom Date from (optional)
     * @param dateTo Date to (optional)
     * @param operationTypeId Operation type id (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiCollectionInstanceEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionInstanceEvent instancesGetEvents(Integer id, Integer userId, OffsetDateTime dateFrom, OffsetDateTime dateTo, Integer operationTypeId, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        ApiResponse<ApiCollectionInstanceEvent> resp = instancesGetEventsWithHttpInfo(id, userId, dateFrom, dateTo, operationTypeId, pageSize, pageNumber, orderBy, fields);
        return resp.getData();
    }

    /**
     * Returns instance events
     * Acceptable order values are: OperationType, User, Date, Instance, OperationStatus
     * @param id Instance identifier (required)
     * @param userId User id (optional)
     * @param dateFrom Date from (optional)
     * @param dateTo Date to (optional)
     * @param operationTypeId Operation type id (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionInstanceEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionInstanceEvent> instancesGetEventsWithHttpInfo(Integer id, Integer userId, OffsetDateTime dateFrom, OffsetDateTime dateTo, Integer operationTypeId, Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        com.squareup.okhttp.Call call = instancesGetEventsValidateBeforeCall(id, userId, dateFrom, dateTo, operationTypeId, pageSize, pageNumber, orderBy, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionInstanceEvent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns instance events (asynchronously)
     * Acceptable order values are: OperationType, User, Date, Instance, OperationStatus
     * @param id Instance identifier (required)
     * @param userId User id (optional)
     * @param dateFrom Date from (optional)
     * @param dateTo Date to (optional)
     * @param operationTypeId Operation type id (optional)
     * @param pageSize Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy Order by (optional)
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instancesGetEventsAsync(Integer id, Integer userId, OffsetDateTime dateFrom, OffsetDateTime dateTo, Integer operationTypeId, Integer pageSize, Integer pageNumber, String orderBy, String fields, final ApiCallback<ApiCollectionInstanceEvent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instancesGetEventsValidateBeforeCall(id, userId, dateFrom, dateTo, operationTypeId, pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionInstanceEvent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
