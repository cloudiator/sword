/*
 * Oktawave API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.oktawave.api.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Create/update ping health check command
 */
@ApiModel(description = "Create/update ping health check command")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-25T12:05:03.973+02:00")
public class CreateUpdateHealthCheckSmtpCommand {
  @SerializedName("Port")
  private Integer port = 25;

  @SerializedName("ReplyTimeout")
  private Integer replyTimeout = 7000;

  @SerializedName("Timeout")
  private Integer timeout = 7000;

  @SerializedName("ErrorTolerance")
  private Integer errorTolerance = 51;

  @SerializedName("Name")
  private String name = "";

  @SerializedName("Address")
  private String address = "";

  @SerializedName("Interval")
  private Integer interval = 60;

  @SerializedName("Paused")
  private Boolean paused = false;

  @SerializedName("LocationsFailoverEnabled")
  private Boolean locationsFailoverEnabled = true;

  @SerializedName("NotificationTypeIds")
  private List<Integer> notificationTypeIds = null;

  @SerializedName("NotificationEventTypeIds")
  private List<Integer> notificationEventTypeIds = null;

  @SerializedName("NotificationTimeId")
  private Integer notificationTimeId = 1594;

  public CreateUpdateHealthCheckSmtpCommand port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Port
   * minimum: 0
   * maximum: 65535
   * @return port
  **/
  @ApiModelProperty(required = true, value = "Port")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public CreateUpdateHealthCheckSmtpCommand replyTimeout(Integer replyTimeout) {
    this.replyTimeout = replyTimeout;
    return this;
  }

   /**
   * Maximum waiting time for a response [ms]
   * minimum: 1
   * maximum: 120000
   * @return replyTimeout
  **/
  @ApiModelProperty(required = true, value = "Maximum waiting time for a response [ms]")
  public Integer getReplyTimeout() {
    return replyTimeout;
  }

  public void setReplyTimeout(Integer replyTimeout) {
    this.replyTimeout = replyTimeout;
  }

  public CreateUpdateHealthCheckSmtpCommand timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Time the server has to complete the request in [ms]
   * minimum: 10
   * maximum: 120000
   * @return timeout
  **/
  @ApiModelProperty(required = true, value = "Time the server has to complete the request in [ms]")
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }

  public CreateUpdateHealthCheckSmtpCommand errorTolerance(Integer errorTolerance) {
    this.errorTolerance = errorTolerance;
    return this;
  }

   /**
   * How many (%) locations have to report an error to consider it a breakdown
   * minimum: 1
   * maximum: 100
   * @return errorTolerance
  **/
  @ApiModelProperty(required = true, value = "How many (%) locations have to report an error to consider it a breakdown")
  public Integer getErrorTolerance() {
    return errorTolerance;
  }

  public void setErrorTolerance(Integer errorTolerance) {
    this.errorTolerance = errorTolerance;
  }

  public CreateUpdateHealthCheckSmtpCommand name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Health check name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Health check name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CreateUpdateHealthCheckSmtpCommand address(String address) {
    this.address = address;
    return this;
  }

   /**
   * URL or IP address of the monitored service
   * @return address
  **/
  @ApiModelProperty(required = true, value = "URL or IP address of the monitored service")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public CreateUpdateHealthCheckSmtpCommand interval(Integer interval) {
    this.interval = interval;
    return this;
  }

   /**
   * Time interval between health checks, in seconds
   * @return interval
  **/
  @ApiModelProperty(required = true, value = "Time interval between health checks, in seconds")
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }

  public CreateUpdateHealthCheckSmtpCommand paused(Boolean paused) {
    this.paused = paused;
    return this;
  }

   /**
   * Is paused
   * @return paused
  **/
  @ApiModelProperty(required = true, value = "Is paused")
  public Boolean isPaused() {
    return paused;
  }

  public void setPaused(Boolean paused) {
    this.paused = paused;
  }

  public CreateUpdateHealthCheckSmtpCommand locationsFailoverEnabled(Boolean locationsFailoverEnabled) {
    this.locationsFailoverEnabled = locationsFailoverEnabled;
    return this;
  }

   /**
   * Use random substitute locations in case of location breakdown
   * @return locationsFailoverEnabled
  **/
  @ApiModelProperty(required = true, value = "Use random substitute locations in case of location breakdown")
  public Boolean isLocationsFailoverEnabled() {
    return locationsFailoverEnabled;
  }

  public void setLocationsFailoverEnabled(Boolean locationsFailoverEnabled) {
    this.locationsFailoverEnabled = locationsFailoverEnabled;
  }

  public CreateUpdateHealthCheckSmtpCommand notificationTypeIds(List<Integer> notificationTypeIds) {
    this.notificationTypeIds = notificationTypeIds;
    return this;
  }

  public CreateUpdateHealthCheckSmtpCommand addNotificationTypeIdsItem(Integer notificationTypeIdsItem) {
    if (this.notificationTypeIds == null) {
      this.notificationTypeIds = new ArrayList<Integer>();
    }
    this.notificationTypeIds.add(notificationTypeIdsItem);
    return this;
  }

   /**
   * Notification types enabled for a health check
   * @return notificationTypeIds
  **/
  @ApiModelProperty(value = "Notification types enabled for a health check")
  public List<Integer> getNotificationTypeIds() {
    return notificationTypeIds;
  }

  public void setNotificationTypeIds(List<Integer> notificationTypeIds) {
    this.notificationTypeIds = notificationTypeIds;
  }

  public CreateUpdateHealthCheckSmtpCommand notificationEventTypeIds(List<Integer> notificationEventTypeIds) {
    this.notificationEventTypeIds = notificationEventTypeIds;
    return this;
  }

  public CreateUpdateHealthCheckSmtpCommand addNotificationEventTypeIdsItem(Integer notificationEventTypeIdsItem) {
    if (this.notificationEventTypeIds == null) {
      this.notificationEventTypeIds = new ArrayList<Integer>();
    }
    this.notificationEventTypeIds.add(notificationEventTypeIdsItem);
    return this;
  }

   /**
   * Event types with enabled notification
   * @return notificationEventTypeIds
  **/
  @ApiModelProperty(value = "Event types with enabled notification")
  public List<Integer> getNotificationEventTypeIds() {
    return notificationEventTypeIds;
  }

  public void setNotificationEventTypeIds(List<Integer> notificationEventTypeIds) {
    this.notificationEventTypeIds = notificationEventTypeIds;
  }

  public CreateUpdateHealthCheckSmtpCommand notificationTimeId(Integer notificationTimeId) {
    this.notificationTimeId = notificationTimeId;
    return this;
  }

   /**
   * Time when notification is sent
   * @return notificationTimeId
  **/
  @ApiModelProperty(required = true, value = "Time when notification is sent")
  public Integer getNotificationTimeId() {
    return notificationTimeId;
  }

  public void setNotificationTimeId(Integer notificationTimeId) {
    this.notificationTimeId = notificationTimeId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUpdateHealthCheckSmtpCommand createUpdateHealthCheckSmtpCommand = (CreateUpdateHealthCheckSmtpCommand) o;
    return Objects.equals(this.port, createUpdateHealthCheckSmtpCommand.port) &&
        Objects.equals(this.replyTimeout, createUpdateHealthCheckSmtpCommand.replyTimeout) &&
        Objects.equals(this.timeout, createUpdateHealthCheckSmtpCommand.timeout) &&
        Objects.equals(this.errorTolerance, createUpdateHealthCheckSmtpCommand.errorTolerance) &&
        Objects.equals(this.name, createUpdateHealthCheckSmtpCommand.name) &&
        Objects.equals(this.address, createUpdateHealthCheckSmtpCommand.address) &&
        Objects.equals(this.interval, createUpdateHealthCheckSmtpCommand.interval) &&
        Objects.equals(this.paused, createUpdateHealthCheckSmtpCommand.paused) &&
        Objects.equals(this.locationsFailoverEnabled, createUpdateHealthCheckSmtpCommand.locationsFailoverEnabled) &&
        Objects.equals(this.notificationTypeIds, createUpdateHealthCheckSmtpCommand.notificationTypeIds) &&
        Objects.equals(this.notificationEventTypeIds, createUpdateHealthCheckSmtpCommand.notificationEventTypeIds) &&
        Objects.equals(this.notificationTimeId, createUpdateHealthCheckSmtpCommand.notificationTimeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(port, replyTimeout, timeout, errorTolerance, name, address, interval, paused, locationsFailoverEnabled, notificationTypeIds, notificationEventTypeIds, notificationTimeId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUpdateHealthCheckSmtpCommand {\n");
    
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    replyTimeout: ").append(toIndentedString(replyTimeout)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    errorTolerance: ").append(toIndentedString(errorTolerance)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    locationsFailoverEnabled: ").append(toIndentedString(locationsFailoverEnabled)).append("\n");
    sb.append("    notificationTypeIds: ").append(toIndentedString(notificationTypeIds)).append("\n");
    sb.append("    notificationEventTypeIds: ").append(toIndentedString(notificationEventTypeIds)).append("\n");
    sb.append("    notificationTimeId: ").append(toIndentedString(notificationTimeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

