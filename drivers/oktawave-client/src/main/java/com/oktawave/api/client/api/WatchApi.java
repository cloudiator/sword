/*
 * Oktawave API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.oktawave.api.client.api;

import com.google.gson.reflect.TypeToken;
import com.oktawave.api.client.*;
import com.oktawave.api.client.model.*;

import java.io.IOException;
import java.lang.Object;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WatchApi {
    private ApiClient apiClient;

    public WatchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WatchApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for watchAddSelectedMonitoringStations
     *
     * @param station                 Station (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchAddSelectedMonitoringStationsCall(AssignNewMonitoringSensorCommand station, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = station;

        // create path and map variables
        String localVarPath = "/watch/sensors/assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchAddSelectedMonitoringStationsValidateBeforeCall(AssignNewMonitoringSensorCommand station, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling watchAddSelectedMonitoringStations(Async)");
        }


        com.squareup.okhttp.Call call = watchAddSelectedMonitoringStationsCall(station, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add monitoring sensor
     *
     * @param station Station (required)
     * @return MonitoringSensor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitoringSensor watchAddSelectedMonitoringStations(AssignNewMonitoringSensorCommand station) throws ApiException {
        ApiResponse<MonitoringSensor> resp = watchAddSelectedMonitoringStationsWithHttpInfo(station);
        return resp.getData();
    }

    /**
     * Add monitoring sensor
     *
     * @param station Station (required)
     * @return ApiResponse&lt;MonitoringSensor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitoringSensor> watchAddSelectedMonitoringStationsWithHttpInfo(AssignNewMonitoringSensorCommand station) throws ApiException {
        com.squareup.okhttp.Call call = watchAddSelectedMonitoringStationsValidateBeforeCall(station, null, null);
        Type localVarReturnType = new TypeToken<MonitoringSensor>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add monitoring sensor (asynchronously)
     *
     * @param station  Station (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchAddSelectedMonitoringStationsAsync(AssignNewMonitoringSensorCommand station, final ApiCallback<MonitoringSensor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchAddSelectedMonitoringStationsValidateBeforeCall(station, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitoringSensor>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreateDnsHealthCheck
     *
     * @param command                 Create dns health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreateDnsHealthCheckCall(CreateUpdateHealthCheckDnsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/dns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreateDnsHealthCheckValidateBeforeCall(CreateUpdateHealthCheckDnsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreateDnsHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchCreateDnsHealthCheckCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates dns health check
     *
     * @param command Create dns health check command (required)
     * @return HealthCheckDns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckDns watchCreateDnsHealthCheck(CreateUpdateHealthCheckDnsCommand command) throws ApiException {
        ApiResponse<HealthCheckDns> resp = watchCreateDnsHealthCheckWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates dns health check
     *
     * @param command Create dns health check command (required)
     * @return ApiResponse&lt;HealthCheckDns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckDns> watchCreateDnsHealthCheckWithHttpInfo(CreateUpdateHealthCheckDnsCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreateDnsHealthCheckValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckDns>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates dns health check (asynchronously)
     *
     * @param command  Create dns health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreateDnsHealthCheckAsync(CreateUpdateHealthCheckDnsCommand command, final ApiCallback<HealthCheckDns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreateDnsHealthCheckValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckDns>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreateFullPageHealthCheck
     *
     * @param command                 Create FullPage health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreateFullPageHealthCheckCall(CreateUpdateHealthCheckFullPageCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/fullpage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreateFullPageHealthCheckValidateBeforeCall(CreateUpdateHealthCheckFullPageCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreateFullPageHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchCreateFullPageHealthCheckCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates FullPage health check
     *
     * @param command Create FullPage health check command (required)
     * @return HealthCheckFullPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckFullPage watchCreateFullPageHealthCheck(CreateUpdateHealthCheckFullPageCommand command) throws ApiException {
        ApiResponse<HealthCheckFullPage> resp = watchCreateFullPageHealthCheckWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates FullPage health check
     *
     * @param command Create FullPage health check command (required)
     * @return ApiResponse&lt;HealthCheckFullPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckFullPage> watchCreateFullPageHealthCheckWithHttpInfo(CreateUpdateHealthCheckFullPageCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreateFullPageHealthCheckValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates FullPage health check (asynchronously)
     *
     * @param command  Create FullPage health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreateFullPageHealthCheckAsync(CreateUpdateHealthCheckFullPageCommand command, final ApiCallback<HealthCheckFullPage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreateFullPageHealthCheckValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreateFullPageHttpsHealthCheck
     *
     * @param command                 Create FullPage health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreateFullPageHttpsHealthCheckCall(CreateUpdateHealthCheckFullPageHttpsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/fullpagehttps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreateFullPageHttpsHealthCheckValidateBeforeCall(CreateUpdateHealthCheckFullPageHttpsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreateFullPageHttpsHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchCreateFullPageHttpsHealthCheckCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates FullPage Https health check
     *
     * @param command Create FullPage health check command (required)
     * @return HealthCheckFullPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckFullPage watchCreateFullPageHttpsHealthCheck(CreateUpdateHealthCheckFullPageHttpsCommand command) throws ApiException {
        ApiResponse<HealthCheckFullPage> resp = watchCreateFullPageHttpsHealthCheckWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates FullPage Https health check
     *
     * @param command Create FullPage health check command (required)
     * @return ApiResponse&lt;HealthCheckFullPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckFullPage> watchCreateFullPageHttpsHealthCheckWithHttpInfo(CreateUpdateHealthCheckFullPageHttpsCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreateFullPageHttpsHealthCheckValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates FullPage Https health check (asynchronously)
     *
     * @param command  Create FullPage health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreateFullPageHttpsHealthCheckAsync(CreateUpdateHealthCheckFullPageHttpsCommand command, final ApiCallback<HealthCheckFullPage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreateFullPageHttpsHealthCheckValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreateHealthCheckNotification
     *
     * @param command                 Create health check notification command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreateHealthCheckNotificationCall(CreateUpdateHealthCheckNotificationCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreateHealthCheckNotificationValidateBeforeCall(CreateUpdateHealthCheckNotificationCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreateHealthCheckNotification(Async)");
        }


        com.squareup.okhttp.Call call = watchCreateHealthCheckNotificationCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates health check notification
     *
     * @param command Create health check notification command (required)
     * @return HealthCheckNotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckNotification watchCreateHealthCheckNotification(CreateUpdateHealthCheckNotificationCommand command) throws ApiException {
        ApiResponse<HealthCheckNotification> resp = watchCreateHealthCheckNotificationWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates health check notification
     *
     * @param command Create health check notification command (required)
     * @return ApiResponse&lt;HealthCheckNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckNotification> watchCreateHealthCheckNotificationWithHttpInfo(CreateUpdateHealthCheckNotificationCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreateHealthCheckNotificationValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckNotification>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates health check notification (asynchronously)
     *
     * @param command  Create health check notification command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreateHealthCheckNotificationAsync(CreateUpdateHealthCheckNotificationCommand command, final ApiCallback<HealthCheckNotification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreateHealthCheckNotificationValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckNotification>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreateHttpHealthCheck
     *
     * @param command                 Create http health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreateHttpHealthCheckCall(CreateUpdateHealthCheckHttpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/http";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreateHttpHealthCheckValidateBeforeCall(CreateUpdateHealthCheckHttpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreateHttpHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchCreateHttpHealthCheckCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates http health check
     *
     * @param command Create http health check command (required)
     * @return HealthCheckHttp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckHttp watchCreateHttpHealthCheck(CreateUpdateHealthCheckHttpCommand command) throws ApiException {
        ApiResponse<HealthCheckHttp> resp = watchCreateHttpHealthCheckWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates http health check
     *
     * @param command Create http health check command (required)
     * @return ApiResponse&lt;HealthCheckHttp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckHttp> watchCreateHttpHealthCheckWithHttpInfo(CreateUpdateHealthCheckHttpCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreateHttpHealthCheckValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates http health check (asynchronously)
     *
     * @param command  Create http health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreateHttpHealthCheckAsync(CreateUpdateHealthCheckHttpCommand command, final ApiCallback<HealthCheckHttp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreateHttpHealthCheckValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreateHttpsHealthCheck
     *
     * @param command                 Create https health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreateHttpsHealthCheckCall(CreateUpdateHealthCheckHttpsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/https";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreateHttpsHealthCheckValidateBeforeCall(CreateUpdateHealthCheckHttpsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreateHttpsHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchCreateHttpsHealthCheckCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates https health check
     *
     * @param command Create https health check command (required)
     * @return HealthCheckHttp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckHttp watchCreateHttpsHealthCheck(CreateUpdateHealthCheckHttpsCommand command) throws ApiException {
        ApiResponse<HealthCheckHttp> resp = watchCreateHttpsHealthCheckWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates https health check
     *
     * @param command Create https health check command (required)
     * @return ApiResponse&lt;HealthCheckHttp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckHttp> watchCreateHttpsHealthCheckWithHttpInfo(CreateUpdateHealthCheckHttpsCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreateHttpsHealthCheckValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates https health check (asynchronously)
     *
     * @param command  Create https health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreateHttpsHealthCheckAsync(CreateUpdateHealthCheckHttpsCommand command, final ApiCallback<HealthCheckHttp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreateHttpsHealthCheckValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreateImapHealthCheck
     *
     * @param command                 Create imap health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreateImapHealthCheckCall(CreateUpdateHealthCheckImapCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/imap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreateImapHealthCheckValidateBeforeCall(CreateUpdateHealthCheckImapCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreateImapHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchCreateImapHealthCheckCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates imap health check
     *
     * @param command Create imap health check command (required)
     * @return HealthCheckImap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckImap watchCreateImapHealthCheck(CreateUpdateHealthCheckImapCommand command) throws ApiException {
        ApiResponse<HealthCheckImap> resp = watchCreateImapHealthCheckWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates imap health check
     *
     * @param command Create imap health check command (required)
     * @return ApiResponse&lt;HealthCheckImap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckImap> watchCreateImapHealthCheckWithHttpInfo(CreateUpdateHealthCheckImapCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreateImapHealthCheckValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates imap health check (asynchronously)
     *
     * @param command  Create imap health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreateImapHealthCheckAsync(CreateUpdateHealthCheckImapCommand command, final ApiCallback<HealthCheckImap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreateImapHealthCheckValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreateImapSslHealthCheck
     *
     * @param command                 Create imap ssl health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreateImapSslHealthCheckCall(CreateUpdateHealthCheckImapSslCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/imapssl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreateImapSslHealthCheckValidateBeforeCall(CreateUpdateHealthCheckImapSslCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreateImapSslHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchCreateImapSslHealthCheckCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates imap ssl health check
     *
     * @param command Create imap ssl health check command (required)
     * @return HealthCheckImap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckImap watchCreateImapSslHealthCheck(CreateUpdateHealthCheckImapSslCommand command) throws ApiException {
        ApiResponse<HealthCheckImap> resp = watchCreateImapSslHealthCheckWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates imap ssl health check
     *
     * @param command Create imap ssl health check command (required)
     * @return ApiResponse&lt;HealthCheckImap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckImap> watchCreateImapSslHealthCheckWithHttpInfo(CreateUpdateHealthCheckImapSslCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreateImapSslHealthCheckValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates imap ssl health check (asynchronously)
     *
     * @param command  Create imap ssl health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreateImapSslHealthCheckAsync(CreateUpdateHealthCheckImapSslCommand command, final ApiCallback<HealthCheckImap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreateImapSslHealthCheckValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreatePingHealthCheck
     *
     * @param command                 Create ping health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreatePingHealthCheckCall(CreateUpdateHealthCheckPingCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreatePingHealthCheckValidateBeforeCall(CreateUpdateHealthCheckPingCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreatePingHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchCreatePingHealthCheckCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates ping health check
     *
     * @param command Create ping health check command (required)
     * @return HealthCheckPing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckPing watchCreatePingHealthCheck(CreateUpdateHealthCheckPingCommand command) throws ApiException {
        ApiResponse<HealthCheckPing> resp = watchCreatePingHealthCheckWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates ping health check
     *
     * @param command Create ping health check command (required)
     * @return ApiResponse&lt;HealthCheckPing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckPing> watchCreatePingHealthCheckWithHttpInfo(CreateUpdateHealthCheckPingCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreatePingHealthCheckValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckPing>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates ping health check (asynchronously)
     *
     * @param command  Create ping health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreatePingHealthCheckAsync(CreateUpdateHealthCheckPingCommand command, final ApiCallback<HealthCheckPing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreatePingHealthCheckValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckPing>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreateSipHealthCheck
     *
     * @param command                 Create sip health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreateSipHealthCheckCall(CreateUpdateHealthCheckSipCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/sip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreateSipHealthCheckValidateBeforeCall(CreateUpdateHealthCheckSipCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreateSipHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchCreateSipHealthCheckCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates sip health check
     *
     * @param command Create sip health check command (required)
     * @return HealthCheckSip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckSip watchCreateSipHealthCheck(CreateUpdateHealthCheckSipCommand command) throws ApiException {
        ApiResponse<HealthCheckSip> resp = watchCreateSipHealthCheckWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates sip health check
     *
     * @param command Create sip health check command (required)
     * @return ApiResponse&lt;HealthCheckSip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckSip> watchCreateSipHealthCheckWithHttpInfo(CreateUpdateHealthCheckSipCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreateSipHealthCheckValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckSip>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates sip health check (asynchronously)
     *
     * @param command  Create sip health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreateSipHealthCheckAsync(CreateUpdateHealthCheckSipCommand command, final ApiCallback<HealthCheckSip> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreateSipHealthCheckValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckSip>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreateSmtpHealthCheck
     *
     * @param command                 Create smtp health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreateSmtpHealthCheckCall(CreateUpdateHealthCheckSmtpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/smtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreateSmtpHealthCheckValidateBeforeCall(CreateUpdateHealthCheckSmtpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreateSmtpHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchCreateSmtpHealthCheckCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates smtp health check
     *
     * @param command Create smtp health check command (required)
     * @return HealthCheckSmtp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckSmtp watchCreateSmtpHealthCheck(CreateUpdateHealthCheckSmtpCommand command) throws ApiException {
        ApiResponse<HealthCheckSmtp> resp = watchCreateSmtpHealthCheckWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates smtp health check
     *
     * @param command Create smtp health check command (required)
     * @return ApiResponse&lt;HealthCheckSmtp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckSmtp> watchCreateSmtpHealthCheckWithHttpInfo(CreateUpdateHealthCheckSmtpCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreateSmtpHealthCheckValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckSmtp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates smtp health check (asynchronously)
     *
     * @param command  Create smtp health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreateSmtpHealthCheckAsync(CreateUpdateHealthCheckSmtpCommand command, final ApiCallback<HealthCheckSmtp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreateSmtpHealthCheckValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckSmtp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchCreateTcpHealthCheck
     *
     * @param command                 Create Tcp health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchCreateTcpHealthCheckCall(CreateUpdateHealthCheckTcpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/tcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchCreateTcpHealthCheckValidateBeforeCall(CreateUpdateHealthCheckTcpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchCreateTcpHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchCreateTcpHealthCheckCall(command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates Tcp health check
     *
     * @param command Create Tcp health check command (required)
     * @return HealthCheckTcp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckTcp watchCreateTcpHealthCheck(CreateUpdateHealthCheckTcpCommand command) throws ApiException {
        ApiResponse<HealthCheckTcp> resp = watchCreateTcpHealthCheckWithHttpInfo(command);
        return resp.getData();
    }

    /**
     * Creates Tcp health check
     *
     * @param command Create Tcp health check command (required)
     * @return ApiResponse&lt;HealthCheckTcp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckTcp> watchCreateTcpHealthCheckWithHttpInfo(CreateUpdateHealthCheckTcpCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchCreateTcpHealthCheckValidateBeforeCall(command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckTcp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates Tcp health check (asynchronously)
     *
     * @param command  Create Tcp health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchCreateTcpHealthCheckAsync(CreateUpdateHealthCheckTcpCommand command, final ApiCallback<HealthCheckTcp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchCreateTcpHealthCheckValidateBeforeCall(command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckTcp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchDeleteHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchDeleteHealthCheckCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchDeleteHealthCheckValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchDeleteHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchDeleteHealthCheckCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes health check
     *
     * @param id Id of a health check (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void watchDeleteHealthCheck(Integer id) throws ApiException {
        watchDeleteHealthCheckWithHttpInfo(id);
    }

    /**
     * Deletes health check
     *
     * @param id Id of a health check (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> watchDeleteHealthCheckWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = watchDeleteHealthCheckValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes health check (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchDeleteHealthCheckAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchDeleteHealthCheckValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for watchDeleteHealthCheckNotification
     *
     * @param id                      Id of a health check notification (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchDeleteHealthCheckNotificationCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/notifications/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchDeleteHealthCheckNotificationValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchDeleteHealthCheckNotification(Async)");
        }


        com.squareup.okhttp.Call call = watchDeleteHealthCheckNotificationCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes health check notification
     *
     * @param id Id of a health check notification (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void watchDeleteHealthCheckNotification(Integer id) throws ApiException {
        watchDeleteHealthCheckNotificationWithHttpInfo(id);
    }

    /**
     * Deletes health check notification
     *
     * @param id Id of a health check notification (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> watchDeleteHealthCheckNotificationWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = watchDeleteHealthCheckNotificationValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes health check notification (asynchronously)
     *
     * @param id       Id of a health check notification (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchDeleteHealthCheckNotificationAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchDeleteHealthCheckNotificationValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for watchDeleteSelectedMonitoringStations
     *
     * @param id                      Sensor id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchDeleteSelectedMonitoringStationsCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/sensors/assignments/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchDeleteSelectedMonitoringStationsValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchDeleteSelectedMonitoringStations(Async)");
        }


        com.squareup.okhttp.Call call = watchDeleteSelectedMonitoringStationsCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove monitoring sensor
     *
     * @param id Sensor id (required)
     * @return MonitoringSensor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitoringSensor watchDeleteSelectedMonitoringStations(Integer id) throws ApiException {
        ApiResponse<MonitoringSensor> resp = watchDeleteSelectedMonitoringStationsWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Remove monitoring sensor
     *
     * @param id Sensor id (required)
     * @return ApiResponse&lt;MonitoringSensor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitoringSensor> watchDeleteSelectedMonitoringStationsWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = watchDeleteSelectedMonitoringStationsValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<MonitoringSensor>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove monitoring sensor (asynchronously)
     *
     * @param id       Sensor id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchDeleteSelectedMonitoringStationsAsync(Integer id, final ApiCallback<MonitoringSensor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchDeleteSelectedMonitoringStationsValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitoringSensor>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetAvailableMonitoringStations
     *
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetAvailableMonitoringStationsCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/sensors/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetAvailableMonitoringStationsValidateBeforeCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = watchGetAvailableMonitoringStationsCall(fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all available monitoring sensors
     *
     * @param fields Response fields filter (optional)
     * @return MonitoringSensor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitoringSensor watchGetAvailableMonitoringStations(String fields) throws ApiException {
        ApiResponse<MonitoringSensor> resp = watchGetAvailableMonitoringStationsWithHttpInfo(fields);
        return resp.getData();
    }

    /**
     * Gets all available monitoring sensors
     *
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;MonitoringSensor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitoringSensor> watchGetAvailableMonitoringStationsWithHttpInfo(String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetAvailableMonitoringStationsValidateBeforeCall(fields, null, null);
        Type localVarReturnType = new TypeToken<MonitoringSensor>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all available monitoring sensors (asynchronously)
     *
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetAvailableMonitoringStationsAsync(String fields, final ApiCallback<MonitoringSensor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetAvailableMonitoringStationsValidateBeforeCall(fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitoringSensor>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetDnsHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetDnsHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/dns/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetDnsHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetDnsHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetDnsHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns dns health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckDns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckDns watchGetDnsHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckDns> resp = watchGetDnsHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns dns health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckDns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckDns> watchGetDnsHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetDnsHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckDns>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns dns health check details (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetDnsHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheckDns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetDnsHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckDns>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetFullPageHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetFullPageHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/fullpage/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetFullPageHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetFullPageHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetFullPageHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns FullPage health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckFullPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckFullPage watchGetFullPageHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckFullPage> resp = watchGetFullPageHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns FullPage health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckFullPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckFullPage> watchGetFullPageHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetFullPageHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns FullPage health check details (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetFullPageHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheckFullPage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetFullPageHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetFullPageHttpsHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetFullPageHttpsHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/fullpagehttps/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetFullPageHttpsHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetFullPageHttpsHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetFullPageHttpsHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns FullPage Https health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckFullPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckFullPage watchGetFullPageHttpsHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckFullPage> resp = watchGetFullPageHttpsHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns FullPage Https health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckFullPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckFullPage> watchGetFullPageHttpsHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetFullPageHttpsHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns FullPage Https health check details (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetFullPageHttpsHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheckFullPage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetFullPageHttpsHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns health check
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheck
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheck watchGetHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheck> resp = watchGetHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns health check
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheck&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheck> watchGetHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheck>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns health check (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheck> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheck>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetHealthCheckNotification
     *
     * @param id                      Id of a health check notification (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetHealthCheckNotificationCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/notifications/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetHealthCheckNotificationValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetHealthCheckNotification(Async)");
        }


        com.squareup.okhttp.Call call = watchGetHealthCheckNotificationCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns health check notification details
     *
     * @param id     Id of a health check notification (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckNotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckNotification watchGetHealthCheckNotification(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckNotification> resp = watchGetHealthCheckNotificationWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns health check notification details
     *
     * @param id     Id of a health check notification (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckNotification> watchGetHealthCheckNotificationWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetHealthCheckNotificationValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckNotification>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns health check notification details (asynchronously)
     *
     * @param id       Id of a health check notification (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetHealthCheckNotificationAsync(Integer id, String fields, final ApiCallback<HealthCheckNotification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetHealthCheckNotificationValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckNotification>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetHealthCheckNotifications
     *
     * @param pageSize                Page size (optional)
     * @param pageNumber              Page number (optional)
     * @param orderBy                 Order by (optional)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetHealthCheckNotificationsCall(Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageNumber != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (orderBy != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetHealthCheckNotificationsValidateBeforeCall(Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = watchGetHealthCheckNotificationsCall(pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a list of configured health check notifications
     * Acceptable order values are: Address, Id
     *
     * @param pageSize   Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy    Order by (optional)
     * @param fields     Response fields filter (optional)
     * @return ApiCollectionHealthCheckNotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionHealthCheckNotification watchGetHealthCheckNotifications(Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        ApiResponse<ApiCollectionHealthCheckNotification> resp = watchGetHealthCheckNotificationsWithHttpInfo(pageSize, pageNumber, orderBy, fields);
        return resp.getData();
    }

    /**
     * Returns a list of configured health check notifications
     * Acceptable order values are: Address, Id
     *
     * @param pageSize   Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy    Order by (optional)
     * @param fields     Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionHealthCheckNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionHealthCheckNotification> watchGetHealthCheckNotificationsWithHttpInfo(Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetHealthCheckNotificationsValidateBeforeCall(pageSize, pageNumber, orderBy, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionHealthCheckNotification>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of configured health check notifications (asynchronously)
     * Acceptable order values are: Address, Id
     *
     * @param pageSize   Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy    Order by (optional)
     * @param fields     Response fields filter (optional)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetHealthCheckNotificationsAsync(Integer pageSize, Integer pageNumber, String orderBy, String fields, final ApiCallback<ApiCollectionHealthCheckNotification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetHealthCheckNotificationsValidateBeforeCall(pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionHealthCheckNotification>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetHealthChecks
     *
     * @param pageSize                Page size (optional)
     * @param pageNumber              Page number (optional)
     * @param orderBy                 Order by (optional)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetHealthChecksCall(Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageNumber != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (orderBy != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetHealthChecksValidateBeforeCall(Integer pageSize, Integer pageNumber, String orderBy, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = watchGetHealthChecksCall(pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a list of configured health checks
     * Acceptable order values are: Name, Type
     *
     * @param pageSize   Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy    Order by (optional)
     * @param fields     Response fields filter (optional)
     * @return ApiCollectionHealthCheck
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionHealthCheck watchGetHealthChecks(Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        ApiResponse<ApiCollectionHealthCheck> resp = watchGetHealthChecksWithHttpInfo(pageSize, pageNumber, orderBy, fields);
        return resp.getData();
    }

    /**
     * Returns a list of configured health checks
     * Acceptable order values are: Name, Type
     *
     * @param pageSize   Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy    Order by (optional)
     * @param fields     Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionHealthCheck&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionHealthCheck> watchGetHealthChecksWithHttpInfo(Integer pageSize, Integer pageNumber, String orderBy, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetHealthChecksValidateBeforeCall(pageSize, pageNumber, orderBy, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionHealthCheck>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of configured health checks (asynchronously)
     * Acceptable order values are: Name, Type
     *
     * @param pageSize   Page size (optional)
     * @param pageNumber Page number (optional)
     * @param orderBy    Order by (optional)
     * @param fields     Response fields filter (optional)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetHealthChecksAsync(Integer pageSize, Integer pageNumber, String orderBy, String fields, final ApiCallback<ApiCollectionHealthCheck> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetHealthChecksValidateBeforeCall(pageSize, pageNumber, orderBy, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionHealthCheck>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetHttpHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetHttpHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/http/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetHttpHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetHttpHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetHttpHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns http health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckHttp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckHttp watchGetHttpHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckHttp> resp = watchGetHttpHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns http health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckHttp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckHttp> watchGetHttpHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetHttpHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns http health check details (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetHttpHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheckHttp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetHttpHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetHttpsHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetHttpsHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/https/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetHttpsHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetHttpsHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetHttpsHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns https health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckHttp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckHttp watchGetHttpsHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckHttp> resp = watchGetHttpsHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns https health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckHttp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckHttp> watchGetHttpsHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetHttpsHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns https health check details (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetHttpsHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheckHttp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetHttpsHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetImapHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetImapHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/imap/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetImapHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetImapHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetImapHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns imap health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckImap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckImap watchGetImapHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckImap> resp = watchGetImapHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns imap health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckImap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckImap> watchGetImapHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetImapHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns imap health check details (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetImapHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheckImap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetImapHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetImapSslHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetImapSslHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/imapssl/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetImapSslHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetImapSslHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetImapSslHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns imap ssl health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckImap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckImap watchGetImapSslHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckImap> resp = watchGetImapSslHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns imap ssl health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckImap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckImap> watchGetImapSslHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetImapSslHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns imap ssl health check details (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetImapSslHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheckImap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetImapSslHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetPingHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetPingHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/ping/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetPingHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetPingHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetPingHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns ping health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckPing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckPing watchGetPingHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckPing> resp = watchGetPingHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns ping health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckPing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckPing> watchGetPingHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetPingHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckPing>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns ping health check details (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetPingHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheckPing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetPingHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckPing>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetSelectedMonitoringStation
     *
     * @param id                      (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetSelectedMonitoringStationCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/sensors/assignments/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetSelectedMonitoringStationValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetSelectedMonitoringStation(Async)");
        }


        com.squareup.okhttp.Call call = watchGetSelectedMonitoringStationCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets selected monitoring sensor
     *
     * @param id     (required)
     * @param fields Response fields filter (optional)
     * @return MonitoringSensor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitoringSensor watchGetSelectedMonitoringStation(Integer id, String fields) throws ApiException {
        ApiResponse<MonitoringSensor> resp = watchGetSelectedMonitoringStationWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Gets selected monitoring sensor
     *
     * @param id     (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;MonitoringSensor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitoringSensor> watchGetSelectedMonitoringStationWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetSelectedMonitoringStationValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<MonitoringSensor>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets selected monitoring sensor (asynchronously)
     *
     * @param id       (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetSelectedMonitoringStationAsync(Integer id, String fields, final ApiCallback<MonitoringSensor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetSelectedMonitoringStationValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitoringSensor>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetSelectedMonitoringStations
     *
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetSelectedMonitoringStationsCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/sensors/assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetSelectedMonitoringStationsValidateBeforeCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = watchGetSelectedMonitoringStationsCall(fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets selected monitoring sensors
     *
     * @param fields Response fields filter (optional)
     * @return MonitoringSensor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitoringSensor watchGetSelectedMonitoringStations(String fields) throws ApiException {
        ApiResponse<MonitoringSensor> resp = watchGetSelectedMonitoringStationsWithHttpInfo(fields);
        return resp.getData();
    }

    /**
     * Gets selected monitoring sensors
     *
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;MonitoringSensor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitoringSensor> watchGetSelectedMonitoringStationsWithHttpInfo(String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetSelectedMonitoringStationsValidateBeforeCall(fields, null, null);
        Type localVarReturnType = new TypeToken<MonitoringSensor>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets selected monitoring sensors (asynchronously)
     *
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetSelectedMonitoringStationsAsync(String fields, final ApiCallback<MonitoringSensor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetSelectedMonitoringStationsValidateBeforeCall(fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitoringSensor>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetSipHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetSipHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/sip/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetSipHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetSipHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetSipHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns sip health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckSip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckSip watchGetSipHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckSip> resp = watchGetSipHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns sip health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckSip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckSip> watchGetSipHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetSipHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckSip>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns sip health check details (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetSipHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheckSip> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetSipHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckSip>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetSmtpHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetSmtpHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/smtp/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetSmtpHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetSmtpHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetSmtpHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns smtp health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckSmtp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckSmtp watchGetSmtpHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckSmtp> resp = watchGetSmtpHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns smtp health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckSmtp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckSmtp> watchGetSmtpHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetSmtpHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckSmtp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns smtp health check details (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetSmtpHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheckSmtp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetSmtpHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckSmtp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchGetTcpHealthCheck
     *
     * @param id                      Id of a health check (required)
     * @param fields                  Response fields filter (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchGetTcpHealthCheckCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/tcp/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchGetTcpHealthCheckValidateBeforeCall(Integer id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchGetTcpHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchGetTcpHealthCheckCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns tcp health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return HealthCheckTcp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckTcp watchGetTcpHealthCheck(Integer id, String fields) throws ApiException {
        ApiResponse<HealthCheckTcp> resp = watchGetTcpHealthCheckWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Returns tcp health check details
     *
     * @param id     Id of a health check (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;HealthCheckTcp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckTcp> watchGetTcpHealthCheckWithHttpInfo(Integer id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = watchGetTcpHealthCheckValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckTcp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns tcp health check details (asynchronously)
     *
     * @param id       Id of a health check (required)
     * @param fields   Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchGetTcpHealthCheckAsync(Integer id, String fields, final ApiCallback<HealthCheckTcp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchGetTcpHealthCheckValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckTcp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdateDnsHealthCheck
     *
     * @param id                      Health check id (required)
     * @param command                 Create dns health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdateDnsHealthCheckCall(Integer id, CreateUpdateHealthCheckDnsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/dns/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdateDnsHealthCheckValidateBeforeCall(Integer id, CreateUpdateHealthCheckDnsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdateDnsHealthCheck(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdateDnsHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdateDnsHealthCheckCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates dns health check
     *
     * @param id      Health check id (required)
     * @param command Create dns health check command (required)
     * @return HealthCheckDns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckDns watchUpdateDnsHealthCheck(Integer id, CreateUpdateHealthCheckDnsCommand command) throws ApiException {
        ApiResponse<HealthCheckDns> resp = watchUpdateDnsHealthCheckWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates dns health check
     *
     * @param id      Health check id (required)
     * @param command Create dns health check command (required)
     * @return ApiResponse&lt;HealthCheckDns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckDns> watchUpdateDnsHealthCheckWithHttpInfo(Integer id, CreateUpdateHealthCheckDnsCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdateDnsHealthCheckValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckDns>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates dns health check (asynchronously)
     *
     * @param id       Health check id (required)
     * @param command  Create dns health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdateDnsHealthCheckAsync(Integer id, CreateUpdateHealthCheckDnsCommand command, final ApiCallback<HealthCheckDns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdateDnsHealthCheckValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckDns>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdateFullPageHealthCheck
     *
     * @param id                      Health check id (required)
     * @param command                 Create FullPage health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdateFullPageHealthCheckCall(Integer id, CreateUpdateHealthCheckFullPageCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/fullpage/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdateFullPageHealthCheckValidateBeforeCall(Integer id, CreateUpdateHealthCheckFullPageCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdateFullPageHealthCheck(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdateFullPageHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdateFullPageHealthCheckCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates FullPage health check
     *
     * @param id      Health check id (required)
     * @param command Create FullPage health check command (required)
     * @return HealthCheckFullPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckFullPage watchUpdateFullPageHealthCheck(Integer id, CreateUpdateHealthCheckFullPageCommand command) throws ApiException {
        ApiResponse<HealthCheckFullPage> resp = watchUpdateFullPageHealthCheckWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates FullPage health check
     *
     * @param id      Health check id (required)
     * @param command Create FullPage health check command (required)
     * @return ApiResponse&lt;HealthCheckFullPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckFullPage> watchUpdateFullPageHealthCheckWithHttpInfo(Integer id, CreateUpdateHealthCheckFullPageCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdateFullPageHealthCheckValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates FullPage health check (asynchronously)
     *
     * @param id       Health check id (required)
     * @param command  Create FullPage health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdateFullPageHealthCheckAsync(Integer id, CreateUpdateHealthCheckFullPageCommand command, final ApiCallback<HealthCheckFullPage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdateFullPageHealthCheckValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdateFullPageHttpsHealthCheck
     *
     * @param id                      Health check id (required)
     * @param command                 Create FullPage health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdateFullPageHttpsHealthCheckCall(Integer id, CreateUpdateHealthCheckFullPageHttpsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/fullpagehttps/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdateFullPageHttpsHealthCheckValidateBeforeCall(Integer id, CreateUpdateHealthCheckFullPageHttpsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdateFullPageHttpsHealthCheck(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdateFullPageHttpsHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdateFullPageHttpsHealthCheckCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates FullPage Https health check
     *
     * @param id      Health check id (required)
     * @param command Create FullPage health check command (required)
     * @return HealthCheckFullPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckFullPage watchUpdateFullPageHttpsHealthCheck(Integer id, CreateUpdateHealthCheckFullPageHttpsCommand command) throws ApiException {
        ApiResponse<HealthCheckFullPage> resp = watchUpdateFullPageHttpsHealthCheckWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates FullPage Https health check
     *
     * @param id      Health check id (required)
     * @param command Create FullPage health check command (required)
     * @return ApiResponse&lt;HealthCheckFullPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckFullPage> watchUpdateFullPageHttpsHealthCheckWithHttpInfo(Integer id, CreateUpdateHealthCheckFullPageHttpsCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdateFullPageHttpsHealthCheckValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates FullPage Https health check (asynchronously)
     *
     * @param id       Health check id (required)
     * @param command  Create FullPage health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdateFullPageHttpsHealthCheckAsync(Integer id, CreateUpdateHealthCheckFullPageHttpsCommand command, final ApiCallback<HealthCheckFullPage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdateFullPageHttpsHealthCheckValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckFullPage>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdateHealthCheckNotification
     *
     * @param id                      Health check notification id (required)
     * @param command                 Create health check notification command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdateHealthCheckNotificationCall(Integer id, CreateUpdateHealthCheckNotificationCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/notifications/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdateHealthCheckNotificationValidateBeforeCall(Integer id, CreateUpdateHealthCheckNotificationCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdateHealthCheckNotification(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdateHealthCheckNotification(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdateHealthCheckNotificationCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates health check notification
     *
     * @param id      Health check notification id (required)
     * @param command Create health check notification command (required)
     * @return HealthCheckNotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckNotification watchUpdateHealthCheckNotification(Integer id, CreateUpdateHealthCheckNotificationCommand command) throws ApiException {
        ApiResponse<HealthCheckNotification> resp = watchUpdateHealthCheckNotificationWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates health check notification
     *
     * @param id      Health check notification id (required)
     * @param command Create health check notification command (required)
     * @return ApiResponse&lt;HealthCheckNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckNotification> watchUpdateHealthCheckNotificationWithHttpInfo(Integer id, CreateUpdateHealthCheckNotificationCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdateHealthCheckNotificationValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckNotification>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates health check notification (asynchronously)
     *
     * @param id       Health check notification id (required)
     * @param command  Create health check notification command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdateHealthCheckNotificationAsync(Integer id, CreateUpdateHealthCheckNotificationCommand command, final ApiCallback<HealthCheckNotification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdateHealthCheckNotificationValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckNotification>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdateHttpHealthCheck
     *
     * @param id                      Health check id (required)
     * @param command                 Create http health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdateHttpHealthCheckCall(Integer id, CreateUpdateHealthCheckHttpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/http/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdateHttpHealthCheckValidateBeforeCall(Integer id, CreateUpdateHealthCheckHttpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdateHttpHealthCheck(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdateHttpHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdateHttpHealthCheckCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates http health check
     *
     * @param id      Health check id (required)
     * @param command Create http health check command (required)
     * @return HealthCheckHttp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckHttp watchUpdateHttpHealthCheck(Integer id, CreateUpdateHealthCheckHttpCommand command) throws ApiException {
        ApiResponse<HealthCheckHttp> resp = watchUpdateHttpHealthCheckWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates http health check
     *
     * @param id      Health check id (required)
     * @param command Create http health check command (required)
     * @return ApiResponse&lt;HealthCheckHttp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckHttp> watchUpdateHttpHealthCheckWithHttpInfo(Integer id, CreateUpdateHealthCheckHttpCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdateHttpHealthCheckValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates http health check (asynchronously)
     *
     * @param id       Health check id (required)
     * @param command  Create http health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdateHttpHealthCheckAsync(Integer id, CreateUpdateHealthCheckHttpCommand command, final ApiCallback<HealthCheckHttp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdateHttpHealthCheckValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdateHttpsHealthCheck
     *
     * @param id                      Health check id (required)
     * @param command                 Create https health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdateHttpsHealthCheckCall(Integer id, CreateUpdateHealthCheckHttpsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/https/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdateHttpsHealthCheckValidateBeforeCall(Integer id, CreateUpdateHealthCheckHttpsCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdateHttpsHealthCheck(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdateHttpsHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdateHttpsHealthCheckCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates https health check
     *
     * @param id      Health check id (required)
     * @param command Create https health check command (required)
     * @return HealthCheckHttp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckHttp watchUpdateHttpsHealthCheck(Integer id, CreateUpdateHealthCheckHttpsCommand command) throws ApiException {
        ApiResponse<HealthCheckHttp> resp = watchUpdateHttpsHealthCheckWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates https health check
     *
     * @param id      Health check id (required)
     * @param command Create https health check command (required)
     * @return ApiResponse&lt;HealthCheckHttp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckHttp> watchUpdateHttpsHealthCheckWithHttpInfo(Integer id, CreateUpdateHealthCheckHttpsCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdateHttpsHealthCheckValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates https health check (asynchronously)
     *
     * @param id       Health check id (required)
     * @param command  Create https health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdateHttpsHealthCheckAsync(Integer id, CreateUpdateHealthCheckHttpsCommand command, final ApiCallback<HealthCheckHttp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdateHttpsHealthCheckValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckHttp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdateImapHealthCheck
     *
     * @param id                      Health check id (required)
     * @param command                 Create imap health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdateImapHealthCheckCall(Integer id, CreateUpdateHealthCheckImapCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/imap/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdateImapHealthCheckValidateBeforeCall(Integer id, CreateUpdateHealthCheckImapCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdateImapHealthCheck(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdateImapHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdateImapHealthCheckCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates imap health check
     *
     * @param id      Health check id (required)
     * @param command Create imap health check command (required)
     * @return HealthCheckImap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckImap watchUpdateImapHealthCheck(Integer id, CreateUpdateHealthCheckImapCommand command) throws ApiException {
        ApiResponse<HealthCheckImap> resp = watchUpdateImapHealthCheckWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates imap health check
     *
     * @param id      Health check id (required)
     * @param command Create imap health check command (required)
     * @return ApiResponse&lt;HealthCheckImap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckImap> watchUpdateImapHealthCheckWithHttpInfo(Integer id, CreateUpdateHealthCheckImapCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdateImapHealthCheckValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates imap health check (asynchronously)
     *
     * @param id       Health check id (required)
     * @param command  Create imap health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdateImapHealthCheckAsync(Integer id, CreateUpdateHealthCheckImapCommand command, final ApiCallback<HealthCheckImap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdateImapHealthCheckValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdateImapHealthCheck_0
     *
     * @param id                      Health check id (required)
     * @param command                 Create sip health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdateImapHealthCheck_0Call(Integer id, CreateUpdateHealthCheckSipCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/sip/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdateImapHealthCheck_0ValidateBeforeCall(Integer id, CreateUpdateHealthCheckSipCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdateImapHealthCheck_0(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdateImapHealthCheck_0(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdateImapHealthCheck_0Call(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates sip health check
     *
     * @param id      Health check id (required)
     * @param command Create sip health check command (required)
     * @return HealthCheckSip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckSip watchUpdateImapHealthCheck_0(Integer id, CreateUpdateHealthCheckSipCommand command) throws ApiException {
        ApiResponse<HealthCheckSip> resp = watchUpdateImapHealthCheck_0WithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates sip health check
     *
     * @param id      Health check id (required)
     * @param command Create sip health check command (required)
     * @return ApiResponse&lt;HealthCheckSip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckSip> watchUpdateImapHealthCheck_0WithHttpInfo(Integer id, CreateUpdateHealthCheckSipCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdateImapHealthCheck_0ValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckSip>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates sip health check (asynchronously)
     *
     * @param id       Health check id (required)
     * @param command  Create sip health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdateImapHealthCheck_0Async(Integer id, CreateUpdateHealthCheckSipCommand command, final ApiCallback<HealthCheckSip> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdateImapHealthCheck_0ValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckSip>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdateImapSslHealthCheck
     *
     * @param id                      Health check id (required)
     * @param command                 Create imap ssl health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdateImapSslHealthCheckCall(Integer id, CreateUpdateHealthCheckImapSslCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/imapssl/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdateImapSslHealthCheckValidateBeforeCall(Integer id, CreateUpdateHealthCheckImapSslCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdateImapSslHealthCheck(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdateImapSslHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdateImapSslHealthCheckCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates imap ssl health check
     *
     * @param id      Health check id (required)
     * @param command Create imap ssl health check command (required)
     * @return HealthCheckImap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckImap watchUpdateImapSslHealthCheck(Integer id, CreateUpdateHealthCheckImapSslCommand command) throws ApiException {
        ApiResponse<HealthCheckImap> resp = watchUpdateImapSslHealthCheckWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates imap ssl health check
     *
     * @param id      Health check id (required)
     * @param command Create imap ssl health check command (required)
     * @return ApiResponse&lt;HealthCheckImap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckImap> watchUpdateImapSslHealthCheckWithHttpInfo(Integer id, CreateUpdateHealthCheckImapSslCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdateImapSslHealthCheckValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates imap ssl health check (asynchronously)
     *
     * @param id       Health check id (required)
     * @param command  Create imap ssl health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdateImapSslHealthCheckAsync(Integer id, CreateUpdateHealthCheckImapSslCommand command, final ApiCallback<HealthCheckImap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdateImapSslHealthCheckValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckImap>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdatePingHealthCheck
     *
     * @param id                      Health check id (required)
     * @param command                 Create ping health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdatePingHealthCheckCall(Integer id, CreateUpdateHealthCheckPingCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/ping/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdatePingHealthCheckValidateBeforeCall(Integer id, CreateUpdateHealthCheckPingCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdatePingHealthCheck(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdatePingHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdatePingHealthCheckCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates ping health check
     *
     * @param id      Health check id (required)
     * @param command Create ping health check command (required)
     * @return HealthCheckPing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckPing watchUpdatePingHealthCheck(Integer id, CreateUpdateHealthCheckPingCommand command) throws ApiException {
        ApiResponse<HealthCheckPing> resp = watchUpdatePingHealthCheckWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates ping health check
     *
     * @param id      Health check id (required)
     * @param command Create ping health check command (required)
     * @return ApiResponse&lt;HealthCheckPing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckPing> watchUpdatePingHealthCheckWithHttpInfo(Integer id, CreateUpdateHealthCheckPingCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdatePingHealthCheckValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckPing>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates ping health check (asynchronously)
     *
     * @param id       Health check id (required)
     * @param command  Create ping health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdatePingHealthCheckAsync(Integer id, CreateUpdateHealthCheckPingCommand command, final ApiCallback<HealthCheckPing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdatePingHealthCheckValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckPing>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdateSmtpHealthCheck
     *
     * @param id                      Health check id (required)
     * @param command                 Create smtp health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdateSmtpHealthCheckCall(Integer id, CreateUpdateHealthCheckSmtpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/smtp/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdateSmtpHealthCheckValidateBeforeCall(Integer id, CreateUpdateHealthCheckSmtpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdateSmtpHealthCheck(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdateSmtpHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdateSmtpHealthCheckCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates smtp health check
     *
     * @param id      Health check id (required)
     * @param command Create smtp health check command (required)
     * @return HealthCheckSmtp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckSmtp watchUpdateSmtpHealthCheck(Integer id, CreateUpdateHealthCheckSmtpCommand command) throws ApiException {
        ApiResponse<HealthCheckSmtp> resp = watchUpdateSmtpHealthCheckWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates smtp health check
     *
     * @param id      Health check id (required)
     * @param command Create smtp health check command (required)
     * @return ApiResponse&lt;HealthCheckSmtp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckSmtp> watchUpdateSmtpHealthCheckWithHttpInfo(Integer id, CreateUpdateHealthCheckSmtpCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdateSmtpHealthCheckValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckSmtp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates smtp health check (asynchronously)
     *
     * @param id       Health check id (required)
     * @param command  Create smtp health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdateSmtpHealthCheckAsync(Integer id, CreateUpdateHealthCheckSmtpCommand command, final ApiCallback<HealthCheckSmtp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdateSmtpHealthCheckValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckSmtp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for watchUpdateTcpHealthCheck
     *
     * @param id                      Health check id (required)
     * @param command                 Create Tcp health check command (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call watchUpdateTcpHealthCheckCall(Integer id, CreateUpdateHealthCheckTcpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = command;

        // create path and map variables
        String localVarPath = "/watch/healthchecks/tcp/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call watchUpdateTcpHealthCheckValidateBeforeCall(Integer id, CreateUpdateHealthCheckTcpCommand command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling watchUpdateTcpHealthCheck(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling watchUpdateTcpHealthCheck(Async)");
        }


        com.squareup.okhttp.Call call = watchUpdateTcpHealthCheckCall(id, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates Tcp health check
     *
     * @param id      Health check id (required)
     * @param command Create Tcp health check command (required)
     * @return HealthCheckTcp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HealthCheckTcp watchUpdateTcpHealthCheck(Integer id, CreateUpdateHealthCheckTcpCommand command) throws ApiException {
        ApiResponse<HealthCheckTcp> resp = watchUpdateTcpHealthCheckWithHttpInfo(id, command);
        return resp.getData();
    }

    /**
     * Updates Tcp health check
     *
     * @param id      Health check id (required)
     * @param command Create Tcp health check command (required)
     * @return ApiResponse&lt;HealthCheckTcp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HealthCheckTcp> watchUpdateTcpHealthCheckWithHttpInfo(Integer id, CreateUpdateHealthCheckTcpCommand command) throws ApiException {
        com.squareup.okhttp.Call call = watchUpdateTcpHealthCheckValidateBeforeCall(id, command, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckTcp>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates Tcp health check (asynchronously)
     *
     * @param id       Health check id (required)
     * @param command  Create Tcp health check command (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call watchUpdateTcpHealthCheckAsync(Integer id, CreateUpdateHealthCheckTcpCommand command, final ApiCallback<HealthCheckTcp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = watchUpdateTcpHealthCheckValidateBeforeCall(id, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckTcp>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
