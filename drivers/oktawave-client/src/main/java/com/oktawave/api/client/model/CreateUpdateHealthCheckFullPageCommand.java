/*
 * Oktawave API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.oktawave.api.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Create/update FullPage health check command
 */
@ApiModel(description = "Create/update FullPage health check command")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-25T12:05:03.973+02:00")
public class CreateUpdateHealthCheckFullPageCommand {
  @SerializedName("HttpMethodId")
  private Integer httpMethodId = 1440;

  @SerializedName("ContentRegularExpression")
  private String contentRegularExpression = "";

  @SerializedName("ContentNegativeRegularExpression")
  private String contentNegativeRegularExpression = "";

  @SerializedName("Port")
  private Integer port = 80;

  @SerializedName("PageTimeout")
  private Integer pageTimeout = 7000;

  @SerializedName("ElementTimeout")
  private Integer elementTimeout = 5000;

  @SerializedName("ElementsTotalTimeout")
  private Integer elementsTotalTimeout = 10000;

  @SerializedName("FetchPageElements")
  private Boolean fetchPageElements = null;

  @SerializedName("MaxRedirects")
  private Integer maxRedirects = 5;

  @SerializedName("MaxParallelRequests")
  private Integer maxParallelRequests = 6;

  @SerializedName("GenerateHar")
  private Boolean generateHar = true;

  @SerializedName("AllowedElementErrorCount")
  private Integer allowedElementErrorCount = 0;

  @SerializedName("ContentSizeLimit")
  private Integer contentSizeLimit = 2097152;

  @SerializedName("IgnoreHtmlParsingTime")
  private Boolean ignoreHtmlParsingTime = true;

  @SerializedName("SaveCookies")
  private Boolean saveCookies = false;

  @SerializedName("DisableContentEncoding")
  private Boolean disableContentEncoding = false;

  @SerializedName("Content")
  private String content = "";

  @SerializedName("ContentType")
  private String contentType = "";

  @SerializedName("IgnoredElementsFilter")
  private String ignoredElementsFilter = "";

  @SerializedName("ElementsFilter")
  private String elementsFilter = "";

  @SerializedName("ErrorTolerance")
  private Integer errorTolerance = 51;

  @SerializedName("Name")
  private String name = "";

  @SerializedName("Address")
  private String address = "";

  @SerializedName("Interval")
  private Integer interval = 60;

  @SerializedName("Paused")
  private Boolean paused = false;

  @SerializedName("LocationsFailoverEnabled")
  private Boolean locationsFailoverEnabled = true;

  @SerializedName("NotificationTypeIds")
  private List<Integer> notificationTypeIds = null;

  @SerializedName("NotificationEventTypeIds")
  private List<Integer> notificationEventTypeIds = null;

  @SerializedName("NotificationTimeId")
  private Integer notificationTimeId = 1594;

  public CreateUpdateHealthCheckFullPageCommand httpMethodId(Integer httpMethodId) {
    this.httpMethodId = httpMethodId;
    return this;
  }

   /**
   * Health check http method type (Dictionary 166)
   * @return httpMethodId
  **/
  @ApiModelProperty(required = true, value = "Health check http method type (Dictionary 166)")
  public Integer getHttpMethodId() {
    return httpMethodId;
  }

  public void setHttpMethodId(Integer httpMethodId) {
    this.httpMethodId = httpMethodId;
  }

  public CreateUpdateHealthCheckFullPageCommand contentRegularExpression(String contentRegularExpression) {
    this.contentRegularExpression = contentRegularExpression;
    return this;
  }

   /**
   * The content has to match the expression (GET and POST methods only)
   * @return contentRegularExpression
  **/
  @ApiModelProperty(value = "The content has to match the expression (GET and POST methods only)")
  public String getContentRegularExpression() {
    return contentRegularExpression;
  }

  public void setContentRegularExpression(String contentRegularExpression) {
    this.contentRegularExpression = contentRegularExpression;
  }

  public CreateUpdateHealthCheckFullPageCommand contentNegativeRegularExpression(String contentNegativeRegularExpression) {
    this.contentNegativeRegularExpression = contentNegativeRegularExpression;
    return this;
  }

   /**
   * The content cannot match the expression (GET and POST methods only)
   * @return contentNegativeRegularExpression
  **/
  @ApiModelProperty(value = "The content cannot match the expression (GET and POST methods only)")
  public String getContentNegativeRegularExpression() {
    return contentNegativeRegularExpression;
  }

  public void setContentNegativeRegularExpression(String contentNegativeRegularExpression) {
    this.contentNegativeRegularExpression = contentNegativeRegularExpression;
  }

  public CreateUpdateHealthCheckFullPageCommand port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Port
   * minimum: 0
   * maximum: 65535
   * @return port
  **/
  @ApiModelProperty(required = true, value = "Port")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public CreateUpdateHealthCheckFullPageCommand pageTimeout(Integer pageTimeout) {
    this.pageTimeout = pageTimeout;
    return this;
  }

   /**
   * Time limit for the main page body [ms]
   * minimum: 1
   * maximum: 120000
   * @return pageTimeout
  **/
  @ApiModelProperty(required = true, value = "Time limit for the main page body [ms]")
  public Integer getPageTimeout() {
    return pageTimeout;
  }

  public void setPageTimeout(Integer pageTimeout) {
    this.pageTimeout = pageTimeout;
  }

  public CreateUpdateHealthCheckFullPageCommand elementTimeout(Integer elementTimeout) {
    this.elementTimeout = elementTimeout;
    return this;
  }

   /**
   * Time limit for each page elements [ms]
   * minimum: 1
   * maximum: 120000
   * @return elementTimeout
  **/
  @ApiModelProperty(required = true, value = "Time limit for each page elements [ms]")
  public Integer getElementTimeout() {
    return elementTimeout;
  }

  public void setElementTimeout(Integer elementTimeout) {
    this.elementTimeout = elementTimeout;
  }

  public CreateUpdateHealthCheckFullPageCommand elementsTotalTimeout(Integer elementsTotalTimeout) {
    this.elementsTotalTimeout = elementsTotalTimeout;
    return this;
  }

   /**
   * Time limit for all page elements [ms]
   * minimum: 1
   * maximum: 120000
   * @return elementsTotalTimeout
  **/
  @ApiModelProperty(required = true, value = "Time limit for all page elements [ms]")
  public Integer getElementsTotalTimeout() {
    return elementsTotalTimeout;
  }

  public void setElementsTotalTimeout(Integer elementsTotalTimeout) {
    this.elementsTotalTimeout = elementsTotalTimeout;
  }

  public CreateUpdateHealthCheckFullPageCommand fetchPageElements(Boolean fetchPageElements) {
    this.fetchPageElements = fetchPageElements;
    return this;
  }

   /**
   * Fetch page elements
   * @return fetchPageElements
  **/
  @ApiModelProperty(required = true, value = "Fetch page elements")
  public Boolean isFetchPageElements() {
    return fetchPageElements;
  }

  public void setFetchPageElements(Boolean fetchPageElements) {
    this.fetchPageElements = fetchPageElements;
  }

  public CreateUpdateHealthCheckFullPageCommand maxRedirects(Integer maxRedirects) {
    this.maxRedirects = maxRedirects;
    return this;
  }

   /**
   * Maximum length of HTTP redirects sequence
   * minimum: 0
   * maximum: 20
   * @return maxRedirects
  **/
  @ApiModelProperty(required = true, value = "Maximum length of HTTP redirects sequence")
  public Integer getMaxRedirects() {
    return maxRedirects;
  }

  public void setMaxRedirects(Integer maxRedirects) {
    this.maxRedirects = maxRedirects;
  }

  public CreateUpdateHealthCheckFullPageCommand maxParallelRequests(Integer maxParallelRequests) {
    this.maxParallelRequests = maxParallelRequests;
    return this;
  }

   /**
   * Maximum number of HTTP requests run in parallel
   * minimum: 0
   * maximum: 20
   * @return maxParallelRequests
  **/
  @ApiModelProperty(required = true, value = "Maximum number of HTTP requests run in parallel")
  public Integer getMaxParallelRequests() {
    return maxParallelRequests;
  }

  public void setMaxParallelRequests(Integer maxParallelRequests) {
    this.maxParallelRequests = maxParallelRequests;
  }

  public CreateUpdateHealthCheckFullPageCommand generateHar(Boolean generateHar) {
    this.generateHar = generateHar;
    return this;
  }

   /**
   * Generate a HAR file for each check
   * @return generateHar
  **/
  @ApiModelProperty(required = true, value = "Generate a HAR file for each check")
  public Boolean isGenerateHar() {
    return generateHar;
  }

  public void setGenerateHar(Boolean generateHar) {
    this.generateHar = generateHar;
  }

  public CreateUpdateHealthCheckFullPageCommand allowedElementErrorCount(Integer allowedElementErrorCount) {
    this.allowedElementErrorCount = allowedElementErrorCount;
    return this;
  }

   /**
   * Number of elements that may not be fetched correctly
   * minimum: 0
   * maximum: 10000
   * @return allowedElementErrorCount
  **/
  @ApiModelProperty(value = "Number of elements that may not be fetched correctly")
  public Integer getAllowedElementErrorCount() {
    return allowedElementErrorCount;
  }

  public void setAllowedElementErrorCount(Integer allowedElementErrorCount) {
    this.allowedElementErrorCount = allowedElementErrorCount;
  }

  public CreateUpdateHealthCheckFullPageCommand contentSizeLimit(Integer contentSizeLimit) {
    this.contentSizeLimit = contentSizeLimit;
    return this;
  }

   /**
   * Content size limit (bytes)
   * minimum: 1
   * maximum: 104857600
   * @return contentSizeLimit
  **/
  @ApiModelProperty(value = "Content size limit (bytes)")
  public Integer getContentSizeLimit() {
    return contentSizeLimit;
  }

  public void setContentSizeLimit(Integer contentSizeLimit) {
    this.contentSizeLimit = contentSizeLimit;
  }

  public CreateUpdateHealthCheckFullPageCommand ignoreHtmlParsingTime(Boolean ignoreHtmlParsingTime) {
    this.ignoreHtmlParsingTime = ignoreHtmlParsingTime;
    return this;
  }

   /**
   * Ignore HTML code processing time in results
   * @return ignoreHtmlParsingTime
  **/
  @ApiModelProperty(required = true, value = "Ignore HTML code processing time in results")
  public Boolean isIgnoreHtmlParsingTime() {
    return ignoreHtmlParsingTime;
  }

  public void setIgnoreHtmlParsingTime(Boolean ignoreHtmlParsingTime) {
    this.ignoreHtmlParsingTime = ignoreHtmlParsingTime;
  }

  public CreateUpdateHealthCheckFullPageCommand saveCookies(Boolean saveCookies) {
    this.saveCookies = saveCookies;
    return this;
  }

   /**
   * Save cookies between checks
   * @return saveCookies
  **/
  @ApiModelProperty(required = true, value = "Save cookies between checks")
  public Boolean isSaveCookies() {
    return saveCookies;
  }

  public void setSaveCookies(Boolean saveCookies) {
    this.saveCookies = saveCookies;
  }

  public CreateUpdateHealthCheckFullPageCommand disableContentEncoding(Boolean disableContentEncoding) {
    this.disableContentEncoding = disableContentEncoding;
    return this;
  }

   /**
   * Disable HTTP transfer compression
   * @return disableContentEncoding
  **/
  @ApiModelProperty(required = true, value = "Disable HTTP transfer compression")
  public Boolean isDisableContentEncoding() {
    return disableContentEncoding;
  }

  public void setDisableContentEncoding(Boolean disableContentEncoding) {
    this.disableContentEncoding = disableContentEncoding;
  }

  public CreateUpdateHealthCheckFullPageCommand content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Content
   * @return content
  **/
  @ApiModelProperty(value = "Content")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public CreateUpdateHealthCheckFullPageCommand contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * Content type
   * @return contentType
  **/
  @ApiModelProperty(value = "Content type")
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }

  public CreateUpdateHealthCheckFullPageCommand ignoredElementsFilter(String ignoredElementsFilter) {
    this.ignoredElementsFilter = ignoredElementsFilter;
    return this;
  }

   /**
   * Ignore errors for elements with URLs matching the expression (only if page elements are fetched)
   * @return ignoredElementsFilter
  **/
  @ApiModelProperty(value = "Ignore errors for elements with URLs matching the expression (only if page elements are fetched)")
  public String getIgnoredElementsFilter() {
    return ignoredElementsFilter;
  }

  public void setIgnoredElementsFilter(String ignoredElementsFilter) {
    this.ignoredElementsFilter = ignoredElementsFilter;
  }

  public CreateUpdateHealthCheckFullPageCommand elementsFilter(String elementsFilter) {
    this.elementsFilter = elementsFilter;
    return this;
  }

   /**
   * Do not fetch elements with URLs that match the expression
   * @return elementsFilter
  **/
  @ApiModelProperty(value = "Do not fetch elements with URLs that match the expression")
  public String getElementsFilter() {
    return elementsFilter;
  }

  public void setElementsFilter(String elementsFilter) {
    this.elementsFilter = elementsFilter;
  }

  public CreateUpdateHealthCheckFullPageCommand errorTolerance(Integer errorTolerance) {
    this.errorTolerance = errorTolerance;
    return this;
  }

   /**
   * How many (%) locations have to report an error to consider it a breakdown
   * minimum: 1
   * maximum: 100
   * @return errorTolerance
  **/
  @ApiModelProperty(required = true, value = "How many (%) locations have to report an error to consider it a breakdown")
  public Integer getErrorTolerance() {
    return errorTolerance;
  }

  public void setErrorTolerance(Integer errorTolerance) {
    this.errorTolerance = errorTolerance;
  }

  public CreateUpdateHealthCheckFullPageCommand name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Health check name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Health check name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CreateUpdateHealthCheckFullPageCommand address(String address) {
    this.address = address;
    return this;
  }

   /**
   * URL or IP address of the monitored service
   * @return address
  **/
  @ApiModelProperty(required = true, value = "URL or IP address of the monitored service")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public CreateUpdateHealthCheckFullPageCommand interval(Integer interval) {
    this.interval = interval;
    return this;
  }

   /**
   * Time interval between health checks, in seconds
   * @return interval
  **/
  @ApiModelProperty(required = true, value = "Time interval between health checks, in seconds")
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }

  public CreateUpdateHealthCheckFullPageCommand paused(Boolean paused) {
    this.paused = paused;
    return this;
  }

   /**
   * Is paused
   * @return paused
  **/
  @ApiModelProperty(required = true, value = "Is paused")
  public Boolean isPaused() {
    return paused;
  }

  public void setPaused(Boolean paused) {
    this.paused = paused;
  }

  public CreateUpdateHealthCheckFullPageCommand locationsFailoverEnabled(Boolean locationsFailoverEnabled) {
    this.locationsFailoverEnabled = locationsFailoverEnabled;
    return this;
  }

   /**
   * Use random substitute locations in case of location breakdown
   * @return locationsFailoverEnabled
  **/
  @ApiModelProperty(required = true, value = "Use random substitute locations in case of location breakdown")
  public Boolean isLocationsFailoverEnabled() {
    return locationsFailoverEnabled;
  }

  public void setLocationsFailoverEnabled(Boolean locationsFailoverEnabled) {
    this.locationsFailoverEnabled = locationsFailoverEnabled;
  }

  public CreateUpdateHealthCheckFullPageCommand notificationTypeIds(List<Integer> notificationTypeIds) {
    this.notificationTypeIds = notificationTypeIds;
    return this;
  }

  public CreateUpdateHealthCheckFullPageCommand addNotificationTypeIdsItem(Integer notificationTypeIdsItem) {
    if (this.notificationTypeIds == null) {
      this.notificationTypeIds = new ArrayList<Integer>();
    }
    this.notificationTypeIds.add(notificationTypeIdsItem);
    return this;
  }

   /**
   * Notification types enabled for a health check
   * @return notificationTypeIds
  **/
  @ApiModelProperty(value = "Notification types enabled for a health check")
  public List<Integer> getNotificationTypeIds() {
    return notificationTypeIds;
  }

  public void setNotificationTypeIds(List<Integer> notificationTypeIds) {
    this.notificationTypeIds = notificationTypeIds;
  }

  public CreateUpdateHealthCheckFullPageCommand notificationEventTypeIds(List<Integer> notificationEventTypeIds) {
    this.notificationEventTypeIds = notificationEventTypeIds;
    return this;
  }

  public CreateUpdateHealthCheckFullPageCommand addNotificationEventTypeIdsItem(Integer notificationEventTypeIdsItem) {
    if (this.notificationEventTypeIds == null) {
      this.notificationEventTypeIds = new ArrayList<Integer>();
    }
    this.notificationEventTypeIds.add(notificationEventTypeIdsItem);
    return this;
  }

   /**
   * Event types with enabled notification
   * @return notificationEventTypeIds
  **/
  @ApiModelProperty(value = "Event types with enabled notification")
  public List<Integer> getNotificationEventTypeIds() {
    return notificationEventTypeIds;
  }

  public void setNotificationEventTypeIds(List<Integer> notificationEventTypeIds) {
    this.notificationEventTypeIds = notificationEventTypeIds;
  }

  public CreateUpdateHealthCheckFullPageCommand notificationTimeId(Integer notificationTimeId) {
    this.notificationTimeId = notificationTimeId;
    return this;
  }

   /**
   * Time when notification is sent
   * @return notificationTimeId
  **/
  @ApiModelProperty(required = true, value = "Time when notification is sent")
  public Integer getNotificationTimeId() {
    return notificationTimeId;
  }

  public void setNotificationTimeId(Integer notificationTimeId) {
    this.notificationTimeId = notificationTimeId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUpdateHealthCheckFullPageCommand createUpdateHealthCheckFullPageCommand = (CreateUpdateHealthCheckFullPageCommand) o;
    return Objects.equals(this.httpMethodId, createUpdateHealthCheckFullPageCommand.httpMethodId) &&
        Objects.equals(this.contentRegularExpression, createUpdateHealthCheckFullPageCommand.contentRegularExpression) &&
        Objects.equals(this.contentNegativeRegularExpression, createUpdateHealthCheckFullPageCommand.contentNegativeRegularExpression) &&
        Objects.equals(this.port, createUpdateHealthCheckFullPageCommand.port) &&
        Objects.equals(this.pageTimeout, createUpdateHealthCheckFullPageCommand.pageTimeout) &&
        Objects.equals(this.elementTimeout, createUpdateHealthCheckFullPageCommand.elementTimeout) &&
        Objects.equals(this.elementsTotalTimeout, createUpdateHealthCheckFullPageCommand.elementsTotalTimeout) &&
        Objects.equals(this.fetchPageElements, createUpdateHealthCheckFullPageCommand.fetchPageElements) &&
        Objects.equals(this.maxRedirects, createUpdateHealthCheckFullPageCommand.maxRedirects) &&
        Objects.equals(this.maxParallelRequests, createUpdateHealthCheckFullPageCommand.maxParallelRequests) &&
        Objects.equals(this.generateHar, createUpdateHealthCheckFullPageCommand.generateHar) &&
        Objects.equals(this.allowedElementErrorCount, createUpdateHealthCheckFullPageCommand.allowedElementErrorCount) &&
        Objects.equals(this.contentSizeLimit, createUpdateHealthCheckFullPageCommand.contentSizeLimit) &&
        Objects.equals(this.ignoreHtmlParsingTime, createUpdateHealthCheckFullPageCommand.ignoreHtmlParsingTime) &&
        Objects.equals(this.saveCookies, createUpdateHealthCheckFullPageCommand.saveCookies) &&
        Objects.equals(this.disableContentEncoding, createUpdateHealthCheckFullPageCommand.disableContentEncoding) &&
        Objects.equals(this.content, createUpdateHealthCheckFullPageCommand.content) &&
        Objects.equals(this.contentType, createUpdateHealthCheckFullPageCommand.contentType) &&
        Objects.equals(this.ignoredElementsFilter, createUpdateHealthCheckFullPageCommand.ignoredElementsFilter) &&
        Objects.equals(this.elementsFilter, createUpdateHealthCheckFullPageCommand.elementsFilter) &&
        Objects.equals(this.errorTolerance, createUpdateHealthCheckFullPageCommand.errorTolerance) &&
        Objects.equals(this.name, createUpdateHealthCheckFullPageCommand.name) &&
        Objects.equals(this.address, createUpdateHealthCheckFullPageCommand.address) &&
        Objects.equals(this.interval, createUpdateHealthCheckFullPageCommand.interval) &&
        Objects.equals(this.paused, createUpdateHealthCheckFullPageCommand.paused) &&
        Objects.equals(this.locationsFailoverEnabled, createUpdateHealthCheckFullPageCommand.locationsFailoverEnabled) &&
        Objects.equals(this.notificationTypeIds, createUpdateHealthCheckFullPageCommand.notificationTypeIds) &&
        Objects.equals(this.notificationEventTypeIds, createUpdateHealthCheckFullPageCommand.notificationEventTypeIds) &&
        Objects.equals(this.notificationTimeId, createUpdateHealthCheckFullPageCommand.notificationTimeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpMethodId, contentRegularExpression, contentNegativeRegularExpression, port, pageTimeout, elementTimeout, elementsTotalTimeout, fetchPageElements, maxRedirects, maxParallelRequests, generateHar, allowedElementErrorCount, contentSizeLimit, ignoreHtmlParsingTime, saveCookies, disableContentEncoding, content, contentType, ignoredElementsFilter, elementsFilter, errorTolerance, name, address, interval, paused, locationsFailoverEnabled, notificationTypeIds, notificationEventTypeIds, notificationTimeId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUpdateHealthCheckFullPageCommand {\n");
    
    sb.append("    httpMethodId: ").append(toIndentedString(httpMethodId)).append("\n");
    sb.append("    contentRegularExpression: ").append(toIndentedString(contentRegularExpression)).append("\n");
    sb.append("    contentNegativeRegularExpression: ").append(toIndentedString(contentNegativeRegularExpression)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    pageTimeout: ").append(toIndentedString(pageTimeout)).append("\n");
    sb.append("    elementTimeout: ").append(toIndentedString(elementTimeout)).append("\n");
    sb.append("    elementsTotalTimeout: ").append(toIndentedString(elementsTotalTimeout)).append("\n");
    sb.append("    fetchPageElements: ").append(toIndentedString(fetchPageElements)).append("\n");
    sb.append("    maxRedirects: ").append(toIndentedString(maxRedirects)).append("\n");
    sb.append("    maxParallelRequests: ").append(toIndentedString(maxParallelRequests)).append("\n");
    sb.append("    generateHar: ").append(toIndentedString(generateHar)).append("\n");
    sb.append("    allowedElementErrorCount: ").append(toIndentedString(allowedElementErrorCount)).append("\n");
    sb.append("    contentSizeLimit: ").append(toIndentedString(contentSizeLimit)).append("\n");
    sb.append("    ignoreHtmlParsingTime: ").append(toIndentedString(ignoreHtmlParsingTime)).append("\n");
    sb.append("    saveCookies: ").append(toIndentedString(saveCookies)).append("\n");
    sb.append("    disableContentEncoding: ").append(toIndentedString(disableContentEncoding)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    ignoredElementsFilter: ").append(toIndentedString(ignoredElementsFilter)).append("\n");
    sb.append("    elementsFilter: ").append(toIndentedString(elementsFilter)).append("\n");
    sb.append("    errorTolerance: ").append(toIndentedString(errorTolerance)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    locationsFailoverEnabled: ").append(toIndentedString(locationsFailoverEnabled)).append("\n");
    sb.append("    notificationTypeIds: ").append(toIndentedString(notificationTypeIds)).append("\n");
    sb.append("    notificationEventTypeIds: ").append(toIndentedString(notificationEventTypeIds)).append("\n");
    sb.append("    notificationTimeId: ").append(toIndentedString(notificationTimeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

