/*
 * Oktawave API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.oktawave.api.client.handler;

import com.google.gson.reflect.TypeToken;
import com.oktawave.api.client.model.ApiCollectionClientStatistics;
import com.oktawave.api.client.model.ApiCollectionDictionaryItem;
import com.oktawave.api.client.model.ApiCollectionInstanceStatistics;
import org.threeten.bp.OffsetDateTime;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatisticsApi {
    private ApiClient apiClient;

    public StatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for statisticsGetClientStatistics
     * @param dateFrom Date from (utc timezone) (required)
     * @param dateTo Date to (utc timezone) (required)
     * @param statisticTypes Statistic types (required)
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call statisticsGetClientStatisticsCall(OffsetDateTime dateFrom, OffsetDateTime dateTo, List<Integer> statisticTypes, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateFrom", dateFrom));
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateTo", dateTo));
        if (statisticTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "statisticTypes", statisticTypes));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call statisticsGetClientStatisticsValidateBeforeCall(OffsetDateTime dateFrom, OffsetDateTime dateTo, List<Integer> statisticTypes, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling statisticsGetClientStatistics(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling statisticsGetClientStatistics(Async)");
        }

        // verify the required parameter 'statisticTypes' is set
        if (statisticTypes == null) {
            throw new ApiException("Missing the required parameter 'statisticTypes' when calling statisticsGetClientStatistics(Async)");
        }


        com.squareup.okhttp.Call call = statisticsGetClientStatisticsCall(dateFrom, dateTo, statisticTypes, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets client statistics
     *
     * @param dateFrom Date from (utc timezone) (required)
     * @param dateTo Date to (utc timezone) (required)
     * @param statisticTypes Statistic types (required)
     * @param fields Response fields filter (optional)
     * @return ApiCollectionClientStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionClientStatistics statisticsGetClientStatistics(OffsetDateTime dateFrom, OffsetDateTime dateTo, List<Integer> statisticTypes, String fields) throws ApiException {
        ApiResponse<ApiCollectionClientStatistics> resp = statisticsGetClientStatisticsWithHttpInfo(dateFrom, dateTo, statisticTypes, fields);
        return resp.getData();
    }

    /**
     * Gets client statistics
     *
     * @param dateFrom Date from (utc timezone) (required)
     * @param dateTo Date to (utc timezone) (required)
     * @param statisticTypes Statistic types (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionClientStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionClientStatistics> statisticsGetClientStatisticsWithHttpInfo(OffsetDateTime dateFrom, OffsetDateTime dateTo, List<Integer> statisticTypes, String fields) throws ApiException {
        com.squareup.okhttp.Call call = statisticsGetClientStatisticsValidateBeforeCall(dateFrom, dateTo, statisticTypes, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionClientStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets client statistics (asynchronously)
     *
     * @param dateFrom Date from (utc timezone) (required)
     * @param dateTo Date to (utc timezone) (required)
     * @param statisticTypes Statistic types (required)
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call statisticsGetClientStatisticsAsync(OffsetDateTime dateFrom, OffsetDateTime dateTo, List<Integer> statisticTypes, String fields, final ApiCallback<ApiCollectionClientStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = statisticsGetClientStatisticsValidateBeforeCall(dateFrom, dateTo, statisticTypes, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionClientStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for statisticsGetInstanceStatistics
     * @param id Id (required)
     * @param statisticInterval Statistic interval (required)
     * @param dateFrom Date from (utc timezone) (required)
     * @param dateTo Date to (utc timezone) (required)
     * @param statisticTypes Statistic types (required)
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call statisticsGetInstanceStatisticsCall(Integer id, Integer statisticInterval, OffsetDateTime dateFrom, OffsetDateTime dateTo, List<Integer> statisticTypes, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/instances/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (statisticInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statisticInterval", statisticInterval));
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateFrom", dateFrom));
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateTo", dateTo));
        if (statisticTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "statisticTypes", statisticTypes));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call statisticsGetInstanceStatisticsValidateBeforeCall(Integer id, Integer statisticInterval, OffsetDateTime dateFrom, OffsetDateTime dateTo, List<Integer> statisticTypes, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling statisticsGetInstanceStatistics(Async)");
        }

        // verify the required parameter 'statisticInterval' is set
        if (statisticInterval == null) {
            throw new ApiException("Missing the required parameter 'statisticInterval' when calling statisticsGetInstanceStatistics(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling statisticsGetInstanceStatistics(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling statisticsGetInstanceStatistics(Async)");
        }

        // verify the required parameter 'statisticTypes' is set
        if (statisticTypes == null) {
            throw new ApiException("Missing the required parameter 'statisticTypes' when calling statisticsGetInstanceStatistics(Async)");
        }


        com.squareup.okhttp.Call call = statisticsGetInstanceStatisticsCall(id, statisticInterval, dateFrom, dateTo, statisticTypes, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets instance statistics
     *
     * @param id Id (required)
     * @param statisticInterval Statistic interval (required)
     * @param dateFrom Date from (utc timezone) (required)
     * @param dateTo Date to (utc timezone) (required)
     * @param statisticTypes Statistic types (required)
     * @param fields Response fields filter (optional)
     * @return ApiCollectionInstanceStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionInstanceStatistics statisticsGetInstanceStatistics(Integer id, Integer statisticInterval, OffsetDateTime dateFrom, OffsetDateTime dateTo, List<Integer> statisticTypes, String fields) throws ApiException {
        ApiResponse<ApiCollectionInstanceStatistics> resp = statisticsGetInstanceStatisticsWithHttpInfo(id, statisticInterval, dateFrom, dateTo, statisticTypes, fields);
        return resp.getData();
    }

    /**
     * Gets instance statistics
     *
     * @param id Id (required)
     * @param statisticInterval Statistic interval (required)
     * @param dateFrom Date from (utc timezone) (required)
     * @param dateTo Date to (utc timezone) (required)
     * @param statisticTypes Statistic types (required)
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionInstanceStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionInstanceStatistics> statisticsGetInstanceStatisticsWithHttpInfo(Integer id, Integer statisticInterval, OffsetDateTime dateFrom, OffsetDateTime dateTo, List<Integer> statisticTypes, String fields) throws ApiException {
        com.squareup.okhttp.Call call = statisticsGetInstanceStatisticsValidateBeforeCall(id, statisticInterval, dateFrom, dateTo, statisticTypes, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionInstanceStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets instance statistics (asynchronously)
     *
     * @param id Id (required)
     * @param statisticInterval Statistic interval (required)
     * @param dateFrom Date from (utc timezone) (required)
     * @param dateTo Date to (utc timezone) (required)
     * @param statisticTypes Statistic types (required)
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call statisticsGetInstanceStatisticsAsync(Integer id, Integer statisticInterval, OffsetDateTime dateFrom, OffsetDateTime dateTo, List<Integer> statisticTypes, String fields, final ApiCallback<ApiCollectionInstanceStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = statisticsGetInstanceStatisticsValidateBeforeCall(id, statisticInterval, dateFrom, dateTo, statisticTypes, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionInstanceStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for statisticsGetStatisticIntervals
     * @param fields Response fields filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call statisticsGetStatisticIntervalsCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/dictionaries/intervals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call statisticsGetStatisticIntervalsValidateBeforeCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = statisticsGetStatisticIntervalsCall(fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets statistic interval types
     * 
     * @param fields Response fields filter (optional)
     * @return ApiCollectionDictionaryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiCollectionDictionaryItem statisticsGetStatisticIntervals(String fields) throws ApiException {
        ApiResponse<ApiCollectionDictionaryItem> resp = statisticsGetStatisticIntervalsWithHttpInfo(fields);
        return resp.getData();
    }

    /**
     * Gets statistic interval types
     * 
     * @param fields Response fields filter (optional)
     * @return ApiResponse&lt;ApiCollectionDictionaryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiCollectionDictionaryItem> statisticsGetStatisticIntervalsWithHttpInfo(String fields) throws ApiException {
        com.squareup.okhttp.Call call = statisticsGetStatisticIntervalsValidateBeforeCall(fields, null, null);
        Type localVarReturnType = new TypeToken<ApiCollectionDictionaryItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets statistic interval types (asynchronously)
     * 
     * @param fields Response fields filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call statisticsGetStatisticIntervalsAsync(String fields, final ApiCallback<ApiCollectionDictionaryItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = statisticsGetStatisticIntervalsValidateBeforeCall(fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiCollectionDictionaryItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
