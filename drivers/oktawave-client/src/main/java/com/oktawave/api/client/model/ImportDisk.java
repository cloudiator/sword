/*
 * Oktawave API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.oktawave.api.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Disk of imported OCI
 */
@ApiModel(description = "Disk of imported OCI")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-03T15:23:33.358+01:00")
public class ImportDisk {
  @SerializedName("Id")
  private Integer id = null;

  @SerializedName("Capacity")
  private Integer capacity = null;

  @SerializedName("DiskName")
  private String diskName = null;

  @SerializedName("RelativePath")
  private String relativePath = null;

  @SerializedName("Controller")
  private Integer controller = null;

  @SerializedName("ControllerSlot")
  private Integer controllerSlot = null;

  public ImportDisk id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Id of disk
   * @return id
  **/
  @ApiModelProperty(value = "Id of disk")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public ImportDisk capacity(Integer capacity) {
    this.capacity = capacity;
    return this;
  }

   /**
   * Capacity in GB
   * @return capacity
  **/
  @ApiModelProperty(value = "Capacity in GB")
  public Integer getCapacity() {
    return capacity;
  }

  public void setCapacity(Integer capacity) {
    this.capacity = capacity;
  }

  public ImportDisk diskName(String diskName) {
    this.diskName = diskName;
    return this;
  }

   /**
   * Disk name
   * @return diskName
  **/
  @ApiModelProperty(value = "Disk name")
  public String getDiskName() {
    return diskName;
  }

  public void setDiskName(String diskName) {
    this.diskName = diskName;
  }

  public ImportDisk relativePath(String relativePath) {
    this.relativePath = relativePath;
    return this;
  }

   /**
   * Relative path
   * @return relativePath
  **/
  @ApiModelProperty(value = "Relative path")
  public String getRelativePath() {
    return relativePath;
  }

  public void setRelativePath(String relativePath) {
    this.relativePath = relativePath;
  }

  public ImportDisk controller(Integer controller) {
    this.controller = controller;
    return this;
  }

   /**
   * Controller index
   * @return controller
  **/
  @ApiModelProperty(value = "Controller index")
  public Integer getController() {
    return controller;
  }

  public void setController(Integer controller) {
    this.controller = controller;
  }

  public ImportDisk controllerSlot(Integer controllerSlot) {
    this.controllerSlot = controllerSlot;
    return this;
  }

   /**
   * Controller slot index
   * @return controllerSlot
  **/
  @ApiModelProperty(value = "Controller slot index")
  public Integer getControllerSlot() {
    return controllerSlot;
  }

  public void setControllerSlot(Integer controllerSlot) {
    this.controllerSlot = controllerSlot;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportDisk importDisk = (ImportDisk) o;
    return Objects.equals(this.id, importDisk.id) &&
        Objects.equals(this.capacity, importDisk.capacity) &&
        Objects.equals(this.diskName, importDisk.diskName) &&
        Objects.equals(this.relativePath, importDisk.relativePath) &&
        Objects.equals(this.controller, importDisk.controller) &&
        Objects.equals(this.controllerSlot, importDisk.controllerSlot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, capacity, diskName, relativePath, controller, controllerSlot);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportDisk {\n");

      sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    diskName: ").append(toIndentedString(diskName)).append("\n");
    sb.append("    relativePath: ").append(toIndentedString(relativePath)).append("\n");
    sb.append("    controller: ").append(toIndentedString(controller)).append("\n");
    sb.append("    controllerSlot: ").append(toIndentedString(controllerSlot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

