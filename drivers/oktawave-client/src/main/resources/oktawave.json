{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Oktawave API"
  },
  "host": "api.oktawave.com",
  "basePath": "/beta",
  "schemes": [
    "https"
  ],
  "paths": {
    "/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Returns account details",
        "operationId": "Account_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/account/sshkeys": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Returns SSH keys",
        "description": "Acceptable order values are: OwnerUser, Name",
        "operationId": "Account_GetSshKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[SshKey]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Creates new SSH key for user",
        "operationId": "Account_PostSshKey",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create SSH key command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSshKeyCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SshKey"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/account/sshkeys/{sshKeyId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Returns SSH key",
        "operationId": "Account_GetSshKey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "sshKeyId",
            "in": "path",
            "description": "SSH key id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SshKey"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Deletes SSH key",
        "operationId": "Account_DeleteSshKey",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "sshKeyId",
            "in": "path",
            "description": "SSH key id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/dictionaries": {
      "get": {
        "tags": [
          "Dictionaries"
        ],
        "summary": "Returns dictionaries",
        "operationId": "Dictionaries_GetDictionaries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Dictionary]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/dictionaries/languages": {
      "get": {
        "tags": [
          "Dictionaries"
        ],
        "summary": "Returns languages",
        "operationId": "Dictionaries_GetLanguages",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[DictionaryItem]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/dictionaries/{ids}": {
      "get": {
        "tags": [
          "Dictionaries"
        ],
        "summary": "Returns dictionaries items",
        "operationId": "Dictionaries_GetDictionariesItems",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "Dictionaries ids",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[DictionaryItem]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/opns": {
      "get": {
        "tags": [
          "Networking"
        ],
        "summary": "Returns OPNs",
        "description": "Acceptable order values are: Name",
        "operationId": "Opns_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "instanceId",
            "in": "query",
            "description": "Instance id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Opn]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Networking"
        ],
        "summary": "Creates an OPN",
        "operationId": "Opns_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create OPN command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOpnCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/opns/{id}": {
      "put": {
        "tags": [
          "Networking"
        ],
        "summary": "Updates OPN",
        "operationId": "Opns_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "OPN id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Update OPN command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOpnCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Networking"
        ],
        "summary": "Deletes an OPN",
        "operationId": "Opns_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "OPN id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances": {
      "get": {
        "tags": [
          "OCI"
        ],
        "summary": "Returns instance list",
        "description": "Acceptable order values are: Type, Status, CreationDate, Name.",
        "operationId": "Instances_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "templateTypeId",
            "in": "query",
            "description": "Template type id eg marketplace, oci instance",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "isTurnedOn",
            "in": "query",
            "description": "Indicates wether an instance is turned on",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "subregionId",
            "in": "query",
            "description": "Subregion Id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "Type Id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Instance]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Creates instance",
        "operationId": "Instances_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create instance command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateInstanceCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/software": {
      "get": {
        "tags": [
          "OCI"
        ],
        "summary": "Returns software",
        "operationId": "Instances_GetSoftware",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Software]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/types": {
      "get": {
        "tags": [
          "OCI"
        ],
        "summary": "Returns all available instances types",
        "description": "Acceptable order values are: Category, Cpu, Ram, Name.",
        "operationId": "Instances_GetInstancesTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "description": "Category id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "availableForFreemium",
            "in": "query",
            "description": "Is available for freemium",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[InstanceType]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/types/{id}": {
      "get": {
        "tags": [
          "OCI"
        ],
        "summary": "Returns instance type",
        "operationId": "Instances_GetInstanceType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance type id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[InstanceType]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}": {
      "get": {
        "tags": [
          "OCI"
        ],
        "summary": "Returns instance by identifier",
        "operationId": "Instances_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI"
        ],
        "summary": "Delete instance",
        "operationId": "Instances_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifie",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deep",
            "in": "query",
            "description": "Deletes also additional disks attached to instance",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/access_data": {
      "get": {
        "tags": [
          "OCI"
        ],
        "summary": "Returns instance access data",
        "operationId": "Instances_GetAccessData",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccessData"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/change_name_ticket": {
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Change instance name",
        "operationId": "Instances_ChangeName",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of an instance",
            "required": true,
            "type": "string",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "^[^/\\\\|<>%]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/change_scsi_controllers_type_ticket": {
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Change SCSI controllers type",
        "operationId": "Instances_ChangeType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "scsiControllerTypeId",
            "in": "query",
            "description": "Type id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/change_subregion_ticket": {
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Change instance subregion",
        "operationId": "Instances_ChangeSubregion",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Change instance subregion command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeInstanceSubregionCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/change_type_ticket": {
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Change instance type",
        "operationId": "Instances_ChangeType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "Type id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/clone_ticket": {
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Clone instance",
        "operationId": "Instances_Clone",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Clone instance command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloneInstanceCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/convert_to_template_ticket": {
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Converts instance to template",
        "operationId": "Instances_ConvertToTemplate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Convert instance to template command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConvertInstanceToTemplateCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/disks": {
      "get": {
        "tags": [
          "OCI"
        ],
        "summary": "Returns instance disk list",
        "description": "Acceptable order values are: SpaceCapacity, Name, Tier, IsShared, Subregion",
        "operationId": "Instances_GetDisks",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "diskType",
            "in": "query",
            "description": "Disk type",
            "required": false,
            "type": "string",
            "enum": [
              "All",
              "System",
              "Custom"
            ]
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Disk]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/power_off_ticket": {
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Power off instance",
        "operationId": "Instances_PowerOff",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/power_on_ticket": {
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Power on instance",
        "operationId": "Instances_PowerOn",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/reboot_ticket": {
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Reboot instance",
        "operationId": "Instances_Reboot",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/remote_console_connection": {
      "get": {
        "tags": [
          "OCI"
        ],
        "summary": "Returns remote console connection",
        "operationId": "Instances_GetVncConnection",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VncConnection"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OCI"
        ],
        "summary": "Updates remote console connection",
        "operationId": "Instances_UpdateVncConnection",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Update remote console connection command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateVncConnectionCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VncConnection"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Creates remote console connection",
        "operationId": "Instances_CreateVncConnection",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create remote console connection command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateVncConnectionCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VncConnection"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI"
        ],
        "summary": "Deletes remote console connection",
        "operationId": "Instances_DeleteVncConnection",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/reset_ticket": {
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Reset instance",
        "operationId": "Instances_Reset",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/screenshot": {
      "get": {
        "tags": [
          "OCI"
        ],
        "summary": "Returns instance screenshot",
        "operationId": "Instances_GetScreenshot",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "width",
            "in": "query",
            "description": "The pixel width of the scaled image",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 3000,
            "minimum": 1
          },
          {
            "name": "height",
            "in": "query",
            "description": "The pixel height of the scaled image",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 3000,
            "minimum": 1
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/shutdown_ticket": {
      "post": {
        "tags": [
          "OCI"
        ],
        "summary": "Shutdown instance",
        "operationId": "Instances_Shutdown",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/software": {
      "get": {
        "tags": [
          "OCI"
        ],
        "summary": "Returns instance software",
        "operationId": "Instances_GetInstanceSoftware",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Software]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/ssh_keys": {
      "get": {
        "tags": [
          "OCI"
        ],
        "summary": "Returns SSH keys uploaded to instances",
        "operationId": "Instances_GetSshKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[InstanceSshKey]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/autoscaler": {
      "get": {
        "tags": [
          "OCI Autoscaler"
        ],
        "summary": "Returns instace autoscaler configuration",
        "operationId": "Instances_GetAutoscaler",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Autoscaler"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OCI Autoscaler"
        ],
        "summary": "Updates instance autoscaler configuration",
        "operationId": "Instances_UpdateAutoscaler",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutoscalerUpdateCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/autoscaler/disable_ticket": {
      "post": {
        "tags": [
          "OCI Autoscaler"
        ],
        "summary": "Disables autoscaling for instance",
        "operationId": "Instances_DisableInstanceAutoscaler",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/autoscaler/enable_ticket": {
      "post": {
        "tags": [
          "OCI Autoscaler"
        ],
        "summary": "Enables autoscaling for instance",
        "operationId": "Instances_EnableInstanceAutoscaler",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/exports": {
      "get": {
        "tags": [
          "OCI Backups"
        ],
        "summary": "Returns exports list",
        "description": "Acceptable order values are: TotalSpaceCapacity, CreationDate, OcsLocation, Name, StartDate, Status.",
        "operationId": "Exports_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "instanceId",
            "in": "query",
            "description": "Instance id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "statusId",
            "in": "query",
            "description": "Status id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Export]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/exports/{id}": {
      "get": {
        "tags": [
          "OCI Backups"
        ],
        "summary": "Gets export by identifier",
        "operationId": "Exports_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Export id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Export"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/imports": {
      "get": {
        "tags": [
          "OCI Backups"
        ],
        "summary": "Returns a list of imports",
        "description": "Acceptable order values are: Name, Status, CreationDate, DisksCount, NetworkInterfacesCount, Size",
        "operationId": "Imports_GetImports",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Import]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OCI Backups"
        ],
        "summary": "Creates an import",
        "operationId": "Imports_CreateImport",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create import command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateImportCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Import"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/imports/{id}": {
      "get": {
        "tags": [
          "OCI Backups"
        ],
        "summary": "Returns an import",
        "operationId": "Imports_GetImport",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Import identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Import"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI Backups"
        ],
        "summary": "Deletes an import",
        "operationId": "Imports_DeleteImport",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Import identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/imports/{id}/disks": {
      "get": {
        "tags": [
          "OCI Backups"
        ],
        "summary": "Returns an import disks",
        "operationId": "Imports_GetImportDisks",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Import identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[ImportDisk]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/imports/{id}/run_ticket": {
      "post": {
        "tags": [
          "OCI Backups"
        ],
        "summary": "Run an import",
        "operationId": "Imports_RunImport",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Import identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Run import command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunImportCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/exports": {
      "get": {
        "tags": [
          "OCI Backups"
        ],
        "summary": "Returns instace's exports",
        "operationId": "Instances_GetExports",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "statusId",
            "in": "query",
            "description": "Status id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Export]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OCI Backups"
        ],
        "summary": "Create export",
        "operationId": "Instances_PostExport",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create export command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateExportCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Export"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/events": {
      "get": {
        "tags": [
          "OCI Events"
        ],
        "summary": "Returns all instances events",
        "operationId": "Events_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "typeIds",
            "in": "query",
            "description": "Type IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusIds",
            "in": "query",
            "description": "Status IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Date from",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Date to",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[InstanceEvent]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/events/{id}": {
      "get": {
        "tags": [
          "OCI Events"
        ],
        "summary": "Returns instance event",
        "operationId": "Events_GetEvent",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[InstanceEvent]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI Events"
        ],
        "summary": "Deletes event",
        "operationId": "Events_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/events": {
      "get": {
        "tags": [
          "OCI Events"
        ],
        "summary": "Returns instance events",
        "description": "Acceptable order values are: OperationType, User, Date, Instance, OperationStatus",
        "operationId": "Instances_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Date from",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Date to",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "operationTypeId",
            "in": "query",
            "description": "Operation type id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[InstanceEvent]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI Events"
        ],
        "summary": "Deletes instance events",
        "operationId": "Instances_DeleteEvents",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Delete events command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteEventsCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Returns a list of groups",
        "description": "Acceptable order values are: Name",
        "operationId": "Groups_GetGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Group]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Creates group",
        "operationId": "Groups_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create group command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/groups/load_balancers": {
      "get": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Gets load balancers",
        "description": "Acceptable order values are: GroupName",
        "operationId": "Groups_GetLoadBalancers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[LoadBalancer]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/groups/schedulers/{id}": {
      "get": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Returns group scheduler",
        "operationId": "Groups_GetGroupScheduler",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group scheduler Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupScheduler"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Updates a group scheduler",
        "operationId": "Groups_UpdateGroupScheduler",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group scheduler Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create group scheduler command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateGroupSchedulerCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupScheduler"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Deletes group scheduler",
        "operationId": "Groups_DeleteGroupScheduler",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a group scheduler",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Returns group",
        "operationId": "Groups_GetGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Updates group",
        "operationId": "Groups_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a group",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Update group command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Deletes group",
        "operationId": "Groups_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a group",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/groups/{id}/assignments": {
      "get": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Returns group assignments",
        "operationId": "Groups_GetAssignmentsInGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a group",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[GroupAssignment]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Changes group assignments",
        "operationId": "Groups_ChangeAssignmentsInGroup",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a group",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Change group assignments command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeContainerAssignmentsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[GroupAssignment]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/groups/{id}/autoscaler": {
      "get": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Returns group autoscaler settings",
        "operationId": "Groups_GetGroupAutoscaler",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a group",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupAutoscaler"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Sets group autoscaler",
        "operationId": "Groups_SetGroupAutoscaler",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a group",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Set group autoscaler command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetGroupAutoscalerCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupAutoscaler"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Turns off group autoscaler",
        "operationId": "Groups_TurnoffGroupAutoscaler",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a group",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/groups/{id}/load_balancer": {
      "get": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Gets load balancer for group",
        "operationId": "LoadBalancers_GetLoadBalancer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Update load balancer for group",
        "operationId": "LoadBalancers_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Update load balancer command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetLoadBalancerCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Create load balancer for group",
        "operationId": "LoadBalancers_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create load balancer command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetLoadBalancerCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Delete load balancer",
        "operationId": "LoadBalancers_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/groups/{id}/load_balancer/details": {
      "get": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Gets load balancer detail for group",
        "operationId": "LoadBalancers_GetLoadBalancerDetails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/groups/{id}/load_balancer/services": {
      "put": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Changes load balancer service state",
        "operationId": "LoadBalancers_ChangeServiceStatus",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a group",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Change service status command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeContainerServiceStateCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/groups/{id}/schedulers": {
      "get": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Returns group schedulers",
        "operationId": "Groups_GetGroupSchedulers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a group",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[GroupScheduler]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Creates a group scheduler",
        "operationId": "Groups_CreateContainerScheduler",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create group scheduler command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateGroupSchedulerCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupScheduler"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/groups": {
      "get": {
        "tags": [
          "OCI Groups"
        ],
        "summary": "Returns a list of instance groups",
        "operationId": "Instances_GetGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Group]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/interfaces": {
      "get": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Returns all network interfaces",
        "description": "Acceptable order values are: MacAddress, Instance, Opn, Address",
        "operationId": "Instances_GetAllNetworkInterfaces",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NetworkInterface"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/ip_addresses": {
      "get": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Returns public ip list",
        "description": "Acceptable order values are: Address, Subregion, Comment, Type.",
        "operationId": "Instances_GetIps",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "instanceId",
            "in": "query",
            "description": "Instance id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "onlyFree",
            "in": "query",
            "description": "Only free",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Ip]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Book new IP address",
        "operationId": "Instances_BookNewIp",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookIpCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ip"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/ip_addresses/{id}": {
      "get": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Returns IP by id",
        "operationId": "Instances_GetInstanceIp",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ip"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Updates IP address",
        "operationId": "Instances_UpdateIp",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateIpCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Deletes IP address",
        "operationId": "Instances_DeleteIp",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP address identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/attach_ip_ticket": {
      "post": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Attach public IP to instance",
        "operationId": "Instances_PostAttachIpTicket",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ipId",
            "in": "query",
            "description": "IP address identifier. Optional value, if null random ip will be attached.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ipV6",
            "in": "query",
            "description": "If attach IPv6 only. Optional value, if null IPv4 and IPv6 will be attached.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/attach_opn_ticket": {
      "post": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Attach instance to OPN",
        "operationId": "Instances_AttachOpn",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Attach instance to OPN command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttachInstanceToOpnCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/change_opn_ticket": {
      "post": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Change OPN on network interface",
        "operationId": "Instances_ChangeOpn",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Change OPN command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOpnCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/detach_ip_ticket": {
      "post": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Detach public IP from instance",
        "operationId": "Instances_PostDetachIpTicket",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ipId",
            "in": "query",
            "description": "IP address identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/detach_opn_ticket": {
      "post": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Detach instance from OPN",
        "operationId": "Instances_DetachFromOpn",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Detach instance from OPN command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetachInstanceFromOpnCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/interfaces": {
      "get": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Returns instance network interfaces",
        "description": "Acceptable order values are: MacAddress, Instance, Opn, Address",
        "operationId": "Instances_GetInstanceNetworkInterfaces",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NetworkInterface"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/ip_addresses": {
      "get": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Returns instance public ip list",
        "description": "Acceptable order values are: Address, Subregion, Comment, Type",
        "operationId": "Instances_GetInstanceIps",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Ip]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/opns": {
      "get": {
        "tags": [
          "OCI Interfaces"
        ],
        "summary": "Returns instance OPN's",
        "description": "Acceptable order values are: Name",
        "operationId": "Instances_GetOpns",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Opn]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/schedulers": {
      "get": {
        "tags": [
          "OCI Schedulers"
        ],
        "summary": "Gets schedulers by search params",
        "description": "Acceptable order values are: Name, CreationDate, StartDate, Instance, ActionType",
        "operationId": "Instances_GetSchedulers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "instanceId",
            "in": "query",
            "description": "Instance id filter",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actionTypeId",
            "in": "query",
            "description": "Action type id filter",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[InstanceScheduler]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/schedulers/{id}": {
      "get": {
        "tags": [
          "OCI Schedulers"
        ],
        "summary": "Gets scheduler by identifier",
        "operationId": "InstanceSchedulers_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Scheduler id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InstanceScheduler"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OCI Schedulers"
        ],
        "summary": "Updates instance scheduler",
        "operationId": "InstanceSchedulers_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Scheduler id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create instance scheduler command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateInstanceSchedulerCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InstanceScheduler"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI Schedulers"
        ],
        "summary": "Deletes instance scheduler",
        "operationId": "InstanceSchedulers_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Scheduler id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/schedulers": {
      "get": {
        "tags": [
          "OCI Schedulers"
        ],
        "summary": "Gets instance schedulers",
        "operationId": "InstanceSchedulers_GetInstanceSchedulers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[InstanceScheduler]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OCI Schedulers"
        ],
        "summary": "Creates instance scheduler",
        "operationId": "InstanceSchedulers_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create instance scheduler command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateInstanceSchedulerCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InstanceScheduler"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/instances/{id}/snapshots": {
      "get": {
        "tags": [
          "OCI Snapshots"
        ],
        "summary": "Returns instance snapshots",
        "operationId": "Instances_GetSnapshots",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Snapshot]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OCI Snapshots"
        ],
        "summary": "Creates snapshot",
        "operationId": "Instances_PostSnapshot",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create snapshot command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateSnapshotCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/snapshots": {
      "get": {
        "tags": [
          "OCI Snapshots"
        ],
        "summary": "Returns snapshot collection",
        "description": "Acceptable order values are: CreationDate, Description, IsCurrent, Name, Instance.",
        "operationId": "Snapshots_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "instanceId",
            "in": "query",
            "description": "Instance id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Snapshot]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/snapshots/{id}": {
      "get": {
        "tags": [
          "OCI Snapshots"
        ],
        "summary": "Gets snapshot",
        "operationId": "Snapshots_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Snapshot id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Snapshot"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OCI Snapshots"
        ],
        "summary": "Update snapshot",
        "operationId": "Snapshots_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Snapshot id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Update snapshot command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateSnapshotCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Snapshot"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI Snapshots"
        ],
        "summary": "Delete snapshot",
        "operationId": "Snapshots_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Snapshot id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/snapshots/{id}/restore_ticket": {
      "post": {
        "tags": [
          "OCI Snapshots"
        ],
        "summary": "Restore snapshot",
        "operationId": "Snapshots_Restore",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Snapshot id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/templates": {
      "get": {
        "tags": [
          "OCI Templates"
        ],
        "summary": "Returns templates list",
        "description": "Acceptable order values are: Name, Version, creationDate, SystemCategory.",
        "operationId": "Templates_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "source",
            "in": "query",
            "description": "Source",
            "required": false,
            "type": "string",
            "enum": [
              "All",
              "Standard",
              "Own",
              "CommunityCatalogue",
              "Marketplace"
            ]
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Template]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/templates/{id}": {
      "get": {
        "tags": [
          "OCI Templates"
        ],
        "summary": "Returns template by identifier",
        "operationId": "Templates_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OCI Templates"
        ],
        "summary": "Updates template",
        "operationId": "Templates_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Update command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTemplateCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OCI Templates"
        ],
        "summary": "Deletes template",
        "operationId": "Templates_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/ocs/projects": {
      "get": {
        "tags": [
          "OCS"
        ],
        "summary": "Returns the list of OCS projects",
        "operationId": "Ocs_GetProjects",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[OcsProject]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/disks": {
      "get": {
        "tags": [
          "OVS"
        ],
        "summary": "Returns disk list",
        "description": "Acceptable order values are: SpaceCapacity, Name, Tier, IsShared, Subregion",
        "operationId": "Disks_GetDisks",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "diskType",
            "in": "query",
            "description": "Disk type",
            "required": false,
            "type": "string",
            "enum": [
              "All",
              "System",
              "Custom"
            ]
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Disk]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OVS"
        ],
        "summary": "Creates disk",
        "operationId": "Disks_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create disk command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDiskCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/disks/{id}": {
      "get": {
        "tags": [
          "OVS"
        ],
        "summary": "Returns disk by identifier",
        "operationId": "Disks_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Disk identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Disk"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OVS"
        ],
        "summary": "Update disk",
        "operationId": "Disks_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Disk id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Update disk command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDiskCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OVS"
        ],
        "summary": "Delete disk",
        "operationId": "Disks_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Disk id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/disks/{id}/attach_to_instance_ticket": {
      "post": {
        "tags": [
          "OVS"
        ],
        "summary": "Attach disk to instance",
        "operationId": "Disks_AttachToInstance",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Disk id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "instanceId",
            "in": "query",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/disks/{id}/change_subregion_ticket": {
      "post": {
        "tags": [
          "OVS"
        ],
        "summary": "Change disk subregion",
        "operationId": "Disks_ChangeSubregion",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Disk id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subregionId",
            "in": "query",
            "description": "Subregion id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/disks/{id}/change_tier_ticket": {
      "post": {
        "tags": [
          "OVS"
        ],
        "summary": "Change disk tier",
        "operationId": "Disks_ChangeTier",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Disk id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tierId",
            "in": "query",
            "description": "Tier id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/disks/{id}/detach_from_instance_ticket": {
      "post": {
        "tags": [
          "OVS"
        ],
        "summary": "Detach disk from instance",
        "operationId": "Disks_DetachFromInstance",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Disk id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "instanceId",
            "in": "query",
            "description": "Instance id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/disks/{id}/extend_ticket": {
      "post": {
        "tags": [
          "OVS"
        ],
        "summary": "Extend disk",
        "operationId": "Disks_Extend",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Disk id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "spaceCapacity",
            "in": "query",
            "description": "Disk space capacity in GB",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/statistics/account": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Gets client statistics",
        "operationId": "Statistics_GetClientStatistics",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Date from (utc timezone)",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Date to (utc timezone)",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "statisticTypes",
            "in": "query",
            "description": "Statistic types",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[ClientStatistics]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/statistics/dictionaries/intervals": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Gets statistic interval types",
        "operationId": "Statistics_GetStatisticIntervals",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[DictionaryItem]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/statistics/instances/{id}": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Gets instance statistics",
        "operationId": "Statistics_GetInstanceStatistics",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "statisticInterval",
            "in": "query",
            "description": "Statistic interval",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 1519
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Date from (utc timezone)",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Date to (utc timezone)",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "statisticTypes",
            "in": "query",
            "description": "Statistic types",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[InstanceStatistics]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/subregions": {
      "get": {
        "tags": [
          "Subregions"
        ],
        "summary": "Gets subregions",
        "operationId": "Subregions_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Subregion]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/subregions/{id}": {
      "get": {
        "tags": [
          "Subregions"
        ],
        "summary": "Gets subregion",
        "operationId": "Subregions_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subregion id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Subregion"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/tickets": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns ticket collection",
        "description": "Acceptable order values are: CreationDate, Status, OperationType",
        "operationId": "Tickets_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "query",
            "description": "Tickets status id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "creationDateFrom",
            "in": "query",
            "description": "Tickets creation date from",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "creationDateTo",
            "in": "query",
            "description": "Tickets creation date to",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[Ticket]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/tickets/{id}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns ticket by identifier",
        "operationId": "Tickets_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Ticket identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns a list of configured health checks",
        "description": "Acceptable order values are: Name, Type",
        "operationId": "Watch_GetHealthChecks",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[HealthCheck]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/dns": {
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates dns health check",
        "operationId": "Watch_CreateDnsHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create dns health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckDnsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckDns"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/dns/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns dns health check details",
        "operationId": "Watch_GetDnsHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckDns"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates dns health check",
        "operationId": "Watch_UpdateDnsHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create dns health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckDnsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckDns"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/fullpage": {
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates FullPage health check",
        "operationId": "Watch_CreateFullPageHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create FullPage health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckFullPageCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckFullPage"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/fullpage/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns FullPage health check details",
        "operationId": "Watch_GetFullPageHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckFullPage"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates FullPage health check",
        "operationId": "Watch_UpdateFullPageHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create FullPage health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckFullPageCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckFullPage"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/fullpagehttps": {
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates FullPage Https health check",
        "operationId": "Watch_CreateFullPageHttpsHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create FullPage health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckFullPageHttpsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckFullPage"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/fullpagehttps/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns FullPage Https health check details",
        "operationId": "Watch_GetFullPageHttpsHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckFullPage"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates FullPage Https health check",
        "operationId": "Watch_UpdateFullPageHttpsHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create FullPage health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckFullPageHttpsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckFullPage"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/http": {
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates http health check",
        "operationId": "Watch_CreateHttpHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create http health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckHttpCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckHttp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/http/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns http health check details",
        "operationId": "Watch_GetHttpHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckHttp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates http health check",
        "operationId": "Watch_UpdateHttpHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create http health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckHttpCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckHttp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/https": {
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates https health check",
        "operationId": "Watch_CreateHttpsHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create https health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckHttpsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckHttp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/https/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns https health check details",
        "operationId": "Watch_GetHttpsHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckHttp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates https health check",
        "operationId": "Watch_UpdateHttpsHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create https health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckHttpsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckHttp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/imap": {
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates imap health check",
        "operationId": "Watch_CreateImapHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create imap health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckImapCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckImap"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/imap/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns imap health check details",
        "operationId": "Watch_GetImapHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckImap"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates imap health check",
        "operationId": "Watch_UpdateImapHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create imap health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckImapCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckImap"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/imapssl": {
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates imap ssl health check",
        "operationId": "Watch_CreateImapSslHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create imap ssl health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckImapSslCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckImap"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/imapssl/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns imap ssl health check details",
        "operationId": "Watch_GetImapSslHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckImap"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates imap ssl health check",
        "operationId": "Watch_UpdateImapSslHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create imap ssl health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckImapSslCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckImap"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/notifications": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns a list of configured health check notifications",
        "description": "Acceptable order values are: Address, Id",
        "operationId": "Watch_GetHealthCheckNotifications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiCollection[HealthCheckNotification]"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates health check notification",
        "operationId": "Watch_CreateHealthCheckNotification",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create health check notification command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckNotificationCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckNotification"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/notifications/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns health check notification details",
        "operationId": "Watch_GetHealthCheckNotification",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check notification",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckNotification"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates health check notification",
        "operationId": "Watch_UpdateHealthCheckNotification",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check notification id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create health check notification command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckNotificationCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckNotification"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Watch"
        ],
        "summary": "Deletes health check notification",
        "operationId": "Watch_DeleteHealthCheckNotification",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check notification",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/ping": {
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates ping health check",
        "operationId": "Watch_CreatePingHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create ping health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckPingCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckPing"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/ping/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns ping health check details",
        "operationId": "Watch_GetPingHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckPing"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates ping health check",
        "operationId": "Watch_UpdatePingHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create ping health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckPingCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckPing"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/sip": {
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates sip health check",
        "operationId": "Watch_CreateSipHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create sip health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckSipCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckSip"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/sip/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns sip health check details",
        "operationId": "Watch_GetSipHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckSip"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates sip health check",
        "operationId": "Watch_UpdateImapHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create sip health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckSipCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckSip"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/smtp": {
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates smtp health check",
        "operationId": "Watch_CreateSmtpHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create smtp health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckSmtpCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckSmtp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/smtp/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns smtp health check details",
        "operationId": "Watch_GetSmtpHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckSmtp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates smtp health check",
        "operationId": "Watch_UpdateSmtpHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create smtp health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckSmtpCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckSmtp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/tcp": {
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Creates Tcp health check",
        "operationId": "Watch_CreateTcpHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "description": "Create Tcp health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckTcpCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckTcp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/tcp/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns tcp health check details",
        "operationId": "Watch_GetTcpHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckTcp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Watch"
        ],
        "summary": "Updates Tcp health check",
        "operationId": "Watch_UpdateTcpHealthCheck",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Health check id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "description": "Create Tcp health check command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateHealthCheckTcpCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckTcp"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/healthchecks/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Returns health check",
        "operationId": "Watch_GetHealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheck"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Watch"
        ],
        "summary": "Deletes health check",
        "operationId": "Watch_DeleteHealthCheck",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a health check",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/sensors/all": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Gets all available monitoring sensors",
        "operationId": "Watch_GetAvailableMonitoringStations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonitoringSensor"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/sensors/assignments": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Gets selected monitoring sensors",
        "operationId": "Watch_GetSelectedMonitoringStations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonitoringSensor"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Watch"
        ],
        "summary": "Add monitoring sensor",
        "operationId": "Watch_AddSelectedMonitoringStations",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "station",
            "in": "body",
            "description": "Station",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignNewMonitoringSensorCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonitoringSensor"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    },
    "/watch/sensors/assignments/{id}": {
      "get": {
        "tags": [
          "Watch"
        ],
        "summary": "Gets selected monitoring sensor",
        "operationId": "Watch_GetSelectedMonitoringStation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response fields filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonitoringSensor"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Watch"
        ],
        "summary": "Remove monitoring sensor",
        "operationId": "Watch_DeleteSelectedMonitoringStations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonitoringSensor"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "oktawave.api"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "Account": {
      "description": "Account model representing clients.",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id of account (client)",
          "type": "integer"
        },
        "Addresses": {
          "description": "Account addressess",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "Payment": {
          "$ref": "#/definitions/PaymentDetails",
          "description": "Payment information"
        },
        "Company": {
          "$ref": "#/definitions/CompanyDetails",
          "description": "Company information for company account"
        },
        "FreemiumEnabled": {
          "description": "Is Freemium enabled for account",
          "type": "boolean"
        }
      }
    },
    "Address": {
      "description": "Address",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id of address",
          "type": "integer"
        },
        "AddressType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Address type"
        },
        "Street": {
          "description": "Street",
          "type": "string"
        },
        "City": {
          "description": "City",
          "type": "string"
        },
        "Zip": {
          "description": "Zip code",
          "type": "string"
        },
        "Country": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Country"
        },
        "Region": {
          "description": "Region",
          "type": "string"
        }
      }
    },
    "PaymentDetails": {
      "description": "Payment information",
      "type": "object",
      "properties": {
        "AccountNumber": {
          "description": "Account number",
          "type": "string"
        },
        "ExternalAccountNumber": {
          "description": "External account number",
          "type": "string"
        },
        "PaymentMethod": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Payment method"
        },
        "VatRate": {
          "format": "double",
          "description": "Vat rate",
          "type": "number"
        }
      }
    },
    "CompanyDetails": {
      "description": "Company information",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Company id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Nip": {
          "description": "Nip",
          "type": "string"
        },
        "Regon": {
          "description": "Regon",
          "type": "string"
        },
        "Krs": {
          "description": "Krs",
          "type": "string"
        },
        "Email": {
          "description": "Email",
          "type": "string"
        },
        "Phone": {
          "description": "Phone",
          "type": "string"
        }
      }
    },
    "DictionaryItem": {
      "description": "Dictionary item",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "ID",
          "type": "integer"
        },
        "Label": {
          "description": "Label",
          "type": "string"
        },
        "Dictionary": {
          "$ref": "#/definitions/Resource",
          "description": "Dictionary"
        }
      }
    },
    "Resource": {
      "description": "Resource with HATEOAS links",
      "type": "object",
      "properties": {
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "readOnly": true
        },
        "Id": {
          "format": "int32",
          "description": "Resurce id",
          "type": "integer"
        }
      }
    },
    "Link": {
      "description": "HATEOAS link",
      "type": "object",
      "properties": {
        "Rel": {
          "type": "string"
        },
        "Href": {
          "type": "string"
        }
      }
    },
    "SshKey": {
      "description": "SSH key",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Value": {
          "description": "Key value trimmed",
          "type": "string"
        },
        "OwnerUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User owning the key"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        }
      }
    },
    "UserResource": {
      "description": "User",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "User id",
          "type": "integer"
        },
        "Login": {
          "description": "User login",
          "type": "string"
        },
        "FirstName": {
          "description": "First name",
          "type": "string"
        },
        "LastName": {
          "description": "Last name",
          "type": "string"
        }
      }
    },
    "BaseSearchParams": {
      "description": "Search params",
      "type": "object",
      "properties": {
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ApiCollection[SshKey]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SshKey"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "ApiCollectionMetadata": {
      "type": "object",
      "properties": {
        "Total": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CreateSshKeyCommand": {
      "description": "Create SSH key command",
      "required": [
        "SshKeyName",
        "SshKey"
      ],
      "type": "object",
      "properties": {
        "SshKeyName": {
          "description": "Name of SSH key",
          "maxLength": 200,
          "minLength": 0,
          "type": "string"
        },
        "SshKey": {
          "description": "SSH key",
          "type": "string"
        }
      }
    },
    "ApiCollection[Dictionary]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dictionary"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "Dictionary": {
      "description": "Dictionary",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        }
      }
    },
    "ApiCollection[DictionaryItem]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "DisksSearchParams": {
      "description": "Search params for disks",
      "type": "object",
      "properties": {
        "DiskType": {
          "description": "Disk type",
          "enum": [
            "All",
            "System",
            "Custom"
          ],
          "type": "string"
        },
        "Query": {
          "description": "Query",
          "type": "string"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ApiCollection[Disk]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Disk"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "Disk": {
      "description": "OVS disk",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "SpaceCapacity": {
          "format": "int32",
          "description": "Space capacity in GB",
          "type": "integer"
        },
        "Tier": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Tier"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the disk"
        },
        "IsShared": {
          "description": "If disk is shared",
          "type": "boolean"
        },
        "SharedDiskType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Shared disk type, null if disk is not shared"
        },
        "Subregion": {
          "$ref": "#/definitions/BaseResource",
          "description": "Subregion"
        },
        "IsLocked": {
          "description": "If the disk is locked by a running operation",
          "type": "boolean"
        },
        "LockingDate": {
          "format": "date-time",
          "description": "Locking date",
          "type": "string"
        },
        "Connections": {
          "description": "Connections to instances",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiskConnection"
          }
        },
        "IsFreemium": {
          "description": "Is freemium",
          "type": "boolean"
        }
      }
    },
    "BaseResource": {
      "description": "Resource reference",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Resurce id",
          "type": "integer"
        }
      }
    },
    "DiskConnection": {
      "description": "Represents disk connection to instance",
      "type": "object",
      "properties": {
        "Instance": {
          "$ref": "#/definitions/BaseResource",
          "description": "Instance"
        },
        "Controller": {
          "format": "int32",
          "description": "Controller",
          "type": "integer"
        },
        "Slot": {
          "format": "int32",
          "description": "Slot",
          "type": "integer"
        },
        "IsSystemDisk": {
          "description": "If is system disk",
          "type": "boolean"
        }
      }
    },
    "CreateDiskCommand": {
      "description": "Create disk command",
      "required": [
        "DiskName",
        "SpaceCapacity",
        "TierId",
        "IsShared"
      ],
      "type": "object",
      "properties": {
        "DiskName": {
          "description": "Name of disk",
          "maxLength": 300,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "SpaceCapacity": {
          "format": "int32",
          "description": "Space capacity in GB",
          "default": 5,
          "type": "integer"
        },
        "TierId": {
          "format": "int32",
          "description": "Tier id",
          "default": 48,
          "type": "integer"
        },
        "IsShared": {
          "description": "If disk is shared",
          "default": false,
          "type": "boolean"
        },
        "SharedDiskTypeId": {
          "format": "int32",
          "description": "Shared disk type, null if disk is not shared",
          "type": "integer"
        },
        "SubregionId": {
          "format": "int32",
          "description": "Subregion identifier",
          "type": "integer"
        },
        "InstanceIdsList": {
          "description": "Instance ids list",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "Ticket": {
      "description": "Ticket representing operation on service eg. instance, disk",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "ID",
          "type": "integer"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the ticket"
        },
        "EndDate": {
          "format": "date-time",
          "description": "End date of operation",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Status"
        },
        "OperationType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Operation type"
        },
        "ObjectId": {
          "format": "int32",
          "description": "Object identifier on which the operation is performed",
          "type": "integer"
        },
        "ObjectType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Object type"
        },
        "ObjectName": {
          "description": "Object name",
          "type": "string"
        },
        "Progress": {
          "format": "int32",
          "description": "Operation progress",
          "type": "integer"
        }
      }
    },
    "UpdateDiskCommand": {
      "description": "Update disk command",
      "required": [
        "DiskName",
        "SpaceCapacity",
        "TierId",
        "SubregionId"
      ],
      "type": "object",
      "properties": {
        "DiskName": {
          "description": "Name of disk",
          "default": "Disk name",
          "maxLength": 300,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "SpaceCapacity": {
          "format": "int32",
          "description": "Space capacity in GB",
          "default": 5,
          "type": "integer"
        },
        "TierId": {
          "format": "int32",
          "description": "Tier id",
          "default": 48,
          "type": "integer"
        },
        "SubregionId": {
          "format": "int32",
          "description": "Subregion identifier",
          "type": "integer"
        },
        "InstanceIdsList": {
          "description": "Instance ids list",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "ChangeDiskTierCommand": {
      "description": "Change disk tier command",
      "required": [
        "TierId"
      ],
      "type": "object",
      "properties": {
        "TierId": {
          "format": "int32",
          "description": "Tier id",
          "type": "integer"
        }
      }
    },
    "ApiCollection[InstanceEvent]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceEvent"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "InstanceEvent": {
      "description": "Event that have occurred on instance",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "Id",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Date",
          "type": "string"
        },
        "Instance": {
          "$ref": "#/definitions/NamedResource",
          "description": "Instance"
        },
        "User": {
          "$ref": "#/definitions/UserResource",
          "description": "User who performed the operation"
        },
        "OperationType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Operation type"
        },
        "OperationStatus": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Operation status"
        },
        "Message": {
          "description": "Message",
          "type": "string"
        }
      }
    },
    "NamedResource": {
      "description": "Named resource",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        }
      }
    },
    "VmHistorySearchParams": {
      "description": "Events search params",
      "type": "object",
      "properties": {
        "TypeIds": {
          "description": "Type IDs",
          "type": "string"
        },
        "StatusIds": {
          "description": "Status IDs",
          "type": "string"
        },
        "DateFrom": {
          "format": "date-time",
          "description": "Date from",
          "type": "string"
        },
        "DateTo": {
          "format": "date-time",
          "description": "Date to",
          "type": "string"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ExportsSearchParams": {
      "description": "Exports search params",
      "type": "object",
      "properties": {
        "InstanceId": {
          "format": "int32",
          "description": "Instance id",
          "type": "integer"
        },
        "StatusId": {
          "format": "int32",
          "description": "Status id",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ApiCollection[Export]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Export"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "Export": {
      "description": "Instance export task",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "description": "Start date",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "description": "End date",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Status"
        },
        "OcsLocation": {
          "description": "Location in OCS",
          "type": "string"
        },
        "OcsProjectId": {
          "description": "OCS Project Id",
          "type": "string"
        },
        "TotalSpaceCapacity": {
          "format": "int32",
          "description": "Total space capacity in GB",
          "type": "integer"
        },
        "Instance": {
          "$ref": "#/definitions/NamedResource",
          "description": "Instance"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "Creation user"
        },
        "Origin": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Origin"
        },
        "Scheduler": {
          "$ref": "#/definitions/BaseResource",
          "description": "Scheduler that launches export"
        }
      }
    },
    "ApiCollection[Group]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "Group": {
      "description": "Group",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "IsLoadBalancer": {
          "description": "Is load balancing enabled",
          "type": "boolean"
        },
        "InstancesCount": {
          "format": "int32",
          "description": "Instances count in container",
          "type": "integer"
        },
        "SchedulersCount": {
          "format": "int32",
          "description": "Schedulers count assigned to container",
          "type": "integer"
        },
        "AffinityRuleType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Instances affinity rule type"
        },
        "AutoscalingType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Autoscaling type"
        },
        "LastChangeDate": {
          "format": "date-time",
          "description": "Last modified date",
          "type": "string"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the group"
        }
      }
    },
    "CreateGroupCommand": {
      "description": "Create group command",
      "required": [
        "Name",
        "AffinityRuleType"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name",
          "maxLength": 500,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "AffinityRuleType": {
          "format": "int32",
          "description": "Instances affinity rule type",
          "default": 1403,
          "type": "integer"
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": {}
    },
    "ApiCollection[GroupAssignment]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupAssignment"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "GroupAssignment": {
      "description": "Group assignment",
      "type": "object",
      "properties": {
        "InstanceId": {
          "format": "int32",
          "description": "Id of an instance",
          "type": "integer"
        },
        "IpId": {
          "format": "int32",
          "description": "Id of ip",
          "type": "integer"
        },
        "IpV4": {
          "description": "Instance ip v4 address attached to group",
          "type": "string"
        },
        "IpV6": {
          "description": "Instance ip v6 address attached to group",
          "type": "string"
        }
      }
    },
    "ChangeContainerAssignmentsCommand": {
      "description": "Change container assignments Command",
      "type": "object",
      "properties": {
        "Assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerAssignmentCommand"
          }
        }
      }
    },
    "ContainerAssignmentCommand": {
      "description": "Container assignment",
      "required": [
        "InstanceId",
        "IpId"
      ],
      "type": "object",
      "properties": {
        "InstanceId": {
          "format": "int32",
          "description": "Id of an instance",
          "type": "integer"
        },
        "IpId": {
          "format": "int32",
          "description": "Ip address for load balancer",
          "type": "integer"
        }
      }
    },
    "SetGroupAutoscalerCommand": {
      "description": "Set container autoscaler",
      "required": [
        "ExpansionTypeId",
        "MinimumInstanceNumber",
        "MaximumInstanceNumber",
        "Instances"
      ],
      "type": "object",
      "properties": {
        "ExpansionTypeId": {
          "format": "int32",
          "description": "Expansion type",
          "type": "integer"
        },
        "MinimumInstanceNumber": {
          "format": "int32",
          "description": "Minimum instance number in container",
          "maximum": 2147483647,
          "minimum": 1,
          "type": "integer"
        },
        "MaximumInstanceNumber": {
          "format": "int32",
          "description": "Minimum instance number in container",
          "maximum": 2147483647,
          "minimum": 1,
          "type": "integer"
        },
        "Instances": {
          "description": "Instances to scaling",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupAutoscalerInstance"
          }
        }
      }
    },
    "GroupAutoscalerInstance": {
      "description": "Instance used by group autoscaler",
      "type": "object",
      "properties": {
        "Instance": {
          "$ref": "#/definitions/BaseResource",
          "description": "Instance"
        },
        "OrderNumber": {
          "format": "int32",
          "description": "Order number",
          "type": "integer"
        }
      }
    },
    "GroupAutoscaler": {
      "description": "Group autoscaler settings",
      "type": "object",
      "properties": {
        "ExpansionType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Expansion type"
        },
        "MinimumInstanceNumber": {
          "format": "int32",
          "description": "Minimum instance number in group",
          "type": "integer"
        },
        "MaximumInstanceNumber": {
          "format": "int32",
          "description": "Minimum instance number in group",
          "type": "integer"
        },
        "Instances": {
          "description": "Instances to scaling",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupAutoscalerInstance"
          }
        }
      }
    },
    "ApiCollection[GroupScheduler]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupScheduler"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "GroupScheduler": {
      "description": "Group scheduler",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "ID",
          "type": "integer"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the scheduler"
        },
        "Instance": {
          "$ref": "#/definitions/BaseResource",
          "description": "Instance"
        },
        "Group": {
          "$ref": "#/definitions/BaseResource",
          "description": "Group"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        },
        "LastChangeDate": {
          "format": "date-time",
          "description": "Last change date",
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "description": "Start date",
          "type": "string"
        },
        "Name": {
          "description": "Scheduler name",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Status"
        },
        "Type": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "ActionType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Action type"
        },
        "CycleType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Cycle type"
        },
        "CycleNumber": {
          "format": "int32",
          "description": "Cycle number beetwen scheduler launch",
          "type": "integer"
        }
      }
    },
    "CreateUpdateGroupSchedulerCommand": {
      "description": "Create group scheduler command",
      "required": [
        "Name",
        "StartDate",
        "InstanceId",
        "ActionTypeId",
        "SchedulerTypeId"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Scheduler name",
          "maxLength": 400,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "description": "Start date",
          "type": "string"
        },
        "InstanceId": {
          "format": "int32",
          "description": "Instance Id",
          "type": "integer"
        },
        "ActionTypeId": {
          "format": "int32",
          "description": "Action type id",
          "type": "integer"
        },
        "SchedulerTypeId": {
          "format": "int32",
          "description": "Scheduler type id",
          "type": "integer"
        },
        "CycleTypeId": {
          "format": "int32",
          "description": "Cycle type id",
          "type": "integer"
        },
        "CycleNumber": {
          "format": "int32",
          "description": "Cycle number",
          "maximum": 32767,
          "minimum": 1,
          "type": "integer"
        }
      }
    },
    "ApiCollection[LoadBalancer]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadBalancer"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "LoadBalancer": {
      "description": "Load balancer",
      "type": "object",
      "properties": {
        "GroupId": {
          "format": "int32",
          "description": "Group id",
          "type": "integer"
        },
        "GroupName": {
          "description": "Group name",
          "type": "string"
        },
        "IpAddress": {
          "description": "IPv4 address",
          "type": "string"
        },
        "IpV6Address": {
          "description": "IPv6 address",
          "type": "string"
        },
        "ServiceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Service type (HTTP, SMTP, Port...)"
        },
        "PortNumber": {
          "format": "int32",
          "description": "Port number for \"Port\" service type",
          "type": "integer"
        },
        "SessionPersistenceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Session persistence type"
        },
        "Algorithm": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Algorithm"
        },
        "IpVersion": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "IP version"
        },
        "HealthCheckEnabled": {
          "description": "Is health check enabled",
          "type": "boolean"
        },
        "SslEnabled": {
          "description": "Is ssl enabled (only for \"HTTP\" service type)",
          "type": "boolean"
        },
        "CommonPersistenceForHttpAndHttpsEnabled": {
          "description": "Is common persistence for HTTP and HTTPS enabled (only for \"HTTP\" service type)",
          "type": "boolean"
        },
        "Servers": {
          "description": "Services",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadBalancerServer"
          }
        }
      }
    },
    "LoadBalancerServer": {
      "description": "Load balancer server",
      "type": "object",
      "properties": {
        "IpAddress": {
          "description": "Ip address",
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "description": "Port",
          "type": "integer"
        },
        "Protocol": {
          "description": "Protocol",
          "type": "string"
        },
        "ActiveServices": {
          "format": "int64",
          "description": "Active services. Null if HealthCheckEnabled in Load balancer disabled.",
          "type": "integer"
        },
        "InactiveServices": {
          "format": "int64",
          "description": "Inactive services. Null if HealthCheckEnabled in Load balancer disabled.",
          "type": "integer"
        },
        "RequestRate": {
          "format": "int64",
          "description": "Request rate",
          "type": "integer"
        },
        "ResponseRate": {
          "format": "int64",
          "description": "Response rate",
          "type": "integer"
        },
        "RequestRateBytes": {
          "format": "int64",
          "description": "Request rate in bytes",
          "type": "integer"
        },
        "ResponseRateBytes": {
          "format": "int64",
          "description": "Response rate in bytes",
          "type": "integer"
        },
        "CurrentClientConnections": {
          "format": "int64",
          "description": "Current client connections",
          "type": "integer"
        },
        "Status": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Status"
        },
        "Services": {
          "description": "Services statistics. Filled only in load balancer details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadBalancerService"
          }
        }
      }
    },
    "LoadBalancerService": {
      "description": "Load balancer service",
      "type": "object",
      "properties": {
        "Instance": {
          "$ref": "#/definitions/NamedResource",
          "description": "Instance"
        },
        "InstanceState": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Instance state"
        },
        "IpAddress": {
          "description": "Ip address",
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "description": "Port",
          "type": "integer"
        },
        "RequestRate": {
          "format": "int64",
          "description": "Request rate",
          "type": "integer"
        },
        "ResponseRate": {
          "format": "int64",
          "description": "Response rate",
          "type": "integer"
        },
        "RequestRateBytes": {
          "format": "int64",
          "description": "Request rate in bytes",
          "type": "integer"
        },
        "ResponseRateBytes": {
          "format": "int64",
          "description": "Response rate in bytes",
          "type": "integer"
        },
        "CurrentClientConnections": {
          "format": "int64",
          "description": "Current client connections",
          "type": "integer"
        },
        "Status": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Status"
        }
      }
    },
    "ApiCollection[Import]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Import"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "Import": {
      "description": "Import",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "description": "Start date",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "description": "End date",
          "type": "string"
        },
        "Size": {
          "format": "int32",
          "description": "Total size in GB",
          "type": "integer"
        },
        "NetworkInterfacesCount": {
          "format": "int32",
          "description": "Network interfaces count",
          "type": "integer"
        },
        "DisksCount": {
          "format": "int32",
          "description": "Disks count",
          "type": "integer"
        },
        "Status": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Status"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the import"
        }
      }
    },
    "CreateImportCommand": {
      "description": "Create import command",
      "required": [
        "Name",
        "OcsFileLocation",
        "OcsProjectId"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name",
          "maxLength": 300,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "OcsFileLocation": {
          "description": "OCS location to OVF file",
          "maxLength": 1000,
          "minLength": 0,
          "pattern": "^.{1,}\\/.{1,}\\.ovf$",
          "type": "string"
        },
        "OcsProjectId": {
          "description": "OCS Project Id",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "ApiCollection[ImportDisk]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImportDisk"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "ImportDisk": {
      "description": "Disk of imported OCI",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id of disk",
          "type": "integer"
        },
        "Capacity": {
          "format": "int32",
          "description": "Capacity in GB",
          "type": "integer"
        },
        "DiskName": {
          "description": "Disk name",
          "type": "string"
        },
        "RelativePath": {
          "description": "Relative path",
          "type": "string"
        },
        "Controller": {
          "format": "int32",
          "description": "Controller index",
          "type": "integer"
        },
        "ControllerSlot": {
          "format": "int32",
          "description": "Controller slot index",
          "type": "integer"
        }
      }
    },
    "RunImportCommand": {
      "description": "Run import command",
      "required": [
        "TypeId",
        "Disks",
        "Network"
      ],
      "type": "object",
      "properties": {
        "SubregionId": {
          "format": "int32",
          "description": "Id of target subregion",
          "type": "integer"
        },
        "TypeId": {
          "format": "int32",
          "description": "Type of an instance",
          "type": "integer"
        },
        "Disks": {
          "description": "Disks specification",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunImportDiskCommand"
          }
        },
        "Network": {
          "description": "Network specification",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunImportNetworkCommand"
          }
        }
      }
    },
    "RunImportDiskCommand": {
      "description": "Run import disk command",
      "required": [
        "ImportDiskId",
        "TierId"
      ],
      "type": "object",
      "properties": {
        "ImportDiskId": {
          "format": "int32",
          "description": "Id of an imported disk",
          "type": "integer"
        },
        "TierId": {
          "format": "int32",
          "description": "Tier id",
          "type": "integer"
        }
      }
    },
    "RunImportNetworkCommand": {
      "description": "Run import network command",
      "required": [
        "Public"
      ],
      "type": "object",
      "properties": {
        "Public": {
          "description": "Is public network",
          "type": "boolean"
        },
        "PublicIpId": {
          "format": "int32",
          "description": "Id of public ip - only for public network. When null, random address will be assigned.",
          "type": "integer"
        },
        "OpnId": {
          "format": "int32",
          "description": "Id of Opn - only for private network",
          "type": "integer"
        }
      }
    },
    "InstancesSearchParams": {
      "description": "Search params for instances",
      "type": "object",
      "properties": {
        "TemplateTypeId": {
          "format": "int32",
          "description": "Template type id eg marketplace, oci instance",
          "type": "integer"
        },
        "IsTurnedOn": {
          "description": "Indicates wether an instance is turned on",
          "type": "boolean"
        },
        "SubregionId": {
          "format": "int32",
          "description": "Subregion Id",
          "type": "integer"
        },
        "TypeId": {
          "format": "int32",
          "description": "Type Id",
          "type": "integer"
        },
        "Query": {
          "description": "Query",
          "type": "string"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ApiCollection[Instance]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Instance"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "Instance": {
      "description": "Instance",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "ID",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the instance"
        },
        "IsLocked": {
          "description": "If the instance is locked by a running operation",
          "type": "boolean"
        },
        "LockingDate": {
          "format": "date-time",
          "description": "Locking date",
          "type": "string"
        },
        "Template": {
          "$ref": "#/definitions/BaseResource",
          "description": "Template from which the instance was created"
        },
        "Subregion": {
          "$ref": "#/definitions/BaseResource",
          "description": "Subregion that is running the instance"
        },
        "Type": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Instance type. Defines the configuration of CPU and RAM"
        },
        "Status": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Status"
        },
        "SystemCategory": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Operating system category installed on the instance"
        },
        "AutoscalingType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Autoscaling type"
        },
        "VmWareToolsStatus": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "VMware Tools status"
        },
        "MonitStatus": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Monitoring status"
        },
        "TemplateType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Template type eg marketplace, oci instance"
        },
        "IpAddress": {
          "description": "IP address",
          "type": "string"
        },
        "DnsAddress": {
          "description": "DNS address",
          "type": "string"
        },
        "TotalDisksCapacity": {
          "format": "int32",
          "description": "Total disks capacity in GB",
          "type": "integer"
        },
        "PaymentType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Payment type"
        },
        "HealthCheck": {
          "$ref": "#/definitions/BaseResource",
          "description": "Health check"
        },
        "ScsiControllerType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "SCSI controller type"
        },
        "IsFreemium": {
          "description": "Is freemium",
          "type": "boolean"
        },
        "CpuNumber": {
          "format": "int32",
          "description": "Number of CPUs",
          "type": "integer"
        },
        "RamMb": {
          "format": "int32",
          "description": "Memory in MB",
          "type": "integer"
        },
        "SupportType": {
          "$ref": "#/definitions/Software",
          "description": "Support type"
        }
      }
    },
    "Software": {
      "description": "Software",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        }
      }
    },
    "CreateInstanceCommand": {
      "description": "Create instance command",
      "required": [
        "InstanceName",
        "TemplateId"
      ],
      "type": "object",
      "properties": {
        "AuthorizationMethodId": {
          "format": "int32",
          "description": "Authorization method (Password)",
          "type": "integer"
        },
        "DiskClass": {
          "format": "int32",
          "description": "Class of disk",
          "type": "integer"
        },
        "DiskSize": {
          "format": "int32",
          "description": "Size of disk in gigabytes",
          "maximum": 300,
          "minimum": 5,
          "type": "integer"
        },
        "InstanceName": {
          "description": "Name of an instance",
          "maxLength": 40,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "InstancesCount": {
          "format": "int32",
          "description": "Count of instances",
          "maximum": 5,
          "minimum": 1,
          "type": "integer"
        },
        "IPAddressId": {
          "format": "int32",
          "description": "Id of ip address",
          "type": "integer"
        },
        "SshKeysIds": {
          "description": "Id of ssh keys to be attached to the instance",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "SubregionId": {
          "format": "int32",
          "description": "Id of target subregion",
          "type": "integer"
        },
        "TemplateId": {
          "format": "int32",
          "description": "Template id",
          "type": "integer"
        },
        "TypeId": {
          "format": "int32",
          "description": "Type of an instance",
          "type": "integer"
        },
        "Freemium": {
          "description": "Freemium",
          "default": false,
          "type": "boolean"
        }
      }
    },
    "ChangeInstanceNameCommand": {
      "description": "Change instance name commnad",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of an instance",
          "maxLength": 40,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        }
      }
    },
    "ChangeInstanceTypeCommand": {
      "description": "Change instance type command",
      "required": [
        "TypeId"
      ],
      "type": "object",
      "properties": {
        "TypeId": {
          "format": "int32",
          "description": "Type id",
          "type": "integer"
        }
      }
    },
    "ChangeInstanceScsiControllerTypeCommand": {
      "description": "Change instance SCSI controller type command",
      "required": [
        "ScsiControllerTypeId"
      ],
      "type": "object",
      "properties": {
        "ScsiControllerTypeId": {
          "format": "int32",
          "description": "Type id",
          "type": "integer"
        }
      }
    },
    "ConvertInstanceToTemplateCommand": {
      "description": "Convert instance to template command",
      "required": [
        "TemplateName",
        "TemplateDescriptions",
        "TemplateVersion",
        "TemplateSystemCategoryId",
        "TemplateDefaultTypeId",
        "TemplateMinimumTypeId",
        "TemplateWithInitialization"
      ],
      "type": "object",
      "properties": {
        "TemplateName": {
          "description": "Template name",
          "pattern": "^[^/]*$",
          "type": "string"
        },
        "TemplateDescriptions": {
          "description": "Template descriptions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemplateDescription"
          }
        },
        "TemplateIcon": {
          "$ref": "#/definitions/TemplateIcon",
          "description": "Template icon"
        },
        "TemplateVersion": {
          "description": "Template version",
          "type": "string"
        },
        "TemplateSystemCategoryId": {
          "format": "int32",
          "description": "Template system category id",
          "type": "integer"
        },
        "TemplateWindowsTypeId": {
          "format": "int32",
          "description": "Template windows type id",
          "type": "integer"
        },
        "TemplateDefaultTypeId": {
          "format": "int32",
          "description": "Template default type id",
          "type": "integer"
        },
        "TemplateMinimumTypeId": {
          "format": "int32",
          "description": "Template minimum type id",
          "type": "integer"
        },
        "TemplateWithInitialization": {
          "description": "Template with initialization",
          "type": "boolean"
        },
        "TechSupportPassword": {
          "description": "Account 'tech-support' password. Required for templates with initialization",
          "type": "string"
        }
      }
    },
    "TemplateDescription": {
      "description": "Template description",
      "required": [
        "LanguageId",
        "Description"
      ],
      "type": "object",
      "properties": {
        "LanguageId": {
          "format": "int32",
          "description": "Language id",
          "type": "integer"
        },
        "Description": {
          "description": "Description",
          "type": "string"
        }
      }
    },
    "TemplateIcon": {
      "description": "Icon file",
      "required": [
        "FileName",
        "FileSource"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "description": "File name",
          "type": "string"
        },
        "FileSource": {
          "description": "File source in Base64",
          "type": "string"
        }
      }
    },
    "ChangeInstanceSubregionCommand": {
      "description": "Change instance subregion command",
      "type": "object",
      "properties": {
        "SubregionId": {
          "format": "int32",
          "description": "Subregion Id",
          "type": "integer"
        }
      }
    },
    "IpsSearchParams": {
      "description": "Search params for IPs",
      "type": "object",
      "properties": {
        "InstanceId": {
          "format": "int32",
          "description": "Instance id",
          "type": "integer"
        },
        "OnlyFree": {
          "description": "Only free",
          "type": "boolean"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ApiCollection[Ip]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ip"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "Ip": {
      "description": "Public IP address",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "ID",
          "type": "integer"
        },
        "Address": {
          "description": "IP address version 4",
          "type": "string"
        },
        "AddressV6": {
          "description": "IP address version 6",
          "type": "string"
        },
        "Gateway": {
          "description": "Gateway address",
          "type": "string"
        },
        "NetMask": {
          "description": "Netmask",
          "type": "string"
        },
        "Instance": {
          "$ref": "#/definitions/BaseResource",
          "description": "Instance"
        },
        "MacAddress": {
          "description": "The MAC address of the network card associated with that IP address",
          "type": "string"
        },
        "InterfaceId": {
          "format": "int32",
          "description": "Network card number",
          "type": "integer"
        },
        "DnsPrefix": {
          "description": "DNS prefix",
          "type": "string"
        },
        "DhcpBranch": {
          "description": "Dhcp branch address",
          "type": "string"
        },
        "Subregion": {
          "$ref": "#/definitions/BaseResource",
          "description": "Subregion"
        },
        "Type": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "OwnerAccount": {
          "$ref": "#/definitions/BaseResource",
          "description": "Account that is owner IP address"
        },
        "Comment": {
          "description": "Owner comment",
          "type": "string"
        },
        "RevDns": {
          "description": "Reverse DNS IP version 4",
          "type": "string"
        },
        "RevDnsV6": {
          "description": "Reverse DNS IP version 6",
          "type": "string"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the IP"
        }
      }
    },
    "BookIpCommand": {
      "description": "Assign new IP to client command",
      "required": [
        "SubregionId"
      ],
      "type": "object",
      "properties": {
        "SubregionId": {
          "format": "int32",
          "description": "Subregion Id",
          "type": "integer"
        }
      }
    },
    "UpdateIpCommand": {
      "description": "Instance IP configuration update command",
      "type": "object",
      "properties": {
        "SetStatic": {
          "description": "IP should be static",
          "type": "boolean"
        },
        "Comment": {
          "description": "IP comment",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "RestoreRevDns": {
          "description": "Restore default value for revDNS IPv4",
          "type": "boolean"
        },
        "RestoreRevDnsV6": {
          "description": "Restore default value for revDNS IPv6",
          "type": "boolean"
        },
        "RevDns": {
          "description": "revDNS for IPv4",
          "pattern": "^[A-Za-z0-9_ \\-.]{3,255}$",
          "type": "string"
        },
        "RevDnsV6": {
          "description": "revDNS for IPv6",
          "pattern": "^[A-Za-z0-9_ \\-.]{3,255}$",
          "type": "string"
        }
      }
    },
    "AttachIpToInstanceCommand": {
      "description": "Attach IP to instance command",
      "type": "object",
      "properties": {
        "IpId": {
          "format": "int32",
          "description": "IP address identifier. Optional value, if null random ip will be attached.",
          "type": "integer"
        },
        "IpV6": {
          "description": "If attach IPv6 only. Optional value, if null IPv4 and IPv6 will be attached.",
          "type": "boolean"
        }
      }
    },
    "DetachIpFromInstanceCommand": {
      "description": "Detach IP from instance command",
      "required": [
        "IpId"
      ],
      "type": "object",
      "properties": {
        "IpId": {
          "format": "int32",
          "description": "IP address identifier",
          "type": "integer"
        }
      }
    },
    "ApiCollection[Snapshot]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Snapshot"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "Snapshot": {
      "description": "Snapshot",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "ID",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Description": {
          "description": "Description",
          "type": "string"
        },
        "Instance": {
          "$ref": "#/definitions/BaseResource",
          "description": "Instance"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        },
        "LastChangeDate": {
          "format": "date-time",
          "description": "Last change date",
          "type": "string"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the snapshot"
        },
        "IsSystem": {
          "description": "Is system snapshot. Not created by the user.",
          "type": "boolean"
        },
        "IsCurrent": {
          "description": "Is current",
          "type": "boolean"
        },
        "SnapshotParent": {
          "$ref": "#/definitions/BaseResource",
          "description": "Snapshot parent"
        }
      }
    },
    "CreateUpdateSnapshotCommand": {
      "description": "Create/update snapshot command",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name",
          "default": "Snapshot name",
          "maxLength": 500,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Description": {
          "description": "Description",
          "default": "Snapshot description",
          "pattern": "^[^/]*$",
          "type": "string"
        }
      }
    },
    "EventsSearchParams": {
      "description": "Search params for instance events",
      "type": "object",
      "properties": {
        "UserId": {
          "format": "int32",
          "description": "User id",
          "type": "integer"
        },
        "DateFrom": {
          "format": "date-time",
          "description": "Date from",
          "type": "string"
        },
        "DateTo": {
          "format": "date-time",
          "description": "Date to",
          "type": "string"
        },
        "OperationTypeId": {
          "format": "int32",
          "description": "Operation type id",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DeleteEventsCommand": {
      "description": "Delete events command",
      "required": [
        "DateFrom",
        "DateTo"
      ],
      "type": "object",
      "properties": {
        "DateFrom": {
          "format": "date-time",
          "description": "Date from",
          "type": "string"
        },
        "DateTo": {
          "format": "date-time",
          "description": "Date to",
          "type": "string"
        }
      }
    },
    "CreateExportCommand": {
      "description": "Create export command",
      "required": [
        "Name",
        "OcsLocation",
        "OcsProjectId"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name",
          "maxLength": 300,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "OcsLocation": {
          "description": "OCS location",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "OcsProjectId": {
          "description": "OCS Project Id",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "InstanceExportsSearchParams": {
      "description": "Instance exports search params",
      "type": "object",
      "properties": {
        "StatusId": {
          "format": "int32",
          "description": "Status id",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "InstancesTypesSearchParams": {
      "description": "Search params for instances types",
      "type": "object",
      "properties": {
        "CategoryId": {
          "format": "int32",
          "description": "Category id",
          "type": "integer"
        },
        "AvailableForFreemium": {
          "description": "Is available for freemium",
          "type": "boolean"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ApiCollection[InstanceType]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceType"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "InstanceType": {
      "description": "Instance type",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Cpu": {
          "format": "int32",
          "description": "Number of CPU",
          "type": "integer"
        },
        "Ram": {
          "format": "int32",
          "description": "Memory in MB",
          "type": "integer"
        },
        "AvailableForFreemium": {
          "description": "Is available for Freemiuim",
          "type": "boolean"
        },
        "Category": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Category"
        }
      }
    },
    "AccessData": {
      "description": "Instance access data",
      "type": "object",
      "properties": {
        "Password": {
          "description": "Administrator password",
          "type": "string"
        },
        "SshKeys": {
          "description": "SSH keys uploaded to instances",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceSshKey"
          }
        }
      }
    },
    "InstanceSshKey": {
      "description": "SSH key uploaded to instance",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Value": {
          "description": "Key value trimmed",
          "type": "string"
        }
      }
    },
    "ApiCollection[InstanceSshKey]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceSshKey"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "Autoscaler": {
      "description": "Instance autoscaler settings",
      "type": "object",
      "properties": {
        "AutoscalingMode": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Instance autoscaling mode"
        },
        "HotPlugEnabled": {
          "description": "Is hotplug enabled",
          "type": "boolean"
        },
        "AutoscalingParameter": {
          "$ref": "#/definitions/InstanceAutoscalingParameter",
          "description": "Instance autoscaling parameter"
        }
      }
    },
    "InstanceAutoscalingParameter": {
      "description": "Instance autoscaling configuration",
      "type": "object",
      "properties": {
        "AutoscalingParameterType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Autoscaling parameter type"
        },
        "MinRam": {
          "format": "int32",
          "description": "Minimum RAM capacity in megabytes",
          "type": "integer"
        },
        "MaxRam": {
          "format": "int32",
          "description": "Maximum RAM capacity in megabytes",
          "type": "integer"
        },
        "MinCpu": {
          "format": "int32",
          "description": "Minimum CPU count",
          "type": "integer"
        },
        "MaxCpu": {
          "format": "int32",
          "description": "Maximum CPU count",
          "type": "integer"
        },
        "HasAgreedToIncreaseClass": {
          "description": "Instance class increase agreement",
          "type": "boolean"
        },
        "HasAgreedToDecreaseClass": {
          "description": "Instance class decrease agreement",
          "type": "boolean"
        },
        "HasAgreedToRestart": {
          "description": "Restart agreement",
          "type": "boolean"
        },
        "RestartTimeFrom": {
          "$ref": "#/definitions/Nullable[Time]",
          "description": "Restart time lower limit"
        },
        "RestartTimeTo": {
          "$ref": "#/definitions/Nullable[Time]",
          "description": "Restart time upper limit"
        },
        "TimeZoneName": {
          "description": "Time zone name (https://www.iana.org/time-zones)",
          "type": "string"
        }
      }
    },
    "Nullable[Time]": {
      "type": "object",
      "properties": {
        "Hours": {
          "format": "int32",
          "description": "Hours",
          "type": "integer",
          "readOnly": true
        },
        "Minutes": {
          "format": "int32",
          "description": "Minutes",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "AutoscalerUpdateCommand": {
      "description": "Instance autoscaler configuration update command",
      "type": "object",
      "properties": {
        "AutoscalingParameterType": {
          "format": "int32",
          "description": "Autoscaling parameter type",
          "type": "integer"
        },
        "MinRam": {
          "format": "int32",
          "description": "Minimum RAM capacity in megabytes",
          "type": "integer"
        },
        "MaxRam": {
          "format": "int32",
          "description": "Maximum RAM capacity in megabytes",
          "type": "integer"
        },
        "MinCpu": {
          "format": "int32",
          "description": "Minimum CPU count",
          "type": "integer"
        },
        "MaxCpu": {
          "format": "int32",
          "description": "Maximum CPU count",
          "type": "integer"
        },
        "HasAgreedToIncreaseClass": {
          "description": "Instance class increase agreement",
          "type": "boolean"
        },
        "HasAgreedToDecreaseClass": {
          "description": "Instance class decrease agreement",
          "type": "boolean"
        },
        "HasAgreedToRestart": {
          "description": "Restart agreement",
          "type": "boolean"
        },
        "RestartTimeFrom": {
          "description": "Restart time lower limit in HH:mm format",
          "pattern": "^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$",
          "type": "string"
        },
        "RestartTimeTo": {
          "description": "Restart time upper limit in  HH:mm format",
          "pattern": "^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$",
          "type": "string"
        },
        "TimeZoneName": {
          "description": "Timezone name",
          "type": "string"
        }
      }
    },
    "BaseSearchParamsWithQuery": {
      "description": "Search params",
      "type": "object",
      "properties": {
        "Query": {
          "description": "Query",
          "type": "string"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ApiCollection[Opn]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Opn"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "Opn": {
      "description": "Virtual private network",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "ID",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        },
        "LastChangeDate": {
          "format": "date-time",
          "description": "Last change date",
          "type": "string"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the opn"
        },
        "PrivateIps": {
          "description": "Private IPs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateIp"
          }
        }
      }
    },
    "PrivateIp": {
      "description": "Private IP address",
      "type": "object",
      "properties": {
        "InterfaceId": {
          "format": "int32",
          "description": "Interface id",
          "type": "integer"
        },
        "MacAddress": {
          "description": "The MAC address of the network card associated with that IP address",
          "type": "string"
        },
        "Address": {
          "description": "Adres IPv4",
          "type": "string"
        },
        "AddressV6": {
          "description": "Adres IPv6",
          "type": "string"
        },
        "Instance": {
          "$ref": "#/definitions/BaseResource",
          "description": "Instance"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        }
      }
    },
    "AttachInstanceToOpnCommand": {
      "description": "Attach instance to OPN command",
      "required": [
        "OpnId"
      ],
      "type": "object",
      "properties": {
        "OpnId": {
          "format": "int32",
          "description": "OPN id",
          "type": "integer"
        }
      }
    },
    "DetachInstanceFromOpnCommand": {
      "description": "Detach instance from OPN command",
      "required": [
        "OpnId"
      ],
      "type": "object",
      "properties": {
        "OpnId": {
          "format": "int32",
          "description": "OPN id",
          "type": "integer"
        }
      }
    },
    "ChangeOpnCommand": {
      "description": "Change OPN command",
      "required": [
        "TargetOpnId",
        "InterfaceId"
      ],
      "type": "object",
      "properties": {
        "TargetOpnId": {
          "format": "int32",
          "description": "Target OPN id",
          "type": "integer"
        },
        "InterfaceId": {
          "format": "int32",
          "description": "Interface id",
          "type": "integer"
        }
      }
    },
    "NetworkInterface": {
      "description": "Network interface",
      "type": "object",
      "properties": {
        "InterfaceId": {
          "format": "int32",
          "description": "Interface id",
          "type": "integer"
        },
        "MacAddress": {
          "description": "The MAC address of the network card associated with that IP address",
          "type": "string"
        },
        "Instance": {
          "$ref": "#/definitions/NamedResource",
          "description": "Instance"
        },
        "Opn": {
          "$ref": "#/definitions/NamedResource",
          "description": "OPN"
        },
        "Address": {
          "description": "IP address version 4",
          "type": "string"
        },
        "AddressV6": {
          "description": "IP address version 6",
          "type": "string"
        },
        "Ip": {
          "$ref": "#/definitions/BaseResource",
          "description": "IP address"
        },
        "Comment": {
          "description": "Comment",
          "type": "string"
        },
        "RevDns": {
          "description": "RevDNS",
          "type": "string"
        },
        "RevDnsV6": {
          "description": "RevDNS v6",
          "type": "string"
        },
        "Subregion": {
          "$ref": "#/definitions/BaseResource",
          "description": "Subregion"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the network interface"
        }
      }
    },
    "CloneInstanceCommand": {
      "description": "Clone instance command",
      "required": [
        "CloneName",
        "CloneType"
      ],
      "type": "object",
      "properties": {
        "CloneName": {
          "description": "Clone name",
          "maxLength": 40,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "CloneType": {
          "format": "int32",
          "description": "Clone type",
          "type": "integer"
        },
        "SubregionId": {
          "format": "int32",
          "description": "Subregion Id",
          "type": "integer"
        },
        "PowerOn": {
          "description": "Instance should be power on after clone",
          "type": "boolean"
        }
      }
    },
    "InstanceSchedulersSearchParams": {
      "description": "Search params for instance schedulers",
      "type": "object",
      "properties": {
        "InstanceId": {
          "format": "int32",
          "description": "Instance id filter",
          "type": "integer"
        },
        "ActionTypeId": {
          "format": "int32",
          "description": "Action type id filter",
          "type": "integer"
        },
        "Query": {
          "description": "Query",
          "type": "string"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ApiCollection[InstanceScheduler]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceScheduler"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "InstanceScheduler": {
      "description": "Instance scheduler",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "ID",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Instance": {
          "$ref": "#/definitions/BaseResource",
          "description": "Instance"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        },
        "LastChangeDate": {
          "format": "date-time",
          "description": "Last change date",
          "type": "string"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the scheduler"
        },
        "Type": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "Status": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Status"
        },
        "StartDate": {
          "format": "date-time",
          "description": "Start date",
          "type": "string"
        },
        "CycleType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Cycle type"
        },
        "CycleNumber": {
          "format": "int32",
          "description": "Cycle number beetwen scheduler launch",
          "type": "integer"
        },
        "ActionType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Action type"
        },
        "NewInstanceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "New instance type. In case of \"Instance type change\" action type."
        },
        "SnapshotName": {
          "description": "Snapshot name. In case of \"Create snapshot\" action type.",
          "type": "string"
        },
        "SnapshotDescription": {
          "description": "Snapshot description. In case of \"Create snapshot\" action type.",
          "type": "string"
        },
        "Snapshot": {
          "$ref": "#/definitions/BaseResource",
          "description": "Snashot. In case of \"Delete snapshot\" action type."
        },
        "CloneName": {
          "description": "Clone name. In case of \"Clone machine\" action type.",
          "type": "string"
        },
        "StoragePath": {
          "description": "Storage path. In case of \"Create backup\" action type.",
          "type": "string"
        },
        "StorageProjectId": {
          "description": "Storage project id. In case of \"Create backup\" action type.",
          "type": "string"
        },
        "IsBackupsDaysLimit": {
          "description": "Is backups days limit set. In case of \"Create backup\" action type.",
          "type": "boolean"
        },
        "BackupsDaysLimit": {
          "format": "int32",
          "description": "Backups days limit. In case of \"Create backup\" action type.",
          "type": "integer"
        }
      }
    },
    "GetScreenshotCommand": {
      "description": "Get screenshot command",
      "type": "object",
      "properties": {
        "Width": {
          "format": "int32",
          "description": "The pixel width of the scaled image",
          "maximum": 3000,
          "minimum": 1,
          "type": "integer"
        },
        "Height": {
          "format": "int32",
          "description": "The pixel height of the scaled image",
          "maximum": 3000,
          "minimum": 1,
          "type": "integer"
        }
      }
    },
    "CreateUpdateVncConnectionCommand": {
      "description": "Create/update VNC connection command",
      "required": [
        "TimeoutInMinutes"
      ],
      "type": "object",
      "properties": {
        "SourceIp": {
          "description": "Source ip - only connections from this source ip will be accepted",
          "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string"
        },
        "TimeoutInMinutes": {
          "format": "int32",
          "description": "Connection will be closed after that period",
          "maximum": 360,
          "minimum": 30,
          "type": "integer"
        }
      }
    },
    "VncConnection": {
      "description": "VNC connection properties",
      "type": "object",
      "properties": {
        "Instance": {
          "$ref": "#/definitions/BaseResource",
          "description": "Instance"
        },
        "SourceIp": {
          "description": "Source ip",
          "type": "string"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "description": "Port",
          "type": "integer"
        },
        "Password": {
          "description": "Password",
          "type": "string"
        },
        "OpenUntil": {
          "format": "date-time",
          "description": "Open until",
          "type": "string"
        }
      }
    },
    "ApiCollection[Software]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Software"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "CreateUpdateInstanceSchedulerCommand": {
      "description": "Create/update instance scheduler command",
      "required": [
        "Name",
        "TypeId",
        "StartDate",
        "ActionTypeId"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name",
          "maxLength": 400,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "TypeId": {
          "format": "int32",
          "description": "Type id",
          "type": "integer"
        },
        "StartDate": {
          "format": "date-time",
          "description": "Start date",
          "type": "string"
        },
        "CycleTypeId": {
          "format": "int32",
          "description": "Cycle type id",
          "type": "integer"
        },
        "CycleNumber": {
          "format": "int32",
          "description": "Cycle number beetwen scheduler launch",
          "maximum": 32767,
          "minimum": 1,
          "type": "integer"
        },
        "ActionTypeId": {
          "format": "int32",
          "description": "Action type",
          "type": "integer"
        },
        "NewInstanceTypeId": {
          "format": "int32",
          "description": "New instance type. In case of \"Instance type change\" action type.",
          "type": "integer"
        },
        "SnapshotName": {
          "description": "Snapshot name. In case of \"Create snapshot\" action type.",
          "maxLength": 400,
          "minLength": 0,
          "type": "string"
        },
        "SnapshotDescription": {
          "description": "Snapshot description. In case of \"Create snapshot\" action type.",
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        },
        "SnapshotId": {
          "format": "int32",
          "description": "Snashot. In case of \"Delete snapshot\" action type.",
          "type": "integer"
        },
        "CloneName": {
          "description": "Clone name. In case of \"Clone machine\" action type.",
          "pattern": "^[^/]*$",
          "type": "string"
        },
        "StoragePath": {
          "description": "Storage path. In case of \"Create backup\" action type.",
          "maxLength": 400,
          "minLength": 0,
          "type": "string"
        },
        "StorageProjectId": {
          "description": "Storage project id. In case of \"Create backup\" action type.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "IsBackupsDaysLimit": {
          "description": "Is backups days limit set. In case of \"Create backup\" action type.",
          "type": "boolean"
        },
        "BackupsDaysLimit": {
          "format": "int32",
          "description": "Backups days limit. In case of \"Create backup\" action type.",
          "type": "integer"
        }
      }
    },
    "SetLoadBalancerCommand": {
      "description": "Set load balancer command",
      "required": [
        "ServiceType",
        "SessionPersistenceType",
        "LoadBalancerAlgorithm",
        "IpVersion"
      ],
      "type": "object",
      "properties": {
        "SslEnabled": {
          "description": "Is ssl enabled (only for \"HTTP\" load balancer service type)",
          "type": "boolean"
        },
        "ServiceType": {
          "format": "int32",
          "description": "Load balancer service type",
          "type": "integer"
        },
        "PortNumber": {
          "format": "int32",
          "description": "Port number for \"Port\" load balancer service type",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "SessionPersistenceType": {
          "format": "int32",
          "description": "Session persistence type",
          "type": "integer"
        },
        "LoadBalancerAlgorithm": {
          "format": "int32",
          "description": "Load balancing algorithm",
          "type": "integer"
        },
        "IpVersion": {
          "format": "int32",
          "description": "Ip version for load balancing",
          "type": "integer"
        },
        "HealthCheckEnabled": {
          "description": "Is health check enabled",
          "type": "boolean"
        },
        "CommonPersistenceForHttpAndHttpsEnabled": {
          "description": "Is common persistence for HTTP and HTTPS enabled (only for \"HTTP\" load balancer service type)",
          "type": "boolean"
        },
        "LoadBalancerIpId": {
          "format": "int32",
          "description": "Public ip id for load balancer",
          "type": "integer"
        }
      }
    },
    "ChangeContainerServiceStateCommand": {
      "description": "Change container service state command",
      "required": [
        "IpAddress",
        "Port",
        "Enabled"
      ],
      "type": "object",
      "properties": {
        "IpAddress": {
          "description": "Service ip address",
          "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "description": "Service port",
          "type": "integer"
        },
        "Enabled": {
          "description": "Target state",
          "type": "boolean"
        },
        "Graceful": {
          "description": "If true - waits for closing all open connections on specific service before disabling",
          "type": "boolean"
        }
      }
    },
    "ApiCollection[OcsProject]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OcsProject"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "OcsProject": {
      "description": "Oktawave Cloud Storage Project",
      "type": "object",
      "properties": {
        "Id": {
          "description": "ID",
          "type": "string"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Description": {
          "description": "Description",
          "type": "string"
        },
        "Url": {
          "description": "Url",
          "type": "string"
        },
        "AuthorizationType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Authorization type"
        }
      }
    },
    "OpnSearchParams": {
      "description": "Search params for OPNs",
      "type": "object",
      "properties": {
        "InstanceId": {
          "format": "int32",
          "description": "Instance id",
          "type": "integer"
        },
        "Query": {
          "description": "Query",
          "type": "string"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CreateOpnCommand": {
      "description": "Create OPN command",
      "required": [
        "OpnName"
      ],
      "type": "object",
      "properties": {
        "OpnName": {
          "description": "OPN name",
          "maxLength": 500,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        }
      }
    },
    "UpdateOpnCommand": {
      "description": "OPN update command",
      "required": [
        "OpnName"
      ],
      "type": "object",
      "properties": {
        "OpnName": {
          "description": "OPN Name",
          "maxLength": 500,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        }
      }
    },
    "SnapshotsSearchParams": {
      "description": "Search params for snapshots",
      "type": "object",
      "properties": {
        "InstanceId": {
          "format": "int32",
          "description": "Instance id",
          "type": "integer"
        },
        "Query": {
          "description": "Query",
          "type": "string"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "InstanceStatisticsSearchParams": {
      "description": "Search params for instance statistics",
      "required": [
        "StatisticInterval",
        "DateFrom",
        "DateTo",
        "StatisticTypes"
      ],
      "type": "object",
      "properties": {
        "StatisticInterval": {
          "format": "int32",
          "description": "Statistic interval",
          "default": 1519,
          "type": "integer"
        },
        "DateFrom": {
          "format": "date-time",
          "description": "Date from (utc timezone)",
          "type": "string"
        },
        "DateTo": {
          "format": "date-time",
          "description": "Date to (utc timezone)",
          "type": "string"
        },
        "StatisticTypes": {
          "description": "Statistic types",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "ApiCollection[InstanceStatistics]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceStatistics"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "InstanceStatistics": {
      "description": "Basic instance statistics",
      "type": "object",
      "properties": {
        "Instance": {
          "$ref": "#/definitions/BaseResource",
          "description": "Instance"
        },
        "StatisticType": {
          "$ref": "#/definitions/BaseResource",
          "description": "Statistic type"
        },
        "SampleTime": {
          "format": "date-time",
          "description": "Sample time",
          "type": "string"
        },
        "Details": {
          "description": "Details",
          "type": "string"
        },
        "Value": {
          "format": "int64",
          "description": "Value",
          "type": "integer"
        }
      }
    },
    "ClientStatisticsSearchParams": {
      "description": "Search params for client statistics",
      "required": [
        "DateFrom",
        "DateTo",
        "StatisticTypes"
      ],
      "type": "object",
      "properties": {
        "DateFrom": {
          "format": "date-time",
          "description": "Date from (utc timezone)",
          "type": "string"
        },
        "DateTo": {
          "format": "date-time",
          "description": "Date to (utc timezone)",
          "type": "string"
        },
        "StatisticTypes": {
          "description": "Statistic types",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "ApiCollection[ClientStatistics]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientStatistics"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "ClientStatistics": {
      "description": "Client statistics",
      "type": "object",
      "properties": {
        "StatisticType": {
          "$ref": "#/definitions/BaseResource",
          "description": "Statistic type"
        },
        "SampleTime": {
          "format": "date-time",
          "description": "Sample time",
          "type": "string"
        },
        "Value": {
          "format": "int64",
          "description": "Value",
          "type": "integer"
        }
      }
    },
    "Subregion": {
      "description": "Subregion",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "IsActive": {
          "description": "Is active",
          "type": "boolean"
        }
      }
    },
    "ApiCollection[Subregion]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subregion"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "TemplatesSearchParams": {
      "description": "Search params for templates",
      "type": "object",
      "properties": {
        "Source": {
          "description": "Source",
          "enum": [
            "All",
            "Standard",
            "Own",
            "CommunityCatalogue",
            "Marketplace"
          ],
          "type": "string"
        },
        "Query": {
          "description": "Query",
          "type": "string"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ApiCollection[Template]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Template"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "Template": {
      "description": "Template",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Description": {
          "description": "Description",
          "type": "string"
        },
        "Version": {
          "description": "Version",
          "type": "string"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        },
        "LastChangeDate": {
          "format": "date-time",
          "description": "Last change date",
          "type": "string"
        },
        "CreationUser": {
          "$ref": "#/definitions/UserResource",
          "description": "User who created the template"
        },
        "DefaultInstanceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Default instance type"
        },
        "MinimumInstanceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Minimum instance type"
        },
        "EthernetControllersNumber": {
          "format": "int32",
          "description": "Ethernet controllers number",
          "type": "integer"
        },
        "EthernetControllersType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Ethernet controllers type"
        },
        "SystemCategory": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "System category"
        },
        "OwnerAccount": {
          "$ref": "#/definitions/BaseResource",
          "description": "Owner account"
        },
        "PublicationStatus": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Publication status"
        },
        "Disks": {
          "description": "Disks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemplateDisk"
          }
        },
        "Software": {
          "description": "Softwares",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Software"
          }
        },
        "TemplateType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Template type"
        }
      }
    },
    "TemplateDisk": {
      "description": "Template disk",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "SpaceCapacity": {
          "format": "int32",
          "description": "Space capacity in GB",
          "type": "integer"
        },
        "Tier": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Tier"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Creation date",
          "type": "string"
        },
        "Controller": {
          "format": "int32",
          "description": "Controller",
          "type": "integer"
        },
        "Slot": {
          "format": "int32",
          "description": "Slot",
          "type": "integer"
        },
        "IsSystemDisk": {
          "description": "If is system disk",
          "type": "boolean"
        }
      }
    },
    "UpdateTemplateCommand": {
      "description": "Update template command",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Template name",
          "maxLength": 300,
          "minLength": 0,
          "type": "string"
        },
        "TemplateDescriptions": {
          "description": "Template descriptions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemplateDescription"
          }
        },
        "IsPublic": {
          "description": "Should be published",
          "type": "boolean"
        }
      }
    },
    "TicketsSearchParams": {
      "description": "Search params for tickets",
      "type": "object",
      "properties": {
        "StatusId": {
          "format": "int32",
          "description": "Tickets status id",
          "type": "integer"
        },
        "CreationDateFrom": {
          "format": "date-time",
          "description": "Tickets creation date from",
          "type": "string"
        },
        "CreationDateTo": {
          "format": "date-time",
          "description": "Tickets creation date to",
          "type": "string"
        },
        "PageSize": {
          "format": "int32",
          "description": "Page size",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "OrderBy": {
          "description": "Order by",
          "type": "string"
        },
        "SortExpression": {
          "description": "Sort expression",
          "type": "string",
          "readOnly": true
        },
        "SortDirection": {
          "description": "Sort direction",
          "enum": [
            "Descending",
            "Ascending"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ApiCollection[Ticket]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ticket"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "ApiCollection[HealthCheck]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthCheck"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "HealthCheck": {
      "description": "Health check",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Interval": {
          "format": "int32",
          "description": "Interval",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "ServiceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "State": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "State"
        },
        "DetailsLocation": {
          "description": "Details url",
          "type": "string"
        },
        "Paused": {
          "description": "Is paused",
          "type": "boolean"
        },
        "Suspended": {
          "description": "Is suspended",
          "type": "boolean"
        },
        "LastInvalidCheck": {
          "format": "date-time",
          "description": "Last invalid check",
          "type": "string"
        },
        "LastValidCheck": {
          "format": "date-time",
          "description": "Last valid check",
          "type": "string"
        }
      }
    },
    "HealthCheckHttp": {
      "description": "Http health check",
      "type": "object",
      "properties": {
        "HttpMethod": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Health check http method type"
        },
        "ContentRegularExpression": {
          "description": "The content has to match the expression",
          "type": "string"
        },
        "ContentNegativeRegularExpression": {
          "description": "The content cannot match the expression",
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "description": "Port",
          "type": "integer"
        },
        "Timeout": {
          "format": "int32",
          "description": "Timeout",
          "type": "integer"
        },
        "Content": {
          "description": "Content",
          "type": "string"
        },
        "ContentType": {
          "description": "Content type",
          "type": "string"
        },
        "NotificationTypes": {
          "description": "Notification types enabled for a health check",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationEventTypes": {
          "description": "Event types with enabled notification",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationTime": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Time when notification is sent"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "type": "boolean"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "type": "integer"
        },
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Interval": {
          "format": "int32",
          "description": "Interval",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "ServiceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "State": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "State"
        },
        "DetailsLocation": {
          "description": "Details url",
          "type": "string"
        },
        "Paused": {
          "description": "Is paused",
          "type": "boolean"
        },
        "Suspended": {
          "description": "Is suspended",
          "type": "boolean"
        },
        "LastInvalidCheck": {
          "format": "date-time",
          "description": "Last invalid check",
          "type": "string"
        },
        "LastValidCheck": {
          "format": "date-time",
          "description": "Last valid check",
          "type": "string"
        }
      }
    },
    "CreateUpdateHealthCheckHttpCommand": {
      "description": "Create/update http health check command",
      "required": [
        "HttpMethodId",
        "Port",
        "Timeout",
        "ErrorTolerance",
        "Name",
        "Address",
        "Interval",
        "Paused",
        "LocationsFailoverEnabled",
        "NotificationTimeId"
      ],
      "type": "object",
      "properties": {
        "HttpMethodId": {
          "format": "int32",
          "description": "Health check http method type (Dictionary 166)",
          "default": 1440,
          "type": "integer"
        },
        "ContentRegularExpression": {
          "description": "The content has to match the expression (GET and POST methods only)",
          "default": "",
          "type": "string"
        },
        "ContentNegativeRegularExpression": {
          "description": "The content cannot match the expression (GET and POST methods only)",
          "default": "",
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "description": "Port",
          "default": 80,
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "Timeout": {
          "format": "int32",
          "description": "Time the server has to complete the request in [ms]",
          "default": 7000,
          "maximum": 120000,
          "minimum": 10,
          "type": "integer"
        },
        "Content": {
          "description": "Content",
          "default": "",
          "type": "string"
        },
        "ContentType": {
          "description": "Content type",
          "default": "",
          "type": "string"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "default": 51,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Health check name",
          "default": "",
          "maxLength": 2000,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Address": {
          "description": "URL or IP address of the monitored service",
          "default": "",
          "type": "string"
        },
        "Interval": {
          "format": "int32",
          "description": "Time interval between health checks, in seconds",
          "default": 60,
          "type": "integer"
        },
        "Paused": {
          "description": "Is paused",
          "default": false,
          "type": "boolean"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "default": true,
          "type": "boolean"
        },
        "NotificationTypeIds": {
          "description": "Notification types enabled for a health check",
          "default": [
            1540,
            1545
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationEventTypeIds": {
          "description": "Event types with enabled notification",
          "default": [
            1601,
            1602
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationTimeId": {
          "format": "int32",
          "description": "Time when notification is sent",
          "default": 1594,
          "type": "integer"
        }
      }
    },
    "CreateUpdateHealthCheckHttpsCommand": {
      "description": "Create/update http health check command",
      "required": [
        "HttpMethodId",
        "Port",
        "Timeout",
        "ErrorTolerance",
        "Name",
        "Address",
        "Interval",
        "Paused",
        "LocationsFailoverEnabled",
        "NotificationTimeId"
      ],
      "type": "object",
      "properties": {
        "HttpMethodId": {
          "format": "int32",
          "description": "Health check http method type (Dictionary 166)",
          "default": 1440,
          "type": "integer"
        },
        "ContentRegularExpression": {
          "description": "The content has to match the expression (GET and POST methods only)",
          "default": "",
          "type": "string"
        },
        "ContentNegativeRegularExpression": {
          "description": "The content cannot match the expression (GET and POST methods only)",
          "default": "",
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "description": "Port",
          "default": 80,
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "Timeout": {
          "format": "int32",
          "description": "Time the server has to complete the request in [ms]",
          "default": 7000,
          "maximum": 120000,
          "minimum": 10,
          "type": "integer"
        },
        "Content": {
          "description": "Content",
          "default": "",
          "type": "string"
        },
        "ContentType": {
          "description": "Content type",
          "default": "",
          "type": "string"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "default": 51,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Health check name",
          "default": "",
          "maxLength": 2000,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Address": {
          "description": "URL or IP address of the monitored service",
          "default": "",
          "type": "string"
        },
        "Interval": {
          "format": "int32",
          "description": "Time interval between health checks, in seconds",
          "default": 60,
          "type": "integer"
        },
        "Paused": {
          "description": "Is paused",
          "default": false,
          "type": "boolean"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "default": true,
          "type": "boolean"
        },
        "NotificationTypeIds": {
          "description": "Notification types enabled for a health check",
          "default": [
            1540,
            1545
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationEventTypeIds": {
          "description": "Event types with enabled notification",
          "default": [
            1601,
            1602
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationTimeId": {
          "format": "int32",
          "description": "Time when notification is sent",
          "default": 1594,
          "type": "integer"
        }
      }
    },
    "HealthCheckPing": {
      "description": "Ping health check",
      "type": "object",
      "properties": {
        "PackageSize": {
          "format": "int32",
          "description": "Package size",
          "type": "integer"
        },
        "ReplyTimeout": {
          "format": "int32",
          "description": "Reply timeout",
          "type": "integer"
        },
        "NotificationTypes": {
          "description": "Notification types enabled for a health check",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationEventTypes": {
          "description": "Event types with enabled notification",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationTime": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Time when notification is sent"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "type": "boolean"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "type": "integer"
        },
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Interval": {
          "format": "int32",
          "description": "Interval",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "ServiceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "State": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "State"
        },
        "DetailsLocation": {
          "description": "Details url",
          "type": "string"
        },
        "Paused": {
          "description": "Is paused",
          "type": "boolean"
        },
        "Suspended": {
          "description": "Is suspended",
          "type": "boolean"
        },
        "LastInvalidCheck": {
          "format": "date-time",
          "description": "Last invalid check",
          "type": "string"
        },
        "LastValidCheck": {
          "format": "date-time",
          "description": "Last valid check",
          "type": "string"
        }
      }
    },
    "CreateUpdateHealthCheckPingCommand": {
      "description": "Create/update ping health check command",
      "required": [
        "PackageSize",
        "ReplyTimeout",
        "ErrorTolerance",
        "Name",
        "Address",
        "Interval",
        "Paused",
        "LocationsFailoverEnabled",
        "NotificationTimeId"
      ],
      "type": "object",
      "properties": {
        "PackageSize": {
          "format": "int32",
          "description": "Data package size [bytes]",
          "default": 64,
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "ReplyTimeout": {
          "format": "int32",
          "description": "Maximum waiting time for a response [ms]",
          "default": 3000,
          "maximum": 120000,
          "minimum": 1,
          "type": "integer"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "default": 51,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Health check name",
          "default": "",
          "maxLength": 2000,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Address": {
          "description": "URL or IP address of the monitored service",
          "default": "",
          "type": "string"
        },
        "Interval": {
          "format": "int32",
          "description": "Time interval between health checks, in seconds",
          "default": 60,
          "type": "integer"
        },
        "Paused": {
          "description": "Is paused",
          "default": false,
          "type": "boolean"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "default": true,
          "type": "boolean"
        },
        "NotificationTypeIds": {
          "description": "Notification types enabled for a health check",
          "default": [
            1540,
            1545
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationEventTypeIds": {
          "description": "Event types with enabled notification",
          "default": [
            1601,
            1602
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationTimeId": {
          "format": "int32",
          "description": "Time when notification is sent",
          "default": 1594,
          "type": "integer"
        }
      }
    },
    "HealthCheckFullPage": {
      "description": "FullPage health check",
      "type": "object",
      "properties": {
        "HttpMethod": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Health check http method type"
        },
        "ContentRegularExpression": {
          "description": "The content has to match the expression (GET and POST methods only)",
          "type": "string"
        },
        "ContentNegativeRegularExpression": {
          "description": "The content cannot match the expression (GET and POST methods only)",
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "description": "Port",
          "type": "integer"
        },
        "PageTimeout": {
          "format": "int32",
          "description": "Time limit for the main page body [ms]",
          "type": "integer"
        },
        "ElementTimeout": {
          "format": "int32",
          "description": "Time limit for each page elements [ms]",
          "type": "integer"
        },
        "ElementsTotalTimeout": {
          "format": "int32",
          "description": "Time limit for all page elements [ms]",
          "type": "integer"
        },
        "FetchPageElements": {
          "description": "Fetch page elements",
          "type": "boolean"
        },
        "MaxRedirects": {
          "format": "int32",
          "description": "Maximum length of HTTP redirects sequence",
          "type": "integer"
        },
        "MaxParallelRequests": {
          "format": "int32",
          "description": "Maximum number of HTTP requests run in parallel",
          "type": "integer"
        },
        "GenerateHar": {
          "description": "Generate a HAR file for each check",
          "type": "boolean"
        },
        "AllowedElementErrorCount": {
          "format": "int32",
          "description": "Number of elements that may not be fetched correctly",
          "type": "integer"
        },
        "ContentSizeLimit": {
          "format": "int32",
          "description": "Content size limit (bytes)",
          "type": "integer"
        },
        "IgnoreHtmlParsingTime": {
          "description": "Ignore HTML code processing time in results",
          "type": "boolean"
        },
        "SaveCookies": {
          "description": "Save cookies between checks",
          "type": "boolean"
        },
        "DisableContentEncoding": {
          "description": "Disable HTTP transfer compression",
          "type": "boolean"
        },
        "Content": {
          "description": "Content",
          "type": "string"
        },
        "ContentType": {
          "description": "Content type",
          "type": "string"
        },
        "IgnoredElementsFilter": {
          "description": "Ignore errors for elements with URLs matching the expression (only if page elements are fetched)",
          "type": "string"
        },
        "ElementsFilter": {
          "description": "Do not fetch elements with URLs that match the expression",
          "type": "string"
        },
        "NotificationTypes": {
          "description": "Notification types enabled for a health check",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationEventTypes": {
          "description": "Event types with enabled notification",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationTime": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Time when notification is sent"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "type": "boolean"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "type": "integer"
        },
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Interval": {
          "format": "int32",
          "description": "Interval",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "ServiceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "State": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "State"
        },
        "DetailsLocation": {
          "description": "Details url",
          "type": "string"
        },
        "Paused": {
          "description": "Is paused",
          "type": "boolean"
        },
        "Suspended": {
          "description": "Is suspended",
          "type": "boolean"
        },
        "LastInvalidCheck": {
          "format": "date-time",
          "description": "Last invalid check",
          "type": "string"
        },
        "LastValidCheck": {
          "format": "date-time",
          "description": "Last valid check",
          "type": "string"
        }
      }
    },
    "CreateUpdateHealthCheckFullPageCommand": {
      "description": "Create/update FullPage health check command",
      "required": [
        "HttpMethodId",
        "Port",
        "PageTimeout",
        "ElementTimeout",
        "ElementsTotalTimeout",
        "FetchPageElements",
        "MaxRedirects",
        "MaxParallelRequests",
        "GenerateHar",
        "IgnoreHtmlParsingTime",
        "SaveCookies",
        "DisableContentEncoding",
        "ErrorTolerance",
        "Name",
        "Address",
        "Interval",
        "Paused",
        "LocationsFailoverEnabled",
        "NotificationTimeId"
      ],
      "type": "object",
      "properties": {
        "HttpMethodId": {
          "format": "int32",
          "description": "Health check http method type (Dictionary 166)",
          "default": 1440,
          "type": "integer"
        },
        "ContentRegularExpression": {
          "description": "The content has to match the expression (GET and POST methods only)",
          "default": "",
          "type": "string"
        },
        "ContentNegativeRegularExpression": {
          "description": "The content cannot match the expression (GET and POST methods only)",
          "default": "",
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "description": "Port",
          "default": 80,
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "PageTimeout": {
          "format": "int32",
          "description": "Time limit for the main page body [ms]",
          "default": 7000,
          "maximum": 120000,
          "minimum": 1,
          "type": "integer"
        },
        "ElementTimeout": {
          "format": "int32",
          "description": "Time limit for each page elements [ms]",
          "default": 5000,
          "maximum": 120000,
          "minimum": 1,
          "type": "integer"
        },
        "ElementsTotalTimeout": {
          "format": "int32",
          "description": "Time limit for all page elements [ms]",
          "default": 10000,
          "maximum": 120000,
          "minimum": 1,
          "type": "integer"
        },
        "FetchPageElements": {
          "description": "Fetch page elements",
          "type": "boolean"
        },
        "MaxRedirects": {
          "format": "int32",
          "description": "Maximum length of HTTP redirects sequence",
          "default": 5,
          "maximum": 20,
          "minimum": 0,
          "type": "integer"
        },
        "MaxParallelRequests": {
          "format": "int32",
          "description": "Maximum number of HTTP requests run in parallel",
          "default": 6,
          "maximum": 20,
          "minimum": 0,
          "type": "integer"
        },
        "GenerateHar": {
          "description": "Generate a HAR file for each check",
          "default": true,
          "type": "boolean"
        },
        "AllowedElementErrorCount": {
          "format": "int32",
          "description": "Number of elements that may not be fetched correctly",
          "default": 0,
          "maximum": 10000,
          "minimum": 0,
          "type": "integer"
        },
        "ContentSizeLimit": {
          "format": "int32",
          "description": "Content size limit (bytes)",
          "default": 2097152,
          "maximum": 104857600,
          "minimum": 1,
          "type": "integer"
        },
        "IgnoreHtmlParsingTime": {
          "description": "Ignore HTML code processing time in results",
          "default": true,
          "type": "boolean"
        },
        "SaveCookies": {
          "description": "Save cookies between checks",
          "default": false,
          "type": "boolean"
        },
        "DisableContentEncoding": {
          "description": "Disable HTTP transfer compression",
          "default": false,
          "type": "boolean"
        },
        "Content": {
          "description": "Content",
          "default": "",
          "type": "string"
        },
        "ContentType": {
          "description": "Content type",
          "default": "",
          "type": "string"
        },
        "IgnoredElementsFilter": {
          "description": "Ignore errors for elements with URLs matching the expression (only if page elements are fetched)",
          "default": "",
          "type": "string"
        },
        "ElementsFilter": {
          "description": "Do not fetch elements with URLs that match the expression",
          "default": "",
          "type": "string"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "default": 51,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Health check name",
          "default": "",
          "maxLength": 2000,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Address": {
          "description": "URL or IP address of the monitored service",
          "default": "",
          "type": "string"
        },
        "Interval": {
          "format": "int32",
          "description": "Time interval between health checks, in seconds",
          "default": 60,
          "type": "integer"
        },
        "Paused": {
          "description": "Is paused",
          "default": false,
          "type": "boolean"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "default": true,
          "type": "boolean"
        },
        "NotificationTypeIds": {
          "description": "Notification types enabled for a health check",
          "default": [
            1540,
            1545
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationEventTypeIds": {
          "description": "Event types with enabled notification",
          "default": [
            1601,
            1602
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationTimeId": {
          "format": "int32",
          "description": "Time when notification is sent",
          "default": 1594,
          "type": "integer"
        }
      }
    },
    "CreateUpdateHealthCheckFullPageHttpsCommand": {
      "description": "Create/update FullPage Https health check command",
      "required": [
        "HttpMethodId",
        "Port",
        "PageTimeout",
        "ElementTimeout",
        "ElementsTotalTimeout",
        "FetchPageElements",
        "MaxRedirects",
        "MaxParallelRequests",
        "GenerateHar",
        "IgnoreHtmlParsingTime",
        "SaveCookies",
        "DisableContentEncoding",
        "ErrorTolerance",
        "Name",
        "Address",
        "Interval",
        "Paused",
        "LocationsFailoverEnabled",
        "NotificationTimeId"
      ],
      "type": "object",
      "properties": {
        "HttpMethodId": {
          "format": "int32",
          "description": "Health check http method type (Dictionary 166)",
          "default": 1440,
          "type": "integer"
        },
        "ContentRegularExpression": {
          "description": "The content has to match the expression (GET and POST methods only)",
          "default": "",
          "type": "string"
        },
        "ContentNegativeRegularExpression": {
          "description": "The content cannot match the expression (GET and POST methods only)",
          "default": "",
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "description": "Port",
          "default": 80,
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "PageTimeout": {
          "format": "int32",
          "description": "Time limit for the main page body [ms]",
          "default": 7000,
          "maximum": 120000,
          "minimum": 1,
          "type": "integer"
        },
        "ElementTimeout": {
          "format": "int32",
          "description": "Time limit for each page elements [ms]",
          "default": 5000,
          "maximum": 120000,
          "minimum": 1,
          "type": "integer"
        },
        "ElementsTotalTimeout": {
          "format": "int32",
          "description": "Time limit for all page elements [ms]",
          "default": 10000,
          "maximum": 120000,
          "minimum": 1,
          "type": "integer"
        },
        "FetchPageElements": {
          "description": "Fetch page elements",
          "type": "boolean"
        },
        "MaxRedirects": {
          "format": "int32",
          "description": "Maximum length of HTTP redirects sequence",
          "default": 5,
          "maximum": 20,
          "minimum": 0,
          "type": "integer"
        },
        "MaxParallelRequests": {
          "format": "int32",
          "description": "Maximum number of HTTP requests run in parallel",
          "default": 6,
          "maximum": 20,
          "minimum": 0,
          "type": "integer"
        },
        "GenerateHar": {
          "description": "Generate a HAR file for each check",
          "default": true,
          "type": "boolean"
        },
        "AllowedElementErrorCount": {
          "format": "int32",
          "description": "Number of elements that may not be fetched correctly",
          "default": 0,
          "maximum": 10000,
          "minimum": 0,
          "type": "integer"
        },
        "ContentSizeLimit": {
          "format": "int32",
          "description": "Content size limit (bytes)",
          "default": 2097152,
          "maximum": 104857600,
          "minimum": 1,
          "type": "integer"
        },
        "IgnoreHtmlParsingTime": {
          "description": "Ignore HTML code processing time in results",
          "default": true,
          "type": "boolean"
        },
        "SaveCookies": {
          "description": "Save cookies between checks",
          "default": false,
          "type": "boolean"
        },
        "DisableContentEncoding": {
          "description": "Disable HTTP transfer compression",
          "default": false,
          "type": "boolean"
        },
        "Content": {
          "description": "Content",
          "default": "",
          "type": "string"
        },
        "ContentType": {
          "description": "Content type",
          "default": "",
          "type": "string"
        },
        "IgnoredElementsFilter": {
          "description": "Ignore errors for elements with URLs matching the expression (only if page elements are fetched)",
          "default": "",
          "type": "string"
        },
        "ElementsFilter": {
          "description": "Do not fetch elements with URLs that match the expression",
          "default": "",
          "type": "string"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "default": 51,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Health check name",
          "default": "",
          "maxLength": 2000,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Address": {
          "description": "URL or IP address of the monitored service",
          "default": "",
          "type": "string"
        },
        "Interval": {
          "format": "int32",
          "description": "Time interval between health checks, in seconds",
          "default": 60,
          "type": "integer"
        },
        "Paused": {
          "description": "Is paused",
          "default": false,
          "type": "boolean"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "default": true,
          "type": "boolean"
        },
        "NotificationTypeIds": {
          "description": "Notification types enabled for a health check",
          "default": [
            1540,
            1545
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationEventTypeIds": {
          "description": "Event types with enabled notification",
          "default": [
            1601,
            1602
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationTimeId": {
          "format": "int32",
          "description": "Time when notification is sent",
          "default": 1594,
          "type": "integer"
        }
      }
    },
    "HealthCheckDns": {
      "description": "Dns health check",
      "type": "object",
      "properties": {
        "Timeout": {
          "format": "int32",
          "description": "Timeout",
          "type": "integer"
        },
        "RecordType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Record type"
        },
        "QueryDomain": {
          "description": "Query domain",
          "type": "string"
        },
        "ExpectedResponseValue": {
          "description": "Expected DNS record value",
          "type": "string"
        },
        "Recurse": {
          "description": "Recursive query",
          "type": "boolean"
        },
        "NotificationTypes": {
          "description": "Notification types enabled for a health check",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationEventTypes": {
          "description": "Event types with enabled notification",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationTime": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Time when notification is sent"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "type": "boolean"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "type": "integer"
        },
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Interval": {
          "format": "int32",
          "description": "Interval",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "ServiceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "State": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "State"
        },
        "DetailsLocation": {
          "description": "Details url",
          "type": "string"
        },
        "Paused": {
          "description": "Is paused",
          "type": "boolean"
        },
        "Suspended": {
          "description": "Is suspended",
          "type": "boolean"
        },
        "LastInvalidCheck": {
          "format": "date-time",
          "description": "Last invalid check",
          "type": "string"
        },
        "LastValidCheck": {
          "format": "date-time",
          "description": "Last valid check",
          "type": "string"
        }
      }
    },
    "CreateUpdateHealthCheckDnsCommand": {
      "description": "Create/update dns health check command",
      "required": [
        "RecordTypeId",
        "QueryDomain",
        "Recurse",
        "ErrorTolerance",
        "Name",
        "Address",
        "Interval",
        "Paused",
        "LocationsFailoverEnabled",
        "NotificationTimeId"
      ],
      "type": "object",
      "properties": {
        "Timeout": {
          "format": "int32",
          "description": "Time the server has to complete the request in [ms]",
          "default": 10000,
          "maximum": 120000,
          "minimum": 10,
          "type": "integer"
        },
        "RecordTypeId": {
          "format": "int32",
          "description": "Record type (Dictionary 186)",
          "default": 1605,
          "type": "integer"
        },
        "QueryDomain": {
          "description": "Query domain",
          "default": "",
          "type": "string"
        },
        "ExpectedResponseValue": {
          "description": "Expected DNS record value",
          "default": "",
          "type": "string"
        },
        "Recurse": {
          "description": "Recursive query",
          "default": false,
          "type": "boolean"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "default": 51,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Health check name",
          "default": "",
          "maxLength": 2000,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Address": {
          "description": "URL or IP address of the monitored service",
          "default": "",
          "type": "string"
        },
        "Interval": {
          "format": "int32",
          "description": "Time interval between health checks, in seconds",
          "default": 60,
          "type": "integer"
        },
        "Paused": {
          "description": "Is paused",
          "default": false,
          "type": "boolean"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "default": true,
          "type": "boolean"
        },
        "NotificationTypeIds": {
          "description": "Notification types enabled for a health check",
          "default": [
            1540,
            1545
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationEventTypeIds": {
          "description": "Event types with enabled notification",
          "default": [
            1601,
            1602
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationTimeId": {
          "format": "int32",
          "description": "Time when notification is sent",
          "default": 1594,
          "type": "integer"
        }
      }
    },
    "HealthCheckImap": {
      "description": "Imap health check",
      "type": "object",
      "properties": {
        "Port": {
          "format": "int32",
          "description": "Port",
          "type": "integer"
        },
        "Timeout": {
          "format": "int32",
          "description": "Timeout",
          "type": "integer"
        },
        "NotificationTypes": {
          "description": "Notification types enabled for a health check",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationEventTypes": {
          "description": "Event types with enabled notification",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationTime": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Time when notification is sent"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "type": "boolean"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "type": "integer"
        },
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Interval": {
          "format": "int32",
          "description": "Interval",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "ServiceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "State": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "State"
        },
        "DetailsLocation": {
          "description": "Details url",
          "type": "string"
        },
        "Paused": {
          "description": "Is paused",
          "type": "boolean"
        },
        "Suspended": {
          "description": "Is suspended",
          "type": "boolean"
        },
        "LastInvalidCheck": {
          "format": "date-time",
          "description": "Last invalid check",
          "type": "string"
        },
        "LastValidCheck": {
          "format": "date-time",
          "description": "Last valid check",
          "type": "string"
        }
      }
    },
    "CreateUpdateHealthCheckImapCommand": {
      "description": "Create/update imap health check command",
      "required": [
        "Port",
        "Timeout",
        "ErrorTolerance",
        "Name",
        "Address",
        "Interval",
        "Paused",
        "LocationsFailoverEnabled",
        "NotificationTimeId"
      ],
      "type": "object",
      "properties": {
        "Port": {
          "format": "int32",
          "description": "Port",
          "default": 143,
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "Timeout": {
          "format": "int32",
          "description": "Time the server has to complete the request in [ms]",
          "default": 7000,
          "maximum": 120000,
          "minimum": 10,
          "type": "integer"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "default": 51,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Health check name",
          "default": "",
          "maxLength": 2000,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Address": {
          "description": "URL or IP address of the monitored service",
          "default": "",
          "type": "string"
        },
        "Interval": {
          "format": "int32",
          "description": "Time interval between health checks, in seconds",
          "default": 60,
          "type": "integer"
        },
        "Paused": {
          "description": "Is paused",
          "default": false,
          "type": "boolean"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "default": true,
          "type": "boolean"
        },
        "NotificationTypeIds": {
          "description": "Notification types enabled for a health check",
          "default": [
            1540,
            1545
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationEventTypeIds": {
          "description": "Event types with enabled notification",
          "default": [
            1601,
            1602
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationTimeId": {
          "format": "int32",
          "description": "Time when notification is sent",
          "default": 1594,
          "type": "integer"
        }
      }
    },
    "CreateUpdateHealthCheckImapSslCommand": {
      "description": "Create/update imap ssl health check command",
      "required": [
        "Port",
        "Timeout",
        "ErrorTolerance",
        "Name",
        "Address",
        "Interval",
        "Paused",
        "LocationsFailoverEnabled",
        "NotificationTimeId"
      ],
      "type": "object",
      "properties": {
        "Port": {
          "format": "int32",
          "description": "Port",
          "default": 143,
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "Timeout": {
          "format": "int32",
          "description": "Time the server has to complete the request in [ms]",
          "default": 7000,
          "maximum": 120000,
          "minimum": 10,
          "type": "integer"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "default": 51,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Health check name",
          "default": "",
          "maxLength": 2000,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Address": {
          "description": "URL or IP address of the monitored service",
          "default": "",
          "type": "string"
        },
        "Interval": {
          "format": "int32",
          "description": "Time interval between health checks, in seconds",
          "default": 60,
          "type": "integer"
        },
        "Paused": {
          "description": "Is paused",
          "default": false,
          "type": "boolean"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "default": true,
          "type": "boolean"
        },
        "NotificationTypeIds": {
          "description": "Notification types enabled for a health check",
          "default": [
            1540,
            1545
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationEventTypeIds": {
          "description": "Event types with enabled notification",
          "default": [
            1601,
            1602
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationTimeId": {
          "format": "int32",
          "description": "Time when notification is sent",
          "default": 1594,
          "type": "integer"
        }
      }
    },
    "HealthCheckSip": {
      "description": "Sip health check",
      "type": "object",
      "properties": {
        "SipUserName": {
          "description": "Sip user name",
          "type": "string"
        },
        "SipPassword": {
          "description": "Sip password",
          "type": "string"
        },
        "SipDomain": {
          "description": "Sip domain",
          "type": "string"
        },
        "Timeout": {
          "format": "int32",
          "description": "Timeout",
          "type": "integer"
        },
        "NotificationTypes": {
          "description": "Notification types enabled for a health check",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationEventTypes": {
          "description": "Event types with enabled notification",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationTime": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Time when notification is sent"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "type": "boolean"
        },
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Interval": {
          "format": "int32",
          "description": "Interval",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "ServiceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "State": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "State"
        },
        "DetailsLocation": {
          "description": "Details url",
          "type": "string"
        },
        "Paused": {
          "description": "Is paused",
          "type": "boolean"
        },
        "Suspended": {
          "description": "Is suspended",
          "type": "boolean"
        },
        "LastInvalidCheck": {
          "format": "date-time",
          "description": "Last invalid check",
          "type": "string"
        },
        "LastValidCheck": {
          "format": "date-time",
          "description": "Last valid check",
          "type": "string"
        }
      }
    },
    "CreateUpdateHealthCheckSipCommand": {
      "description": "Create/update imap health check command",
      "required": [
        "Name",
        "Address",
        "Interval",
        "Paused",
        "LocationsFailoverEnabled",
        "NotificationTimeId"
      ],
      "type": "object",
      "properties": {
        "SipUserName": {
          "description": "Sip user name",
          "type": "string"
        },
        "SipPassword": {
          "description": "Sip password",
          "type": "string"
        },
        "SipDomain": {
          "description": "Sip domain",
          "type": "string"
        },
        "Timeout": {
          "format": "int32",
          "description": "Time the server has to complete the request in [ms]",
          "default": 7000,
          "maximum": 120000,
          "minimum": 10,
          "type": "integer"
        },
        "Name": {
          "description": "Health check name",
          "default": "",
          "maxLength": 2000,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Address": {
          "description": "URL or IP address of the monitored service",
          "default": "",
          "type": "string"
        },
        "Interval": {
          "format": "int32",
          "description": "Time interval between health checks, in seconds",
          "default": 60,
          "type": "integer"
        },
        "Paused": {
          "description": "Is paused",
          "default": false,
          "type": "boolean"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "default": true,
          "type": "boolean"
        },
        "NotificationTypeIds": {
          "description": "Notification types enabled for a health check",
          "default": [
            1540,
            1545
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationEventTypeIds": {
          "description": "Event types with enabled notification",
          "default": [
            1601,
            1602
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationTimeId": {
          "format": "int32",
          "description": "Time when notification is sent",
          "default": 1594,
          "type": "integer"
        }
      }
    },
    "HealthCheckSmtp": {
      "description": "Ping health check",
      "type": "object",
      "properties": {
        "Port": {
          "format": "int32",
          "description": "Port",
          "type": "integer"
        },
        "Timeout": {
          "format": "int32",
          "description": "Timeout",
          "type": "integer"
        },
        "ReplyTimeout": {
          "format": "int32",
          "description": "Reply timeout",
          "type": "integer"
        },
        "NotificationTypes": {
          "description": "Notification types enabled for a health check",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationEventTypes": {
          "description": "Event types with enabled notification",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationTime": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Time when notification is sent"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "type": "boolean"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "type": "integer"
        },
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Interval": {
          "format": "int32",
          "description": "Interval",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "ServiceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "State": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "State"
        },
        "DetailsLocation": {
          "description": "Details url",
          "type": "string"
        },
        "Paused": {
          "description": "Is paused",
          "type": "boolean"
        },
        "Suspended": {
          "description": "Is suspended",
          "type": "boolean"
        },
        "LastInvalidCheck": {
          "format": "date-time",
          "description": "Last invalid check",
          "type": "string"
        },
        "LastValidCheck": {
          "format": "date-time",
          "description": "Last valid check",
          "type": "string"
        }
      }
    },
    "CreateUpdateHealthCheckSmtpCommand": {
      "description": "Create/update ping health check command",
      "required": [
        "Port",
        "ReplyTimeout",
        "Timeout",
        "ErrorTolerance",
        "Name",
        "Address",
        "Interval",
        "Paused",
        "LocationsFailoverEnabled",
        "NotificationTimeId"
      ],
      "type": "object",
      "properties": {
        "Port": {
          "format": "int32",
          "description": "Port",
          "default": 25,
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "ReplyTimeout": {
          "format": "int32",
          "description": "Maximum waiting time for a response [ms]",
          "default": 7000,
          "maximum": 120000,
          "minimum": 1,
          "type": "integer"
        },
        "Timeout": {
          "format": "int32",
          "description": "Time the server has to complete the request in [ms]",
          "default": 7000,
          "maximum": 120000,
          "minimum": 10,
          "type": "integer"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "default": 51,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Health check name",
          "default": "",
          "maxLength": 2000,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Address": {
          "description": "URL or IP address of the monitored service",
          "default": "",
          "type": "string"
        },
        "Interval": {
          "format": "int32",
          "description": "Time interval between health checks, in seconds",
          "default": 60,
          "type": "integer"
        },
        "Paused": {
          "description": "Is paused",
          "default": false,
          "type": "boolean"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "default": true,
          "type": "boolean"
        },
        "NotificationTypeIds": {
          "description": "Notification types enabled for a health check",
          "default": [
            1540,
            1545
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationEventTypeIds": {
          "description": "Event types with enabled notification",
          "default": [
            1601,
            1602
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationTimeId": {
          "format": "int32",
          "description": "Time when notification is sent",
          "default": 1594,
          "type": "integer"
        }
      }
    },
    "HealthCheckTcp": {
      "description": "Ping health check",
      "type": "object",
      "properties": {
        "Port": {
          "format": "int32",
          "description": "Port",
          "type": "integer"
        },
        "Timeout": {
          "format": "int32",
          "description": "Timeout",
          "type": "integer"
        },
        "NotificationTypes": {
          "description": "Notification types enabled for a health check",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationEventTypes": {
          "description": "Event types with enabled notification",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryItem"
          }
        },
        "NotificationTime": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Time when notification is sent"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "type": "boolean"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "type": "integer"
        },
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Interval": {
          "format": "int32",
          "description": "Interval",
          "type": "integer"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "ServiceType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Type"
        },
        "State": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "State"
        },
        "DetailsLocation": {
          "description": "Details url",
          "type": "string"
        },
        "Paused": {
          "description": "Is paused",
          "type": "boolean"
        },
        "Suspended": {
          "description": "Is suspended",
          "type": "boolean"
        },
        "LastInvalidCheck": {
          "format": "date-time",
          "description": "Last invalid check",
          "type": "string"
        },
        "LastValidCheck": {
          "format": "date-time",
          "description": "Last valid check",
          "type": "string"
        }
      }
    },
    "CreateUpdateHealthCheckTcpCommand": {
      "description": "Create/update ping health check command",
      "required": [
        "Port",
        "Timeout",
        "ErrorTolerance",
        "Name",
        "Address",
        "Interval",
        "Paused",
        "LocationsFailoverEnabled",
        "NotificationTimeId"
      ],
      "type": "object",
      "properties": {
        "Port": {
          "format": "int32",
          "description": "Port",
          "default": 80,
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "Timeout": {
          "format": "int32",
          "description": "Time the server has to complete the request in [ms]",
          "default": 10000,
          "maximum": 120000,
          "minimum": 10,
          "type": "integer"
        },
        "ErrorTolerance": {
          "format": "int32",
          "description": "How many (%) locations have to report an error to consider it a breakdown",
          "default": 51,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Health check name",
          "default": "",
          "maxLength": 2000,
          "minLength": 1,
          "pattern": "^[^/\\\\|<>%]*$",
          "type": "string"
        },
        "Address": {
          "description": "URL or IP address of the monitored service",
          "default": "",
          "type": "string"
        },
        "Interval": {
          "format": "int32",
          "description": "Time interval between health checks, in seconds",
          "default": 60,
          "type": "integer"
        },
        "Paused": {
          "description": "Is paused",
          "default": false,
          "type": "boolean"
        },
        "LocationsFailoverEnabled": {
          "description": "Use random substitute locations in case of location breakdown",
          "default": true,
          "type": "boolean"
        },
        "NotificationTypeIds": {
          "description": "Notification types enabled for a health check",
          "default": [
            1540,
            1545
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationEventTypeIds": {
          "description": "Event types with enabled notification",
          "default": [
            1601,
            1602
          ],
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "NotificationTimeId": {
          "format": "int32",
          "description": "Time when notification is sent",
          "default": 1594,
          "type": "integer"
        }
      }
    },
    "ApiCollection[HealthCheckNotification]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthCheckNotification"
          },
          "readOnly": true
        },
        "Meta": {
          "$ref": "#/definitions/ApiCollectionMetadata"
        }
      }
    },
    "HealthCheckNotification": {
      "description": "Heatlth check notification",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Id",
          "type": "integer"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "NotificationType": {
          "$ref": "#/definitions/DictionaryItem",
          "description": "Notification type"
        }
      }
    },
    "CreateUpdateHealthCheckNotificationCommand": {
      "description": "Create/update health check notification command",
      "required": [
        "Address",
        "NotificationTypeId"
      ],
      "type": "object",
      "properties": {
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "NotificationTypeId": {
          "format": "int32",
          "description": "Health check notification type (Dictionary 178)",
          "default": 1539,
          "type": "integer"
        }
      }
    },
    "MonitoringSensor": {
      "description": "Monitoring sensor",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Identifier",
          "type": "integer"
        },
        "Country": {
          "description": "Country",
          "type": "string"
        },
        "City": {
          "description": "City",
          "type": "string"
        },
        "IPAddress": {
          "description": "IPAddress",
          "type": "string"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "IsAvailable": {
          "description": "Is available",
          "type": "boolean"
        }
      }
    },
    "AssignNewMonitoringSensorCommand": {
      "description": "Assign new monitoring sensor command",
      "required": [
        "SensorId"
      ],
      "type": "object",
      "properties": {
        "SensorId": {
          "format": "int32",
          "description": "Sensor id",
          "type": "integer"
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "description": "OAuth2 Implicit Grant",
      "flow": "implicit",
      "authorizationUrl": "https://id.oktawave.com/core/connect/authorize",
      "tokenUrl": "https://id.oktawave.com/core/connect/token",
      "scopes": {
        "oktawave.api": "Access to Oktawave api"
      }
    }
  }
}